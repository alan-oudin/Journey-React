import { EventEmitter } from '../stencil-public-runtime';
export declare function isElement(element: any): element is Element;
export declare function hasShadowDom(el: HTMLElement): boolean;
export declare const debounceEvent: (event: EventEmitter, wait: number) => EventEmitter;
export declare const debounce: (func: (...args: any[]) => void, wait?: number) => (...args: any[]) => any;
/**
 * Elements inside of web components sometimes need to inherit global attributes
 * set on the host. For example, the inner input in `wcs-input` should inherit
 * the `title` attribute that developers set directly on `wcs-input`. This
 * helper function should be called in componentWillLoad and assigned to a variable
 * that is later used in the render function.
 *
 * This does not need to be reactive as changing attributes on the host element
 * does not trigger a re-render.
 */
export declare const inheritAttributes: (el: HTMLElement, attributes?: string[]) => {
    [k: string]: any;
};
/**
 * Returns an array of aria attributes that should be copied from
 * the shadow host element to a target within the light DOM.
 * @param el The element that the attributes should be copied from.
 * @param ignoreList The list of aria-attributes to ignore reflecting and removing from the host.
 * Use this in instances where we manually specify aria attributes on the `<Host>` element.
 */
export declare const inheritAriaAttributes: (el: HTMLElement, ignoreList?: string[]) => {
    [k: string]: any;
};
/**
 * Dynamically add or remove an attribute on the element.
 * If the value of the attribute is null or undefined, the attribute is removed.
 *
 * @param el - The HTMLElement
 * @param attr - The attribute to be added or removed
 * @param value - The value of the attribute
 */
export declare function setOrRemoveAttribute(el: HTMLElement, attr: string, value: string | null | undefined): void;
export declare const findItemLabel: (componentEl: HTMLElement) => HTMLWcsLabelElement | null;
/**
 * Given two lists of items, this function will return the items that were removed, kept, and added compared to the source list.
 * @param sourceList - The source list of items
 * @param newList - The target list of items
 * @param compareFn - The function to compare the items
 */
export declare const compareLists: <T>(sourceList: T[], newList: T[], compareFn: (v1: T, v2: T) => boolean) => {
    removed: T[];
    kept: T[];
    added: T[];
};
/**
 * Normalizes whitespace by replacing multiple consecutive whitespace characters
 * with a single space and removes leading and trailing whitespace.
 *
 * @param content - String potentially containing multiple whitespace characters to normalize, if the content is null or undefined, it will return an empty string.
 * @returns Normalized string where sequences of whitespace are replaced by a single space.
 *
 * @example
 * normalizeWhitespace("  Text   with    spaces  ") // Returns "Text with spaces"
 */
export declare function normalizeWhitespace(content: string): string;
/**
 * Patched version of requestAnimationFrame that avoids ngzone
 * Use only when you know ngzone should not run
 */
export declare const raf: (h: any) => any;
/**
 * Return true if the mouseEvent click is inside the given HTML element
 */
export declare const clickInsideElement: (event: MouseEvent, element: HTMLElement) => boolean;
export declare const clickTargetIsElementOrChildren: (mouseEvent: MouseEvent, element: HTMLElement) => boolean;
export declare function generateUniqueId(componentName: string): string;
/**
 * `clientX` property doesn't exist on KeyboardEvent, we therefore deduce it's a MouseEvent.
 */
export declare function isMouseEvent(event: MouseEvent | KeyboardEvent): event is MouseEvent;
export declare function isKeyup(evt: KeyboardEvent): boolean;
export declare function isKeydown(evt: KeyboardEvent): boolean;
export declare function isEscapeKey(evt: KeyboardEvent): boolean;
export declare function isSpaceKey(evt: KeyboardEvent): boolean;
export declare function isEnterKey(evt: KeyboardEvent): boolean;
export declare function isHomeKey(evt: KeyboardEvent): boolean;
export declare function isEndKey(evt: KeyboardEvent): boolean;
export declare function isUpArrowKey(evt: KeyboardEvent): boolean;
export declare function isDownArrowKey(evt: KeyboardEvent): boolean;
export declare function isLeftArrowKey(evt: KeyboardEvent): boolean;
export declare function isRightArrowKey(evt: KeyboardEvent): boolean;
export declare function isPageDownKey(evt: KeyboardEvent): boolean;
export declare function isPageUpKey(evt: KeyboardEvent): boolean;
export declare function isTabKey(evt: KeyboardEvent): boolean;
export declare function isCtrlA(evt: KeyboardEvent): boolean;
export declare function getCssRootPropertyValue(name: string): string | null;
/**
 * Converts a CSS time value string (e.g., '150ms', '1.5s') into milliseconds
 * @param {string} timeValue - The CSS time value string
 * @returns {number} Time in milliseconds
 */
export declare function parseCssTimeValueToMilliseconds(timeValue: string): number;
