import { ComponentInterface, EventEmitter } from '../../stencil-public-runtime';
import { AriaAttributeName, MutableAriaAttribute } from "../../utils/mutable-aria-attribute";
/**
 * The accordion-panel is a subcomponent of `wcs-accordion`. It represents every panel of the accordion that can be expanded.
 *
 *
 * @cssprop --wcs-accordion-panel-color-default - Default color of the accordion panel
 * @cssprop --wcs-accordion-panel-color-highlight - Highlight color of the accordion panel
 * @cssprop --wcs-accordion-panel-color-hover - Hover color of the accordion panel
 * @cssprop --wcs-accordion-panel-color-press - Press color of the accordion panel
 * @cssprop --wcs-accordion-panel-action-color-default - Default action color of the accordion panel
 * @cssprop --wcs-accordion-panel-action-color-highlight - Highlight action color of the accordion panel
 * @cssprop --wcs-accordion-panel-action-color-hover - Hovered action color of the accordion panel
 * @cssprop --wcs-accordion-panel-action-color-press - Pressed action color of the accordion panel
 * @cssprop --wcs-accordion-panel-background-color-default - Default background color of the accordion panel
 * @cssprop --wcs-accordion-panel-background-color-highlight - Highlight background color of the accordion panel
 * @cssprop --wcs-accordion-panel-background-color-hover - Hover background color of the accordion panel
 * @cssprop --wcs-accordion-panel-background-color-press - Press background color of the accordion panel
 * @cssprop --wcs-accordion-panel-header-font-size - Font size of the accordion panel header
 * @cssprop --wcs-accordion-panel-header-font-weight - Font weight of the accordion panel header
 * @cssprop --wcs-accordion-panel-border-radius - Border radius of the accordion panel
 * @cssprop --wcs-accordion-panel-border-radius-open - Border radius of the open accordion panel
 * @cssprop --wcs-accordion-panel-padding-vertical - Vertical padding of the accordion panel
 * @cssprop --wcs-accordion-panel-padding-horizontal - Horizontal padding of the accordion panel
 * @cssprop --wcs-accordion-panel-header-border-width - Border width of the accordion panel header
 * @cssprop --wcs-accordion-panel-border-width - Border width of the accordion panel
 * @cssprop --wcs-accordion-panel-border-width-focus - Border width of the accordion panel when focused
 * @cssprop --wcs-accordion-panel-border-color - Border color of the accordion panel
 * @cssprop --wcs-accordion-panel-border-color-focus - Border color of the accordion panel when focused
 * @cssprop --wcs-accordion-panel-border-style-focus - Border style of the accordion panel when focused
 * @cssprop --wcs-accordion-transition-duration - Transition duration of the accordion panel
 */
export declare class AccordionPanel implements ComponentInterface, MutableAriaAttribute {
    private el;
    private nativeButton?;
    private inheritedAttributes;
    open: boolean;
    /**
     * Specifies whether the component should display the open/close text.
     * if false, it won't show the open/close text.
     */
    hideActionText: boolean;
    /**
     * Specifies whether the component should highlight when open with primary color.
     * if true, the background color will be the primary color.
     * if false, the background color will be wcs-light.
     */
    highlight: boolean;
    /**
     * Specifies wether the component should group the content with header in one card
     * if true, there will be only one card with the header and the content
     * Nothing change when the panel is close
     */
    groupContentWithHeader: boolean;
    wcsOpenChange: EventEmitter<boolean>;
    openChange(newValue: boolean): void;
    componentWillLoad(): Promise<void> | void;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    close(): Promise<void>;
    render(): any;
}
