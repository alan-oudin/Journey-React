import { ComponentInterface, EventEmitter } from '../../stencil-public-runtime';
import { SelectChangeEventDetail, SelectFilterChangeEventDetail, WcsSelectFilterFn, WcsSelectSize } from './select-interface';
import { SelectOptionChosedEvent, SelectOptionValue } from '../select-option/select-option-interface';
import { KeyboardEventAssociatedAction } from './select-keyboard-event';
import { AriaAttributeName, MutableAriaAttribute } from "../../utils/mutable-aria-attribute";
/**
 * The select component (also named combobox) is a form component that allows users to select one or more options
 * from a list.
 * Use it with several slotted `wcs-select-option` inside.
 *
 * @slot filter-no-result Contains the customizable "No result found" div (autocomplete mode only).
 *
 * @cssprop --wcs-select-control-arrow-color - Color of the select arrow
 * @cssprop --wcs-select-control-arrow-color-disabled - Color of the select arrow when disabled
 *
 * @cssprop --wcs-select-control-background-color - Background color of the select control
 *
 * @cssprop --wcs-select-control-line-height - Line height of the select control
 *
 * @cssprop --wcs-select-options-padding - Padding of the select options container
 *
 * @cssprop --wcs-select-control-border-radius - Border radius of the select control
 * @cssprop --wcs-select-control-border-width-default - Border width of the select control when not focused
 * @cssprop --wcs-select-control-border-width-focus - Border width of the select control when focused
 *
 * @cssprop --wcs-select-control-border-color-default - Border color of the select control when not focused
 * @cssprop --wcs-select-control-border-color-disabled - Border color of the select control when disabled
 * @cssprop --wcs-select-control-border-color-error - Border color of the select control when error
 * @cssprop --wcs-select-control-border-color-focus - Border color of the select control when focused (not opened, but the control is focused)
 *
 * @cssprop --wcs-select-value-color - Text color of the select value when not focused
 * @cssprop --wcs-select-value-font-weight - Font weight of the select value
 *
 * @cssprop --wcs-select-placeholder-color - Text color of the select placeholder
 * @cssprop --wcs-select-placeholder-font-weight - Font weight of the select placeholder
 * @cssprop --wcs-select-placeholder-font-style - Font style of the select placeholder
 *
 * @cssprop --wcs-select-text-color-disabled - Text color of the select when disabled
 *
 * @cssprop --wcs-select-control-border-style-default - Border style of the select control when not focused
 * @cssprop --wcs-select-control-border-style-focus - Border style of the select control when focused
 * @cssprop --wcs-select-control-border-style-error - Border style of the select control when error
 *
 * @cssprop --wcs-select-control-chips-gap - Gap between chips (only in multiple mode)
 *
 * @cssprop --wcs-select-control-height-m - Height of the select control in medium size
 * @cssprop --wcs-select-control-height-l - Height of the select control in large size
 *
 * @cssprop --wcs-select-control-autocomplete-padding-vertical-m - Padding vertical (top - bottom) of the select control in size m
 * @cssprop --wcs-select-control-autocomplete-padding-vertical-l - Padding vertical (top - bottom) of the select control in size l
 * @cssprop --wcs-select-control-padding-horizontal-m - Padding horizontal (left - right) in medium size
 * @cssprop --wcs-select-control-padding-horizontal-l - Padding horizontal (left - right) in large size
 *
 * @cssprop --wcs-select-control-font-size-m - Font size of the select in size m
 * @cssprop --wcs-select-control-font-size-l - Font size of the select in size m
 *
 *
 * @cssprop --wcs-select-control-chip-color-default - Color default of the select chip
 * @cssprop --wcs-select-control-chip-color-disabled - Color disabled of the select chip
 * @cssprop --wcs-select-control-chip-background-color-default - Background color default of the select chip
 * @cssprop --wcs-select-control-chip-background-color-disabled - Disabled background color of the select chip
 * @cssprop --wcs-select-control-chip-padding-vertical - Padding vertical (top - bottom) of the select chip
 * @cssprop --wcs-select-control-chip-padding-horizontal - Padding horizontal (left - right) of the select chip
 * @cssprop --wcs-select-control-chip-line-height - Line height of the select chip
 * @cssprop --wcs-select-control-chip-border-radius - Border radius of the select chip
 *
 * @cssprop --wcs-select-overlay-max-height - Max height of the select overlay
 * @cssprop --wcs-select-overlay-background-color - Background color of the select overlay
 * @cssprop --wcs-select-overlay-border-width - Border width of the select overlay
 * @cssprop --wcs-select-overlay-border-color - Border color of the select overlay
 * @cssprop --wcs-select-overlay-border-radius - Border radius of the overlay
 */
export declare class Select implements ComponentInterface, MutableAriaAttribute {
    private el;
    private inheritedAttributes;
    private stateService;
    private selectId;
    private labelElement;
    private optionsEl;
    private optionsId;
    private controlEl;
    private values;
    /**
     * This attribute mutate when a new option is selected OR unselected
     * @private
     */
    private lastModifiedOptionElement;
    /**
     * It serves for accessibility feature: keyboard navigation. It serves to focus the option if defined when the select
     * is opened based on which key pressed.
     *
     * When the select is <b>opened</b> user can navigate through options with keyboard:
     *
     * - Arrow right | down: `lastFocusedOptionElement` equals to the next option of `lastFocusedOptionElement` or
     * the first if `lastFocusedOptionElement` is not defined
     * - Arrow left | top: `lastFocusedOptionElement` equals to the previous enabled option of `lastFocusedOptionElement`
     * or the first if `lastFocusedOptionElement` is not defined
     * - Page up: `lastFocusedOptionElement` equals to the first enabled option
     * - Page down: `lastFocusedOptionElement` equals to the last enabled option
     * @private
     */
    private lastFocusedOptionElement;
    private lastHighlightedOptionElement;
    private autocompleteInput;
    /** Whether the select is expanded */
    private expanded;
    /**
     * Specify the size (height) of the select.
     */
    size: WcsSelectSize;
    /** Text to display for the selected option, when no option is selected, the value is undefined. */
    private displayText;
    /** When the host is focused. */
    private focused;
    /** The currently selected value. */
    value?: any | null;
    /** The text to display when the select is empty. */
    placeholder?: string | null;
    /** If `true`, the user cannot interact with the select. */
    disabled: boolean;
    /**
     * If `true`, the user must fill in a value before submitting a form.
     */
    required: boolean;
    /** If `true`, the user can select multiple values at once. */
    multiple: boolean;
    /** If `true`, the select acts as an autocomplete field to filter your results. */
    autocomplete: boolean;
    /**
     * **Only works with `autocomplete` mode.**
     * If `true`, the server mode disables the client-side filtering on your select and allows you to handle
     * which options should be present in your DOM.
     */
    serverMode: boolean;
    /**
     * **Only works with `autocomplete` mode.**
     * Customizable sort function to change the comparison of values. If not provided, uses the default behavior :
     * `option.textContent.toLowerCase().startsWith(filter.toLowerCase())`
     */
    filterFn: WcsSelectFilterFn;
    /** If `true`, selected items are shown in chips mode. */
    chips: boolean;
    /** The name of the control, which is submitted with the form data. */
    name?: string;
    /** Function used to compare options, default : deep comparison. */
    compareWith?: (optionValue: any, selectedValue: any) => boolean;
    private popper;
    /**
     * Boolean to toggle the text "No result found" (only for autocomplete with filter)
     * @private
     */
    private showNoResultFoundLabel;
    /**
     * Value of the autocomplete input field
     * @private
     */
    private autocompleteValue;
    private overlayDirection;
    /** Emitted when the value has changed. */
    wcsChange: EventEmitter<SelectChangeEventDetail>;
    /** Emitted when the select has focus. */
    wcsFocus: EventEmitter<FocusEvent>;
    /** Emitted when the select loses focus. */
    wcsBlur: EventEmitter<FocusEvent>;
    /** Emitted when the autocomplete filter has changed. */
    wcsFilterChange: EventEmitter<SelectFilterChangeEventDetail>;
    /** Open the component. */
    open(): Promise<void>;
    /** Close the component. */
    close(): Promise<void>;
    onValueChangeHandler(newValue: any): void;
    /**
     * Updates the selected value(s) of the component and manages the internal state accordingly
     *
     * @param value - The value(s) to be selected in the component
     *                For single selection mode: any value that matches an option's value
     *                For multiple selection mode: a single value or an array of values
     * @param resetIfNoValue - When true and no value is provided, the select component will be reset
     *                        Defaults to true
     */
    private updateSelectedValue;
    /**
     * Reset the select: unselects all options for multiple mode and displays the placeholder
     * @private
     */
    private reset;
    componentDidLoad(): void;
    private createPopperInstance;
    private emitChange;
    private replaceOptions_firefoxBefore63;
    private listenDomUpdate_firefoxBefore63;
    componentWillRender(): Promise<void> | void;
    componentWillLoad(): Promise<void> | void;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    private get options();
    private get notDisabledOptions();
    private initMachineOptions;
    private handleOptionSelectedOnMultiple;
    private handleOptionSelectedOnSingle;
    disconnectedCallback(): void;
    private get hasValue();
    onMouseUp(event: MouseEvent): void;
    onWindowClickEvent(event: MouseEvent): void;
    onKeyDown(_event: KeyboardEvent): void;
    doActionFromKeyboardEventAssociatedAction(actionFromKeyboardEvent: KeyboardEventAssociatedAction, event: KeyboardEvent): void;
    private getClosestActiveOptionIndexForState;
    /**
     * Selects the non-disabled option with the index passed as a parameter.
     * The method sends an event to the state machine (the same as when clicking on an option with the mouse)
     * @param indexToSelect Option index within non-deactivated options list
     * @param fromKeyboard
     * @private
     */
    private selectOption;
    private selectClosestOption;
    private selectFirstOption;
    private selectLastOption;
    private focusOption;
    private focusClosestOption;
    private focusFirstOption;
    private focusLastOption;
    selectedOptionChanged(event: CustomEvent<SelectOptionChosedEvent>): void;
    sendOptionSelectedToStateMachine(event: SelectOptionChosedEvent, fromKeyboard?: boolean): void;
    onSlotchange(): void;
    removeChip(v: SelectOptionValue): void;
    private highlightOption;
    private highlightFirstOption;
    private highlightLastOption;
    private highlightClosestOption;
    /**
     * This method removes the highlight that applies to the last highlighted option if any.
     * This is used only for accessibility of autocomplete mode.
     * @private
     */
    private clearHighlightOnLastHighlightedOption;
    private onAutocompleteInputEvent;
    /**
     * Set the autocomplete value and open the select if needed.
     * @param filter - The new filter value
     * @param isReset - If true, the filter is reset and the select is closed
     * @param fromUserInteraction - If true, the change comes from user interaction (typing), if false it's programmatic
     * @private
     */
    private setAutocompleteValue;
    onFocus(event: FocusEvent): void;
    private focusAutocompleteInput;
    onBlur(event: FocusEvent): void;
    componentDidRender(): void;
    private focusedAttributes;
    private onAutocompleteFieldBlur;
    render(): any;
}
