import { ComponentInterface, EventEmitter } from '../../stencil-public-runtime';
import { AutocompleteTypes, InputChangeEventDetail, TextFieldTypes, WcsInputSize, WcsInputAutocorrect, WcsInputEnterKeyHint, WcsInputInputMode, WcsInputState } from './input-interface';
import { AriaAttributeName, MutableAriaAttribute } from "../../utils/mutable-aria-attribute";
/**
 * The input component is a form control that accepts a single line of text.
 * Implementation mainly inspired from Ionic Input Component.
 *
 * ## Accessibility guidelines ðŸ’¡
 * > - If you use wcs-input outside a wcs-form-field, you have to manage the label and the error message yourself.
 * > You can use the `aria-label` attribute to provide a label for screen readers but adds no visual label.
 *
 * @cssprop --wcs-input-icon-color-default - default icon color when the input is not focused
 * @cssprop --wcs-input-icon-color-focus - icon color when the input is focused
 * @cssprop --wcs-input-icon-color-disabled - icon color when the input is disabled
 *
 * @cssprop --wcs-input-background-color - background color of the input
 *
 * @cssprop --wcs-input-border-radius-left - border radius of the left side of the input
 * @cssprop --wcs-input-border-radius-right - border radius of the right side of the input
 *
 * @cssprop --wcs-input-border-width - border width of the input
 * @cssprop --wcs-input-border-width-focus - border width of the input when focused
 *
 * @cssprop --wcs-input-height-l - large height of the input
 * @cssprop --wcs-input-height-m - medium height of the input
 * @cssprop --wcs-input-height-s - small height of the input
 * @cssprop --wcs-input-font-size-l - large font size of the input
 * @cssprop --wcs-input-font-size-m - medium font size of the input
 * @cssprop --wcs-input-font-size-s - small font size of the input
 *
 * @cssprop --wcs-input-border-style-default - default border style of the input
 * @cssprop --wcs-input-border-style-focus - border style of the input when focused
 *
 * @cssprop --wcs-input-prefix-suffix-background-color - background color of the suffix/prefix
 * @cssprop --wcs-input-prefix-suffix-color - color of the suffix/prefix
 * @cssprop --wcs-input-prefix-suffix-color-disabled - color of the suffix/prefix when the input is disabled
 * @cssprop --wcs-input-prefix-suffix-font-weight - font weight of the suffix/prefix
 *
 * @cssprop --wcs-input-border-color-default - default border color of the input when not focused
 * @cssprop --wcs-input-border-color-disabled - border color of the input when disabled
 * @cssprop --wcs-input-border-color-focus - border color of the input when focused
 * @cssprop --wcs-input-reveal-password-button-border-color-focus - border color of the show/hide password button when focused
 * @cssprop --wcs-input-border-color-error - border color of the input when in error state
 *
 * @cssprop --wcs-input-value-color - color of the input value
 * @cssprop --wcs-input-value-font-weight - font weight of the input value
 *
 * @cssprop --wcs-input-placeholder-color - color of the input placeholder
 * @cssprop --wcs-input-placeholder-font-weight - font weight of the input placeholder
 * @cssprop --wcs-input-placeholder-font-style - font style of the input placeholder
 *
 * @cssprop --wcs-input-text-color-disabled - color of the input when disabled
 *
 * @cssprop --wcs-input-padding-horizontal-s - horizontal padding of the input in small size
 * @cssprop --wcs-input-padding-horizontal-m - horizontal padding of the input in medium size
 * @cssprop --wcs-input-padding-horizontal-l - horizontal padding of the input in large size
 *
 * @cssprop --wcs-input-gap - gap between text input and icon
 */
export declare class Input implements ComponentInterface, MutableAriaAttribute {
    private el;
    private nativeInput?;
    private inputId;
    private inheritedAttributes;
    private iconPassword;
    /**
     * This is required for a WebKit bug which requires us to
     * blur and focus an input to properly focus the input in
     * an item with delegatesFocus. It will no longer be needed
     * with iOS 14.
     *
     * @internal
     */
    fireFocusEvents: boolean;
    private passwordReveal;
    /**
     * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the
     * server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
     */
    accept?: string;
    /**
     * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
     * Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
     */
    autocapitalize: string;
    /**
     * Indicates whether the value of the control can be automatically completed by the browser.
     */
    autocomplete: AutocompleteTypes;
    /**
     * Whether auto correction should be enabled when the user is entering/editing the text value.
     */
    autocorrect: WcsInputAutocorrect;
    /**
     * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
     */
    autofocus: boolean;
    /**
     * Set the amount of time, in milliseconds, to wait to trigger the `wcsInput` event after each keystroke.
     * This also impacts form bindings such as `ngModel` or `v-model`.
     */
    debounce: number;
    protected debounceChanged(): void;
    /**
     * Prefix displayed before the text field contents. This is not included in the value.
     */
    prefixLabel: string;
    /**
     * Suffix displayed after the text field contents. This is not included in the value.
     */
    suffixLabel: string;
    /**
     * If `true`, the user cannot interact with the input.
     */
    disabled: boolean;
    /**
     * A hint to the browser for which enter key to display.
     */
    enterkeyhint?: WcsInputEnterKeyHint;
    /**
     * Specify the size (height) of the input.
     */
    size: WcsInputSize;
    /**
     * Name of the material icon to add to the input
     */
    icon: string;
    /**
     * A hint to the browser for which keyboard to display.
     */
    inputmode?: WcsInputInputMode;
    /**
     * The maximum value, which must not be less than its minimum (min attribute) value.
     */
    max?: string;
    /**
     * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute
     * specifies the maximum number of characters that the user can enter.
     */
    maxlength?: number;
    /**
     * The minimum value, which must not be greater than its maximum (max attribute) value.
     */
    min?: string;
    /**
     * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute
     * specifies the minimum number of characters that the user can enter.
     */
    minlength?: number;
    /**
     * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to
     * `"email"` or `"file"`, otherwise it is ignored.
     */
    multiple?: boolean;
    /**
     * The name of the control, which is submitted with the form data.
     */
    name: string;
    hidePasswordButtonAriaLabel: string;
    showPasswordButtonAriaLabel: string;
    /**
     * A regular expression that the value is checked against. The pattern must match the entire value, not just some
     * subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value
     * of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise
     * it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support
     * the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for
     * more information.
     */
    pattern?: string;
    /**
     * Instructional text that shows before the input has a value.
     */
    placeholder?: string | null;
    /**
     * If `true`, the user cannot modify the value.
     */
    readonly: boolean;
    /**
     * If `true`, the user must fill in a value before submitting a form.
     */
    required: boolean;
    /**
     * If `true`, the element will have its spelling and grammar checked.
     */
    spellcheck: boolean;
    /**
     * Specifies the state of the input. By default the input is in an normal state but you can to set it to 'error'
     * state if the data given by the user is not valid.
     */
    state: WcsInputState;
    /**
     * Works with the min and max attributes to limit the increments at which a value can be set.
     * Possible values are: `"any"` or a positive floating point number.
     */
    step?: string;
    /**
     * The type of control to display. The default type is text.
     */
    type: TextFieldTypes;
    /**
     * The value of the input.
     */
    value?: string | number | null;
    /**
     * Emitted when a keyboard input occurred. See https://developer.mozilla.org/en-US/docs/Web/Events/input
     */
    wcsInput: EventEmitter<KeyboardEvent>;
    /**
     * Emitted when the value has changed. See https://developer.mozilla.org/en-US/docs/Web/Events/change
     */
    wcsChange: EventEmitter<InputChangeEventDetail>;
    /**
     * Emitted when the input loses focus.
     */
    wcsBlur: EventEmitter<FocusEvent>;
    /**
     * Emitted when the input has focus.
     */
    wcsFocus: EventEmitter<FocusEvent>;
    componentWillLoad(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    /**
     * Sets blur on the native `input` in `wcs-input`. Use this method instead of the global
     * `input.blur()`.
     * @internal
     */
    setBlur(): Promise<void>;
    /**
     * Returns the native `<input>` element used under the hood.
     */
    getInputElement(): Promise<HTMLInputElement>;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    private getValueAsString;
    private onInput;
    private onChange;
    private onBlur;
    private onFocus;
    private passwordRevealIconClick;
    onPasswordRevealChange(): void;
    render(): any;
}
