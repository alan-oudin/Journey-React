import { ComponentInterface } from '../../stencil-public-runtime';
import { WcsNativeSelectSize } from './native-select-interface';
import { AriaAttributeName, MutableAriaAttribute } from "../../utils/mutable-aria-attribute";
/**
 * The `wcs-native-select` component is designed to accept a native `<select>` element as a slotted child. This choice
 * allows developers to bind the `<select>` element using the framework of their choice, without the need to re-expose all the
 * properties of the `<select>` and `<option>` elements in this component.
 *
 * The component wraps the native `<select>` element and provides custom styles and behavior, while preserving the native
 * functionality and accessibility.
 *
 * ### âœ… Guidance
 *
 * - To have a placeholder, you must have an option as child which has `selected` attribute and `disabled`
 * attribute. You can add the `hidden` attribute to don't show the placeholder option in the options overlay.
 *
 * ### Example usage
 *
 * ```html
 * <wcs-native-select>
 *   <select>
 *     <option value="option1">Option 1</option>
 *     <option value="option2">Option 2</option>
 *     <option value="option3">Option 3</option>
 *   </select>
 * </wcs-native-select>
 * ```
 *
 * ### Note
 * - We did not find a way to detect when the select is reset, if you want to apply the placeholder style when the
 * select is reset, you have to call the `updateStyles()` method manually.
 * - It is strongly recommended to use native-select when you don't have to support the multi-selection feature
 * - Use a native-select instead of a wcs-select if your application is mainly on mobile / tablet. The native behavior of the device will be used.
 *
 * @cssprop --wcs-native-select-line-height - Line height of the select
 *
 * @cssprop --wcs-native-select-size-m - Height of the select when size is 'm'
 * @cssprop --wcs-native-select-font-size-m - Font size of the select when size is 'm'
 * @cssprop --wcs-native-select-size-l - Height of the select when size is 'l'
 * @cssprop --wcs-native-select-font-size-l - Font size of the select when size is 'l'
 *
 * @cssprop --wcs-native-select-border-radius - Border radius of the select
 *
 * @cssprop --wcs-native-select-background-color - Background color of the select
 *
 * @cssprop --wcs-native-select-border-color-default - Border color of the select when not focused
 * @cssprop --wcs-native-select-border-color-disabled - Border color of the select when disabled
 * @cssprop --wcs-native-select-border-color-focus - Border color of the select when focused
 * @cssprop --wcs-native-select-border-color-error - Border color of the select when in error state
 *
 * @cssprop --wcs-native-select-border-style-default - Border style of the select when not focused
 * @cssprop --wcs-native-select-border-style-focus - Border style of the select when focused
 *
 * @cssprop --wcs-native-select-border-width - Border width of the select when not focused
 * @cssprop --wcs-native-select-border-width-focus - Border width of the select when focused
 *
 * @cssprop --wcs-native-select-value-color - Color of the selected value
 * @cssprop --wcs-native-select-value-font-weight - Font weight of the selected value
 * @cssprop --wcs-native-select-value-font-style - Font style of the selected value
 *
 * @cssprop --wcs-native-select-padding-horizontal-m - Padding horizontal of the select when size is 'm'
 * @cssprop --wcs-native-select-padding-horizontal-l - Padding horizontal of the select when size is 'l'
 *
 * @cssprop --wcs-native-select-arrow-color - Color of the select arrow
 * @cssprop --wcs-native-select-arrow-color-disabled - Color of the select arrow when the select is disabled
 *
 * @cssprop --wcs-native-select-text-color-disabled - Color of the text when the select is disabled
 *
 * @cssprop --wcs-native-select-placeholder-color - Color of the placeholder
 * @cssprop --wcs-native-select-placeholder-font-weight - Font weight of the placeholder
 * @cssprop --wcs-native-select-placeholder-font-style - Font style of the placeholder
 *
 * @cssprop --wcs-native-select-option-color - Text color of the options
 * @cssprop --wcs-native-select-option-font-style - Font style of the options
 * @cssprop --wcs-native-select-option-selected-color - Text color of the selected option
 *
 *
 */
export declare class NativeSelect implements ComponentInterface, MutableAriaAttribute {
    /**
     * The `size` property controls the size of the slotted `select` element by adjusting its padding.
     * There are two possible size options:
     * - 'm': medium size
     * - 'l': large size
     *
     * The default value is 'm'.
     */
    size: WcsNativeSelectSize;
    /**
     * If `true`, the user must fill in a value before submitting a form.
     * It is propagated to the slotted select element
     */
    required: boolean;
    private el;
    private expanded;
    private disabled;
    private selectElement;
    private observer;
    private readonly SLOTTED_SELECT_TRACKED_ATTRIBUTES_LIST;
    requiredChanged(newValue: boolean, oldValue: boolean): void;
    componentWillLoad(): void;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    private onSelectedOptionChange;
    private _updateStyles;
    private isPlaceholderOptionSelected;
    /**
     * This method should always unset all styles modified by the `applyPlaceholderStylesOnNativeSlottedSelectElement()`
     * @private
     */
    private applySelectedOptionStylesOnNativeSlottedSelectElement;
    /**
     * This method apply styles when the placeholder is shown.
     *
     * We use javascript because we cannot achieve that behaviour in pure css when the native select is not required
     * @private
     */
    private applyPlaceholderStylesOnNativeSlottedSelectElement;
    private updateHostAttributeWithSlottedSelect;
    disconnectedCallback(): void;
    /**
     * Use this method to force the component to update its styles. It can be useful when the select is reset (with a placeholder).
     */
    updateStyles(): Promise<void>;
    render(): any;
}
