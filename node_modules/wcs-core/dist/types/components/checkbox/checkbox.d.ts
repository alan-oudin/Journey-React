import { EventEmitter, ComponentInterface } from '../../stencil-public-runtime';
import { CheckboxChangeEventDetail, CheckboxLabelAlignment } from './checkbox-interface';
import { AriaAttributeName, MutableAriaAttribute } from "../../utils/mutable-aria-attribute";
import { ControlComponentWithLabel } from "../../utils/control-component-interface";
/**
 * The checkbox component is an input for choosing one or more items from a set by checking / unchecking it.
 *
 * @cssprop --wcs-checkbox-border-color-default - Default color of the border
 * @cssprop --wcs-checkbox-border-color-hover - Color of the border when hovered
 * @cssprop --wcs-checkbox-border-color-disabled - Color of the border when disabled
 * @cssprop --wcs-checkbox-border-color-selected - Color of the border when selected
 * @cssprop --wcs-checkbox-border-color-indeterminate - Color of the border when indeterminate
 *
 * @cssprop --wcs-checkbox-border-radius - Border radius of the checkbox
 * @cssprop --wcs-checkbox-border-width - Width of the border of the checkbox
 *
 * @cssprop --wcs-checkbox-size - Size of the checkbox
 *
 * @cssprop --wcs-checkbox-text-color-default - Color of the text when the checkbox is not selected
 * @cssprop --wcs-checkbox-text-color-disabled - Color of the text when the checkbox is disabled
 * @cssprop --wcs-checkbox-text-color-hover - Color of the text when the checkbox is hovered
 * @cssprop --wcs-checkbox-text-color-selected - Color of the text when the checkbox is selected
 *
 * @cssprop --wcs-checkbox-text-font-size - Font size of the text
 * @cssprop --wcs-checkbox-text-font-weight - Font weight of the text
 *
 * @cssprop --wcs-checkbox-background-color-default - Default background color of the checkbox
 * @cssprop --wcs-checkbox-background-color-hover - Background color of the checkbox when hovered
 * @cssprop --wcs-checkbox-background-color-disabled - Background color of the checkbox when disabled
 * @cssprop --wcs-checkbox-background-color-selected - Background color of the checkbox when selected
 * @cssprop --wcs-checkbox-background-color-indeterminate - Background color of the checkbox when indeterminate
 *
 * @cssprop --wcs-checkbox-outline-radius-focus - Border radius of the focus outline
 * @cssprop --wcs-checkbox-outline-color-focus - Color of the focus outline
 *
 * @cssprop --wcs-checkbox-gap - Gap between the checkbox and the label
 * @cssprop --wcs-checkmark-color - Color of the checkmark
 * @cssprop --wcs-checkmark-height - Height of the checkmark (From the bottom left to the top right of the checkmark)
 * @cssprop --wcs-checkmark-width - Width of the checkmark (From the bottom right to the top left of the checkmark)
 * @cssprop --wcs-checkmark-border-width - Width of the border of the checkmark
 *
 * @cssprop --wcs-indeterminate-bar-width - Width of the indeterminate bar
 * @cssprop --wcs-indeterminate-bar-height - Height of the indeterminate bar
 * @cssprop --wcs-indeterminate-bar-border-radius - Border-radius of the indeterminate bar
 * @cssprop --wcs-indeterminate-bar-background-color - Color of the indeterminate bar
 *
 * @cssprop --wcs-checkbox-transition-duration - Duration of the transition
 */
export declare class Checkbox implements ComponentInterface, MutableAriaAttribute, ControlComponentWithLabel {
    private el;
    private nativeInput;
    private inheritedAttributes;
    private checkboxId;
    name: string;
    /**
     * If `true` the checkbox is in indeterminate state.
     */
    indeterminate: boolean;
    /**
     * If `true`, the checkbox is selected.
     */
    checked: boolean;
    /**
     * Specifie the alignment of the checkbox with the label content
     */
    labelAlignment: CheckboxLabelAlignment;
    /**
     * Specify whether the checkbox is disabled or not.
     */
    disabled: boolean;
    /**
     * Emitted when the checked property has changed.
     */
    wcsChange: EventEmitter<CheckboxChangeEventDetail>;
    /**
     * Emitted when the checkbox has focus.
     */
    wcsFocus: EventEmitter<FocusEvent>;
    /**
     * Emitted when the checkbox loses focus.
     */
    wcsBlur: EventEmitter<FocusEvent>;
    componentWillLoad(): Promise<void> | void;
    componentDidLoad(): void;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    getLabel(): Promise<string>;
    handleChange(e: Event): void;
    handleHostClick(e: Event): Promise<void>;
    handleInputClick(ev: PointerEvent): void;
    toggleCheckboxState(): void;
    handleFocus(event: FocusEvent): void;
    handleBlur(event: FocusEvent): void;
    onSlotChange(): void;
    render(): any;
}
