import { ComponentInterface } from '../../stencil-public-runtime';
import { WcsButtonMode, WcsButtonShape, WcsButtonSize, WcsButtonType } from './button-interface';
import { AriaAttributeName, MutableAriaAttribute } from "../../utils/mutable-aria-attribute";
/**
 * The button component is used to trigger an action. It can also be a link when specifying href.
 *
 * ## Accessibility guidelines ðŸ’¡
 * > If your button doesn't contain text but only an image, you must set a relevant aria-label on the icon ðŸ‘‰ [see "Square" story below](#square)
 *
 * ## Click event
 *
 * The WCS button relies on the native click event to pass a user click to your app.
 * For now, it's not possible for us to prevent the click event to be fired when the button's disabled attribute is true.
 * This means you'll receive click events on a disabled wcs button.
 * If you're using the button with a library like Angular or React, they have internal mechanisms to prevent this behavior. Your callbacks will therefore not be called.
 * To fix this problem, we plan to provide a wcsClick event in addition to the native click for applications developed without frameworks.
 *
 * @cssprop --wcs-button-plain-color-default - Text/icon color of a plain button
 * @cssprop --wcs-button-stroked-color-default - text/icon color of a stroked button
 * @cssprop --wcs-button-clear-color-default - text/icon color of a clear button
 *
 * @cssprop --wcs-button-color-disabled - text/icon color disabled for mode plain, stroked, clear
 *
 * @cssprop --wcs-button-plain-background-color-default background color of a plain button
 * @cssprop --wcs-button-plain-background-color-disabled - disabled background color of a plain button
 * @cssprop --wcs-button-stroked-background-color-default background color of a stroked button
 * @cssprop --wcs-button-stroked-background-color-disabled - disabled background color of a stroked button
 * @cssprop --wcs-button-clear-background-color-default background color of a clear button
 * @cssprop --wcs-button-clear-background-color-disabled - disabled background color of a clear button
 *
 * @cssprop --wcs-button-plain-ripple-color-default - ripple background color of a plain button
 * @cssprop --wcs-button-stroked-ripple-color-default - ripple background color of a stroked button
 * @cssprop --wcs-button-clear-ripple-color-default - ripple background color of a clear button
 * @cssprop --wcs-button-border-radius-default - border radius for a default button
 * @cssprop --wcs-button-border-radius-rounded - border radius for a rounded button
 *
 * @cssprop --wcs-button-stroked-border-width - border width of a stroked button
 * @cssprop --wcs-button-stroked-border-color-default - default border color of a stroked button
 * @cssprop --wcs-button-stroked-border-color-disabled - disabled border color of a stroked button
 *
 * @cssprop --wcs-button-height-s - height for a size s button
 * @cssprop --wcs-button-font-size-s - font-size for a size s button
 * @cssprop --wcs-button-padding-size-s - padding for a size s button
 *
 * @cssprop --wcs-button-height-m - height for a size m button
 * @cssprop --wcs-button-font-size-m - font-size for a size m button
 * @cssprop --wcs-button-padding-size-m - padding for a size m button
 *
 * @cssprop --wcs-button-height-l - height for a size l button
 * @cssprop --wcs-button-font-size-l - font-size for a size l button
 * @cssprop --wcs-button-padding-size-l - padding for a size l button
 *
 * @cssprop --wcs-button-font-weight - font weight of a plain,stroked,clear button
 */
export declare class Button implements ComponentInterface, MutableAriaAttribute {
    private el;
    private nativeButton?;
    private inheritedAttributes;
    /**
     * Specify the button type.
     */
    type: WcsButtonType;
    /**
     * Set a URL to point to.<br/>
     * If specified use a `a` tag instead of `btn`.
     */
    href?: string;
    /**
     * Specifies where to open the linked document when using href (see prop above)<br/>
     * Default '_self' will open the linked document in the same frame as it was clicked
     */
    target?: '_blank' | '_self';
    /**
     * Specify whether the button is disabled or not.
     */
    disabled: boolean;
    /**
     * Specify whether the button should have a ripple effect or not.
     */
    ripple: boolean;
    private mdcRipple;
    /**
     * Specify the size of the button.
     */
    size: WcsButtonSize;
    /**
     * Specify the shape of the button.
     */
    shape: WcsButtonShape;
    /**
     * This attribute specify the appearance of the button.
     */
    mode: WcsButtonMode;
    /**
     * Flag to display spinner until the end of action
     */
    loading: boolean;
    /**
     * Native event click is emit event if we decide to stop propagation of it
     * @param ev
     */
    onClick(ev: Event): void;
    componentWillLoad(): Promise<void> | void;
    componentDidLoad(): void;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    private enabledRippleEffect;
    private disabledRippleEffect;
    private getTagName;
    onRippleChange(): void;
    render(): any;
}
