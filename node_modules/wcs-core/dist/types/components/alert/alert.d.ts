import { EventEmitter } from '../../stencil-public-runtime';
import { WcsAlertIntent } from "./alert-interface";
/**
 * Alerts are used to communicate a state or an action that has been performed.
 * It has to be used conjunction with the `wcs-alert-drawer` component, or you can use it independently by taking care of
 * the alert visibility
 *
 * @cssprop --wcs-alert-background-color - Background color of the alert
 * @cssprop --wcs-alert-icon-background-color - Background color of the icon
 * @cssprop --wcs-alert-title-color - Color of the title
 * @cssprop --wcs-alert-subtitle-color - Color of the subtitle
 * @cssprop --wcs-alert-dismiss-button-color - Color of the dismiss button
 * @cssprop --wcs-alert-title-font-weight - Font weight of the title
 * @cssprop --wcs-alert-subtitle-font-weight - Font weight of the subtitle
 * @cssprop --wcs-alert-title-font-size - Font size of the title
 * @cssprop --wcs-alert-subtitle-font-size - Font size of the subtitle
 * @cssprop --wcs-alert-border-width - Border width of the alert
 * @cssprop --wcs-alert-border-color - Border color of the alert
 * @cssprop --wcs-alert-border-radius - Border radius of the alert
 * @cssprop --wcs-alert-padding - Padding of the alert
 * @cssprop --wcs-alert-gap - Gap between each element of the alert, icon content and close button
 * @cssprop --wcs-alert-min-width - Minimum width of the alert, default to 100% and it is set by alert-drawer component
 * @cssprop --wcs-alert-progress-bar-height - Height of the progress bar if `showProgressBar` is set to true
 * @cssprop --wcs-alert-progress-bar-background-color - Background color of the progress bar
 */
export declare class Alert {
    private el;
    /**
     * Controls the visibility state of the alert.
     * This property is exposed to allow control of the alert's display state and animation timing:
     * - Used by wcs-alert-drawer to coordinate exit animations when the alert is dismissed
     * - Can be used directly for custom implementations (though using wcs-alert-drawer is recommended)
     * - When set to false, it triggers the exit animation if implemented
     *
     * Note: While direct usage is possible for custom implementations, it's recommended to use
     * wcs-alert-drawer for consistent alert management and animations.
     */
    show: boolean;
    intent: WcsAlertIntent;
    /**
     * Event emitted when the alert is dismissed
     */
    wcsAlertDismiss: EventEmitter<void>;
    /**
     * Time duration of the alert visibility
     *
     * 5000ms by default
     * If 0, the alert will not emit `wcsAlertDismiss` event automatically
     */
    timeout: number;
    showProgressBar: boolean;
    /** Only active if timeout > 0, becomes true when the alert reaches its maximum display time */
    private isTimedOut;
    /** Indicates if the mouse cursor is hovering over the alert */
    private isMouseHover;
    /**
     * ID of the setTimeout used to manage the alert's lifetime
     * https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout#notes
     */
    private timeoutId;
    /** Reference to the alert's information icon for managing its aria-label */
    private annoucementIconHtmlElement;
    mouseOverHandler(): void;
    mouseOutHandler(): void;
    /**
     * Handles the mouse hover state of the alert
     * @param hover - true if the mouse is hovering over the alert, false otherwise
     */
    private mouseHover;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): Promise<void>;
    showAlertAndRunTimeout(): Promise<void>;
    private onCloseButtonClick;
    private close;
    private getMaterialIcon;
    private getAriaLabel;
    disconnectedCallback(): void;
    render(): any;
}
