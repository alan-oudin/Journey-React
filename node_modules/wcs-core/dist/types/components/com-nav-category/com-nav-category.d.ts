import { ComponentInterface, EventEmitter } from '../../stencil-public-runtime';
import { CategoryOpenedEventDetail } from '../com-nav/com-nav-interface';
import { ComNavSize } from "../com-nav/com-nav-size";
import { AriaAttributeName, MutableAriaAttribute } from "../../utils/mutable-aria-attribute";
/**
 * The com-nav-category is a subcomponent of `wcs-com-nav`. It represents a category nested inside a `wcs-com-nav-submenu`.
 *
 * @cssprop --wcs-com-nav-category-label-font-size - Label font-size
 * @cssprop --wcs-com-nav-category-label-mobile-font-weight - Label font-weight on mobile
 * @cssprop --wcs-com-nav-category-label-mobile-color - Label color on mobile
 * @cssprop --wcs-com-nav-category-label-desktop-font-weight - Label font-weight on desktop
 * @cssprop --wcs-com-nav-category-label-desktop-color - Label color on mobile
 * @cssprop --wcs-com-nav-category-item-mobile-color - Color of category item (mobile)
 * @cssprop --wcs-com-nav-category-item-mobile-font-weight - Font weight of category item (mobile)
 * @cssprop --wcs-com-nav-category-item-mobile-spacing-top - Spacing top around items group (mobile)
 * @cssprop --wcs-com-nav-category-item-mobile-spacing-left - Spacing left around items group (mobile)
 * @cssprop --wcs-com-nav-category-item-mobile-gap - Gap between each category item (mobile)
 * @cssprop --wcs-com-nav-category-label-desktop-gap - Gap inside category label, between text and arrow
 * @cssprop --wcs-com-nav-category-label-desktop-focus-outline-color - Focus outline of the label (desktop)
 * @cssprop --wcs-com-nav-category-desktop-menu-background-color - Background color of the category menu (desktop)
 * @cssprop --wcs-com-nav-category-desktop-menu--border-left-width - Border left width of the category menu
 * @cssprop --wcs-com-nav-category-desktop-menu--border-left-color - Border left color of the category menu
 * @cssprop --wcs-com-nav-category-desktop-menu-background-indicator-color - Indicator color on top of menu
 * @cssprop --wcs-com-nav-category-desktop-menu-padding-top - Padding top of menu
 * @cssprop --wcs-com-nav-category-desktop-menu-padding-bottom - Padding bottom of menu
 * @cssprop --wcs-com-nav-category-desktop-menu-padding-left - Padding left of menu
 * @cssprop --wcs-com-nav-category-desktop-menu-padding-right - Padding right of menu
 * @cssprop --wcs-com-nav-category-desktop-menu-gap - Gap between each item (desktop)
 * @cssprop --wcs-com-nav-category-item-desktop-color - Color of category item (desktop)
 * @cssprop --wcs-com-nav-category-item-desktop-font-weight - Font weight of category item (desktop)
 */
export declare class ComNavCategory implements ComponentInterface, MutableAriaAttribute {
    private el;
    private nativeButton;
    private inheritedAttributes;
    label: string;
    private categoryOpen;
    wcsCategoryOpened: EventEmitter<CategoryOpenedEventDetail>;
    private categoryItemsId;
    private resizeObserver;
    /**
     * To re-trigger re-render in order to render a button in case of desktop or a heading in mobile case
     * @private
     */
    currentActiveSizing: ComNavSize;
    onWindowClickEvent(_: MouseEvent): void;
    onSubmenuOpened(event: CustomEvent<CategoryOpenedEventDetail>): void;
    componentDidLoad(): void;
    /**
     * Handle key down on category items
     * @param _event the keyboard event
     * @private
     */
    private handleCategoryItemsKeyDown;
    componentWillLoad(): Promise<void> | void;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    /**
     * Close the category
     */
    close(): Promise<void>;
    /**
     * Opens the category
     */
    open(): Promise<void>;
    /**
     * When the user clicks on the menu, we do not propagate the native event and we launch a custom event to manage
     * the closing of the menu correctly
     */
    private onClick;
    /**
     * Close the category and fire item click if we detect a mouse click on a slotted `a` element.
     * @param evt
     * @private
     */
    private handleItemClick;
    disconnectedCallback(): void;
    render(): any;
}
