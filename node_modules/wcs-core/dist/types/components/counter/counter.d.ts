import { ComponentInterface, EventEmitter } from '../../stencil-public-runtime';
import { CounterChangeEventDetail, WcsCounterSize } from './counter-interface';
import { AriaAttributeName, MutableAriaAttribute } from "../../utils/mutable-aria-attribute";
/**
 * Counter component, meant to be used for small range of values (e.g : 0 - 5).<br>
 * For larger or specific ranges, please use [wcs-input (type number)](.?path=/docs/components-input--documentation)
 *
 * @cssprop --wcs-counter-border-radius - Border radius of the counter
 *
 * @cssprop --wcs-counter-value-color-default - Default color of the value
 * @cssprop --wcs-counter-value-color-disabled - Color of the text when the counter is disabled
 * @cssprop --wcs-counter-font-weight - Font weight of the value
 *
 * @cssprop --wcs-counter-height-m - Height medium of the counter
 * @cssprop --wcs-counter-height-l - Height large of the counter
 * @cssprop --wcs-counter-font-size-m - Font size medium of the counter
 * @cssprop --wcs-counter-font-size-l - Font size large of the counter
 * @cssprop --wcs-counter-padding-m - Padding medium of the counter
 * @cssprop --wcs-counter-padding-l - Padding large of the counter
 *
 * @cssprop --wcs-counter-background-color - Background color of the counter
 * @cssprop --wcs-counter-gap - Gap between the buttons and the label
 * @cssprop --wcs-counter-gap-size-m - Gap between the buttons and the label when the size is M
 * @cssprop --wcs-counter-gap-size-l - Gap between the buttons and the label when the size is L
 * @cssprop --wcs-counter-outline-color-focus - Color of the focus outline
 *
 * @cssprop --wcs-counter-transition-duration - Duration of the animation
 *
 */
export declare class Counter implements ComponentInterface, MutableAriaAttribute {
    private el;
    private spinButton;
    private counterContainer;
    private inheritedAttributes;
    /**
     * Default animation duration, in milliseconds
     * @private
     */
    private ANIMATION_DURATION;
    /**
     * Specify the size (height) of the counter.
     */
    size: WcsCounterSize;
    /**
     * The label of the counter.<br/>
     * e.g. Number of passengers, train carriages, railroad tracks...
     */
    label: string;
    /**
     * Specify whether the counter is disabled or not.
     */
    disabled: boolean;
    /**
     * The minimum value of the counter.
     * If the value of the min attribute isn't set, then the element has no minimum value.
     */
    min?: number;
    /**
     * The maximum value of the counter.
     * If the value of the max attribute isn't set, then the element has no maximum value.
     */
    max?: number;
    /**
     * Defines by how much the counter will be incremented or decremented.
     */
    step: number;
    /**
     * Emitted when the value of the counter has changed.
     */
    wcsChange: EventEmitter<CounterChangeEventDetail>;
    /**
     * The current value of the counter.
     */
    value: number;
    /**
     * Only for animation and display purpose
     */
    private displayedValue;
    private animateRunning;
    /**
     * Emitted when the counter loses focus.
     */
    wcsBlur: EventEmitter<FocusEvent>;
    componentWillLoad(): void;
    componentDidRender(): void;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    /**
     * Current value change => handle event and interval
     */
    valueChange(newVal: any, oldVal: any): void;
    private handleValueChange;
    private updateDisplayValueIfNoAnimationRunning;
    private ensureValueIsNotOutOfMinMax;
    private setMinimumIfValueIsUndefinedOrNull;
    onKeyDown(_event: KeyboardEvent): void;
    private notifyChange;
    private handleDecrement;
    private handleIncrement;
    private animate;
    render(): any;
}
