import { ComponentInterface } from '../../stencil-public-runtime';
import { WcsButtonMode, WcsButtonShape, WcsButtonSize } from '../button/button-interface';
import { WcsDropdownPlacement } from './dropdown-interface';
import { KeyboardEventAssociatedAction } from "./dropdown-keyboard-event";
import { AriaAttributeName, MutableAriaAttribute } from "../../utils/mutable-aria-attribute";
/**
 * The dropdown component use a wcs-button under the hood, so you can use the same css classes as the button to style the
 * dropdown.
 *
 * @slot placeholder - The slot containing the placeholder displayed in button
 * @slot item - The slot container the list of `wcs-dropdown-item` elements
 *
 * @cssprop --wcs-dropdown-outline-color-focus - Outline color of dropdown when focus it
 *
 * @cssprop --wcs-dropdown-plain-arrow-color - Color of the arrow indicator when the dropdown is plain
 * @cssprop --wcs-dropdown-stroked-arrow-color - Color of the arrow indicator when the dropdown is stroked
 * @cssprop --wcs-dropdown-clear-arrow-color - Color of the arrow indicator when the dropdown is not filled
 * @cssprop --wcs-dropdown-arrow-color-disabled - Base color of the arrow indicator when the dropdown is disabled
 *
 * @cssprop --wcs-dropdown-padding-empty - Padding of and empty dropdown
 *
 * @cssprop --wcs-dropdown-overlay-padding - Defines the vertical padding inside the dropdown overlay
 * @cssprop --wcs-dropdown-overlay-max-height - Specifies the maximum height of the dropdown overlay
 * @cssprop --wcs-dropdown-overlay-background-color - Determines the background color of the dropdown overlay
 * @cssprop --wcs-dropdown-overlay-border-width - Sets the border width of the dropdown overlay
 * @cssprop --wcs-dropdown-overlay-border-radius - Defines the border radius of the dropdown overlay
 * @cssprop --wcs-dropdown-overlay-border-color - Specifies the border color of the dropdown overlay
 */
export declare class Dropdown implements ComponentInterface, MutableAriaAttribute {
    private el;
    private inheritedAttributes;
    /**
     * This button is visually hidden. It used to carry all aria attributes and acts as the controller of the menu.
     * The wcs-button could not handle the aria-controls and aria-activedescendant attributes because of the IDREF
     * not passing from a shadow-dom through another.
     * @private
     */
    private nativeButton;
    /**
     * This button is shown on the user interface, and visually receives focus and catch click events.
     * It is hidden to screen readers since the native button carries all the aria informations.
     * @private
     */
    private wcsButton;
    /**
     * This div is shown on the user interface when the dropdown is expanded.
     * @private
     */
    private popoverDiv;
    /** Hides the arrow in the button */
    noArrow: boolean;
    /** Dropdown's button mode */
    mode: WcsButtonMode;
    /** Dropdown's button shape */
    shape: WcsButtonShape;
    /** Dropdown's button size */
    size: WcsButtonSize;
    /** Specifies whether the dropdown button is clickable or not */
    disabled: boolean;
    /** placement of the dropdown's popover */
    placement: WcsDropdownPlacement;
    private expanded;
    private popper;
    private lastFocusedItemElement;
    private get items();
    protected placementChange(): void;
    onBlur(): void;
    componentDidLoad(): void;
    private fixForFirefoxBelow63;
    private onButtonClick;
    onWindowClickEvent(event: MouseEvent): void;
    dropdownItemClick(_: CustomEvent<void>): void;
    onKeyDown(_event: KeyboardEvent): void;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    doActionFromKeyboardEventAssociatedAction(actionFromKeyboardEvent: KeyboardEventAssociatedAction): void;
    /**
     * Removes the focus and tabindex 0 of the last focused item if any.
     * @private
     */
    private clearLastFocusedItem;
    private focusItem;
    private focusClosestItem;
    private getClosestActiveItemIndexForDirection;
    componentDidRender(): void;
    componentWillLoad(): Promise<void> | void;
    render(): any;
}
