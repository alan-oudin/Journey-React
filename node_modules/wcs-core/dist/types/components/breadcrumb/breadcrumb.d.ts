import { ComponentInterface } from '../../stencil-public-runtime';
import { AriaAttributeName, MutableAriaAttribute } from '../../utils/mutable-aria-attribute';
/**
 * A breadcrumb trail consists of a list of links to the parent pages of the current page in hierarchical order.
 * It helps users find their place within a website or web application. Breadcrumbs are often placed horizontally before a page's main content.
 *
 * ## Accessibility guidelines ðŸ’¡
 * > - If the last item is a link to the current page, you must set the `aria-current` attribute to `page` on `wcs-breadcrumb-item`.
 * > - If the element representing the current page is not a link, `aria-current` is optional.
 * > - You can set the attribute `aria-label` on `wcs-breadcrumb`, it will be passed to the native `nav` element located inside its shadow DOM.
 * >   You can find the `aria-label` default value in the table below. If your application is in English, you can set it to `Breadcrumb`.
 * > - You can do the same thing for the `aria-label` of the expand button when the breadcrumb is collapsed. You can find its default value
 * >   in the table below too.
 * > - If you need to **dynamically change the `aria-label` attribute of `wcs-breadcrumb` after the first render**, you can use the
 * >   `setAriaAttribute` JS method (example below). For the expand button however, you can update the prop `ariaLabelExpandButton`.
 * >   Note: we're working on updating the component automatically when attributes change.
 *
 * > ```javascript
 * > const wcsButton = document.querySelector('wcs-button');
 * > await wcsButton.setAriaAttribute('aria-label', 'new label');
 * > ```
 *
 * @cssprop --wcs-breadcrumb-icon-color - Icon color
 * @cssprop --wcs-breadcrumb-icon-font-size - Icon font size
 * @cssprop --wcs-breadcrumb-gap - Gap between breadcrumb items
 */
export declare class Breadcrumb implements ComponentInterface, MutableAriaAttribute {
    private el;
    private navEl?;
    private expandBtnEl;
    private inheritedAttributes;
    /**
     * If the number of breadcrumb items exceeds this maximum,
     * the breadcrumb will collapse and show an expand button.
     * If this prop is `undefined`, breadcrumb items will never collapse.
     */
    maxItems?: number;
    /**
     * The number of breadcrumb items to show before the expand button.
     * If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,
     * the breadcrumb will not be collapsed.
     */
    itemsBeforeCollapse: number;
    /**
     * The number of breadcrumb items to show after the expand button.
     * If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,
     * the breadcrumb will not be collapsed.
     */
    itemsAfterCollapse: number;
    /** Set `aria-label` for the expand button when the breadcrumb is collapsed. */
    ariaLabelExpandButton?: string;
    /**
     * Show breadcrumb items that are inside the hidden-items slot.
     */
    private showHiddenItems;
    handleCollapsePropsChange(): void;
    handleAriaLabelExpandBtnChange(newValue: string): void;
    componentWillLoad(): Promise<void> | void;
    componentDidLoad(): void;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    private getBreadcrumbItems;
    private shouldCollapseItems;
    private updateCollapsedViewMode;
    /**
     * Setting slot names on breadcrumb items allows to leverage JSX in the render method.
     */
    private assignSlotNamesForCollapsedViewMode;
    private assignSlotNamesForNonCollapsedViewMode;
    private handleSlotChange;
    private handleOnExpandBtnClick;
    /**
     * Avoid losing focus after clicking the expand button.
     * We need to give focus back to the first breadcrumb item link that was hidden before.
     */
    private setFocusToFirstHiddenItem;
    private renderExpandAllButton;
    render(): any;
}
