import { ComponentDidLoad, ComponentInterface, EventEmitter } from '../../stencil-public-runtime';
import { RowCssPartsFn, WcsGridAllRowSelectedEventDetails, WcsGridColumnSortChangeEventDetails, WcsGridPaginationChangeEventDetails, WcsGridRow, WcsGridSelectionConfig, WcsGridSelectionEventDetails } from './grid-interface';
import { KeyboardEventAssociatedAction } from "./grid-keyboard-event";
import { AriaAttributeName, MutableAriaAttribute } from "../../utils/mutable-aria-attribute";
/**
 * The grid component is a complex component used as an HTML table to display collections of data.
 *
 * @cssprop --wcs-grid-gap - Gap between grid cells (horizontal, vertical using `border-spacing` property)
 * @cssprop --wcs-grid-vertical-align - Vertical alignment of grid cells
 * @cssprop --wcs-grid-outline-color - Outline color for grid cells
 *
 * @cssprop --wcs-grid-cell-text-color - Text color of all grid cells
 * @cssprop --wcs-grid-cell-padding-horizontal - Horizontal padding of grid cells
 * @cssprop --wcs-grid-cell-padding-vertical - Vertical padding of grid cells
 * @cssprop --wcs-grid-cell-border-bottom - Bottom border of grid cells
 * @cssprop --wcs-grid-cell-separator-border - Separator border between grid cells
 * @cssprop --wcs-grid-first-cell-border-radius - Border radius of the first cell in a row
 * @cssprop --wcs-grid-last-cell-border-radius - Border radius of the last cell in a row
 *
 * @cssprop --wcs-grid-highlight-color - Background color for selected rows
 * @cssprop --wcs-grid-row-background-color - Background color of all rows
 * @cssprop --wcs-grid-row-odd-background-color - Background color of odd rows
 * @cssprop --wcs-grid-row-even-background-color - Background color of even rows
 *
 * @cssprop --wcs-grid-header-background-color-default - Default background color of the header
 * @cssprop --wcs-grid-header-background-color-hover - Background color of the header on hover
 * @cssprop --wcs-grid-header-background-color-press - Background color of the header on press
 * @cssprop --wcs-grid-header-text-color - Text color of the header
 * @cssprop --wcs-grid-header-font-weight - Font weight of the header
 * @cssprop --wcs-grid-header-font-size - Font size of the header
 * @cssprop --wcs-grid-header-line-height - Line height of the header
 * @cssprop --wcs-grid-header-padding-vertical - Vertical padding of the header
 * @cssprop --wcs-grid-header-padding-horizontal - Horizontal padding of the header
 * @cssprop --wcs-grid-header-border-left - Left border between header cells (default is none
 * @cssprop --wcs-grid-header-border-radius - Border radius of the header
 * @cssprop --wcs-grid-header-border-bottom - Bottom border of the header
 * @cssprop --wcs-grid-header-transition-duration - Transition duration of the header
 * @cssprop --wcs-grid-first-header-background-color - Background color of the first header cell
 * @cssprop --wcs-grid-first-header-border-radius - Border radius of the first header cell
 * @cssprop --wcs-grid-last-header-border-radius - Border radius of the last header cell
 * @cssprop --wcs-grid-column-selection-width - Width of the selection column (when selectionConfig is defined)
 * @cssprop --wcs-grid-header-sort-arrow-color-default - Color of the sort arrow in the header
 * @cssprop --wcs-grid-header-sort-arrow-color-hover - Color of the sort arrow in the header when hovered
 *
 * @csspart all-rows-checkbox - CSS part for the checkbox in the selection column that selects all rows
 * @csspart row-checkbox - CSS part for the checkbox of each row in the selection column
 *
 * @slot grid-column - The slot containing the column of the grid in the `<thead>`
 * @slot grid-pagination - The slot containing the pagination of the grid below the `<table>`
 *
 */
export declare class Grid implements ComponentInterface, ComponentDidLoad, MutableAriaAttribute {
    private el;
    private nativeTable;
    private inheritedAttributes;
    /**
     * Manage sort and pagination with a backend server when set to `true`
     */
    serverMode: boolean;
    /**
     * Contains the data to display in the table from a js object
     */
    data: any[];
    /**
     * Flag to display a spinner during data loading
     */
    loading: boolean;
    /**
     * Used to manage grid's row selection.
     * "none": no row can be selected.
     * "multiple": several rows can be selected.
     * "single": one row only can be selected.
     */
    selectionConfig: WcsGridSelectionConfig;
    /**
     * Set the selected items (rows)
     */
    selectedItems: any | any[];
    /**
     * Automatically set by the component to reference the wcs-grid-pagination HTML element by its id.
     */
    wcsGridPaginationId: string;
    /**
     * Name of the object's key that will be used to display the cells whose `keyValue` attribute matches to the
     * object's value for this key. Useful for custom cells.
     */
    rowIdPath: string;
    /**
     * Function to add css parts to the grid rows, this allows you to customize the rows with css parts directly
     * in you're application stylesheet.
     */
    rowCssPartsFn: RowCssPartsFn;
    private columns;
    private paginationEl;
    /**
     * Rows to display, contains user data and meta data
     */
    private rows;
    /**
     * Event emitted when a row is selected or unselected
     */
    wcsGridSelectionChange: EventEmitter<WcsGridSelectionEventDetails>;
    /**
     * Event emitted when all rows are selected or unselected
     */
    wcsGridAllSelectionChange: EventEmitter<WcsGridAllRowSelectedEventDetails>;
    /**
     * Event emitted when the grid has focus.
     */
    wcsFocus: EventEmitter<FocusEvent>;
    /**
     * Event emitted when the grid loses focus.
     */
    wcsBlur: EventEmitter<FocusEvent>;
    /**
     * Used to track the focus position in the grid for keyboard navigation.
     * Header row : index 0
     * First column :
     *   - index 1 if selection mode multiple or single
     *   - index 0 if no selection mode
     * Default position : col 0, row 1
     */
    private cursorPosition;
    onCursorPositionChange(newValue: {
        col: number;
        row: number;
    }): void;
    onDataChange(newValue: any[]): void;
    onSelectedItemsPropertyChange(newValue: any | any[]): void;
    onFocus(event: FocusEvent): void;
    onBlur(event: FocusEvent): void;
    /**
     * Set focus on the first cell of the grid
     */
    focusFirstCell(): Promise<void>;
    /**
     * If selectionConfig is different from `none`, that means that an extra column for radio or checkbox is rendered
     * in the table.
     */
    hasSelectionColumn(): boolean;
    /**
     * Returns the element to focus at the current cursor position : it can be a cell (td, th) to focus or a nested
     * checkbox / radio element if the selection mode is single or multiple
     */
    getElementToFocusAtCursorPosition(): HTMLTableCellElement | HTMLWcsCheckboxElement | HTMLInputElement;
    moveCursorPosition(directionX: number | 'first' | 'last', directionY: number | 'first' | 'last'): void;
    /**
     * When the grid has selectionConfig single, an empty th appears at col=0, row=0.
     * It should not be focusable so the cursor navigates to col=1, row=0 instead.
     */
    handleCursorPositionOnEmptyTh(): void;
    onHiddenColumnChange(): void;
    onKeyDown(_event: KeyboardEvent): void;
    doActionFromKeyboardEventAssociatedAction(actionFromKeyboardEvent: KeyboardEventAssociatedAction, event: KeyboardEvent): void;
    onClick(_event: MouseEvent): void;
    private updateSelectionWithValues;
    private wcsGridRowToWcsGridRowData;
    private updateGridRows;
    componentDidLoad(): void;
    componentWillLoad(): Promise<void> | void;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    /**
     * Handle existing column's filters (defined before the grid is instantiated)
     * @private
     */
    private refreshSort;
    private disableSortOrderForColumns;
    private getGridColumnsFromTemplate;
    private getGridPaginationsFromTemplate;
    private get gridElementsWithCoordinates();
    sortChangeEventHandler(event: CustomEvent<WcsGridColumnSortChangeEventDetails>): void;
    /**
     * Sorts the grid rows according to the given column's configuration
     * @param column Column from which to extract the sorting configuration
     * @private
     */
    private sortBy;
    /**
     * Update the page's number of all rows
     */
    private updatePageIndex;
    paginationChangeEventHandler(): void;
    paginationChangeEventHandlerOutside(event: CustomEvent<WcsGridPaginationChangeEventDetails>): void;
    private onPaginationChange;
    private onRowSelection;
    private get selectedRows();
    private selectAllRows;
    private allRowsAreSelected;
    private getRowsForCurrentPage;
    renderSelectionColumn(row: WcsGridRow, rowIndex: number): any;
    private getCellContent;
    /**
     * Returns the total number of columns
     * @private
     */
    private totalColumnCount;
    /**
     * Returns the total number of columns that are not hidden
     * @private
     */
    private totalDisplayedColumnCount;
    /**
     * Returns true if at least one column is hidden from the table
     * @private
     */
    private atLeastOneColumnHidden;
    render(): any;
    /**
     * Returns the row with all mapped cells inside.
     * The aria-rowindex here starts at 2 because the header row starts at index 1.
     * @private
     */
    private renderRow;
    private rowCssPartsWithoutEmptyList;
}
/**
 * Pour resize le tableau
 * https://www.brainbell.com/javascript/making-resizable-table-js.htmls
 *
 */
