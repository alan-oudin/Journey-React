import { ComponentInterface, EventEmitter } from '../../stencil-public-runtime';
import { SwitchChangeEventDetail, SwitchLabelAlignment } from './switch-interface';
import { AriaAttributeName, MutableAriaAttribute } from "../../utils/mutable-aria-attribute";
import { ControlComponentWithLabel } from "../../utils/control-component-interface";
/**
 * The switch component is a control used to switch between on and off state.
 *
 * @cssprop --wcs-switch-outline-color-focus - Color of the focus outline
 *
 * @cssprop --wcs-switch-text-color-default - Color of the text when the switch is not selected
 * @cssprop --wcs-switch-text-color-selected - Color of the text when the switch is selected
 * @cssprop --wcs-switch-text-color-disabled - Color of the text when the switch is disabled

 *
 * @cssprop --wcs-switch-background-color-initial - Background color of the switch when not selected
 * @cssprop --wcs-switch-background-color-final - Background color of the switch when selected
 * @cssprop --wcs-switch-background-color-disabled - Background color of the switch when disabled
 * @cssprop --wcs-switch-background-color-disabled-selected - Background color of the switch when disabled and selected
 * @cssprop --wcs-switch-background-color-hover-selected - Background color of the switch when hovered and selected
 *
 * @cssprop --wcs-switch-height - Height of the switch
 * @cssprop --wcs-switch-width - Width of the switch
 * @cssprop --wcs-switch-border-radius - Border radius of the switch
 * @cssprop --wcs-switch-padding-horizontal - Horizontal padding of the switch
 * @cssprop --wcs-switch-padding-vertical - Vertical padding of the switch
 *
 * @cssprop --wcs-switch-dot-color-default - Color of the dot when not selected
 * @cssprop --wcs-switch-dot-color-selected - Color of the dot when selected
 * @cssprop --wcs-switch-dot-color-disabled - Color of the dot when disabled
 *
 * @cssprop --wcs-switch-dot-translate-x - Horizontal translation of the dot (from left to right = right to left)
 * @cssprop --wcs-switch-dot-size - Size of the dot
 *
 * @cssprop --wcs-switch-gap - Gap between the switch and the text
 */
export declare class Switch implements ComponentInterface, MutableAriaAttribute, ControlComponentWithLabel {
    private el;
    private switchId;
    private nativeInput;
    private inheritedAttributes;
    name: string;
    /**
     * If `true`, the switch is selected.
     */
    checked: boolean;
    /**
     * Specifie the alignment of the switch with the label content
     */
    labelAlignment: SwitchLabelAlignment;
    /**
     * Specify whether the switch is disabled or not.
     */
    disabled: boolean;
    /**
     * Emitted when the checked property has changed.
     */
    wcsChange: EventEmitter<SwitchChangeEventDetail>;
    /**
     * Emitted when the switch has focus.
     */
    wcsFocus: EventEmitter<FocusEvent>;
    /**
     * Emitted when the switch loses focus.
     */
    wcsBlur: EventEmitter<FocusEvent>;
    handleChange(ev: Event): void;
    handleHostClick(e: Event): Promise<void>;
    handleInputClick(ev: PointerEvent): void;
    toggleSwitchState(): void;
    handleFocus(event: FocusEvent): void;
    handleBlur(event: FocusEvent): void;
    componentWillLoad(): Promise<void> | void;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    getLabel(): Promise<string>;
    render(): any;
}
