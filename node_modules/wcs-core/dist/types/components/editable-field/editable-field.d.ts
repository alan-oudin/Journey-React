import { ComponentInterface, EventEmitter } from '../../stencil-public-runtime';
import { EditableComponentUpdateEvent, EditableFieldType, FormatFn, ValidateFn, WcsEditableFieldSize } from './editable-field-interface';
/**
 * The editable-field component can be used to simplify the user experience, avoiding the use of a redirection to a form
 * to edit the data of an entity. You can use it with these wrapped components : `wcs-input`, `wcs-textarea`, `wcs-select`.
 *
 * This component is not present in the SNCF design system specifications, so we tried to build it in the most
 * "discoverable" way possible (for users who interact with), but it's a first version.
 *
 * **How to use ❓**
 * This component is mostly used with a server that returns a response to the input sent through the `wcsChange` event.
 * It has 3 internal states :
 * - DISPLAY = the default state of the editable-field
 * - EDIT = the editable-field is editable, the user should input the data
 * - LOADING = the data is submitted and the editable-field is waiting for a **response**
 *
 * A **response** is needed to get the component out of the LOADING state. You can either :
 * - Set the `value` property to a different value to tell the component to refresh and go back into DISPLAY state
 * - Use the `successHandler` callback through the `wcsChange` event (see interface [EditableComponentUpdateEvent](https://gitlab.com/SNCF/wcs/-/blob/develop/src/components/editable-field/editable-field-interface.tsx))
 * - Use the `errorHandler` callback through the `wcsChange` event (see interface [EditableComponentUpdateEvent](https://gitlab.com/SNCF/wcs/-/blob/develop/src/components/editable-field/editable-field-interface.tsx))
 *
 * **Accessibility guidelines 💡**
 *
 * > - Aria attributes are put on the native component on the first rendering with the `label` and `errorMsg` you provided
 * > - Additional aria attributes put on `<wcs-editable-field>` won't inherit onto the native component : you must use the `setAriaAttribute` method.
 *
 * @cssprop --wcs-editable-field-label-color - Color of the label text
 * @cssprop --wcs-editable-field-label-font-weight - Font weight of the label text
 * @cssprop --wcs-editable-field-label-gap - Gap between the label and the field
 * @cssprop --wcs-editable-field-label-font-size - Font size of the label text
 *
 * @cssprop --wcs-editable-field-background-color - Background color of the editable field
 * @cssprop --wcs-editable-field-value-font-weight - Font weight of the field value text
 * @cssprop --wcs-editable-field-value-color-default - Default color of the field value text
 * @cssprop --wcs-editable-field-value-color-hover - Color of the field value text on hover
 * @cssprop --wcs-editable-field-value-color-readonly - Color of the field value text when readonly
 *
 * @cssprop --wcs-editable-field-height-m - Height of the editable field in medium size
 * @cssprop --wcs-editable-field-height-l - Height of the editable field in large size
 * @cssprop --wcs-editable-field-font-size-m - Font size of the field value text in medium size
 * @cssprop --wcs-editable-field-font-size-l - Font size of the field value text in large size
 *
 * @cssprop --wcs-editable-field-border-radius - Border radius of the editable field
 * @cssprop --wcs-editable-field-border-width - Border width of the editable field
 * @cssprop --wcs-editable-field-border-width-focus - Border width of the editable field when focused
 * @cssprop --wcs-editable-field-border-width-hover - Border width of the editable field on hover
 * @cssprop --wcs-editable-field-border-color-default - Default border color of the editable field
 * @cssprop --wcs-editable-field-border-color-hover - Border color of the editable field on hover
 * @cssprop --wcs-editable-field-border-color-focus - Border color of the editable field on focus
 * @cssprop --wcs-editable-field-border-style - Border style of the editable field
 *
 * @cssprop --wcs-editable-field-padding-vertical-m - Vertical padding of the editable field in medium size
 * @cssprop --wcs-editable-field-padding-vertical-l - Vertical padding of the editable field in large size
 * @cssprop --wcs-editable-field-padding-horizontal-m - Horizontal padding of the editable field in medium size
 * @cssprop --wcs-editable-field-padding-horizontal-l - Horizontal padding of the editable field in large size
 *
 * @cssprop --wcs-editable-field-icon-color-readonly - Color of the icon when the field is readonly
 */
export declare class EditableField implements ComponentInterface {
    private el;
    private spiedElement;
    private editModeBtn;
    private onInputKeydownCallback;
    private onWcsInputOrChangeCallback;
    private currentState;
    /**
     * Specifies which component is used for editing
     */
    type: EditableFieldType;
    /**
     * Label of the field.
     * Will also be part of the edit button `aria-label`.
     */
    label: string;
    /**
     * Event called at each (valid) update of the field.
     */
    wcsChange: EventEmitter<EditableComponentUpdateEvent>;
    /**
     * Specify whether the field is editable or not
     */
    readonly: boolean;
    /**
     * Initial value of the field
     */
    value: any;
    /**
     * Function to customize the validation of the data during the update
     */
    validateFn: ValidateFn<any>;
    /**
     * Function used to format the value
     */
    formatFn: FormatFn<any>;
    /**
     * Error message displayed under the field if validation failed.
     */
    errorMsg: string;
    /**
     * Specify the size (height) of the editable field.
     */
    size: WcsEditableFieldSize;
    private isError;
    private currentValue;
    componentWillLoad(): Promise<void> | void;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    private keyboardSubmitHandler;
    private onWcsInputOrChange;
    private cleanUpSpiedElementEventListeners;
    private initWithInput;
    private initWithTextArea;
    private initWithSelect;
    /**
     * This method subscribes the component to the change events produced by the other WCS components
     * (provided by the user in slot)
     * @param elt the element to subscribe to
     * @private
     */
    private addWcsChangeEventHandler;
    /**
     * This method subscribes the component to the input events produced by the other WCS components
     * @param elt the element to subscribe to
     * @private
     */
    private addWcsInputEventHandler;
    /**
     * This method subscribes the component to the keydown events produced by the other WCS components
     * @param elt the element to subscribe to
     * @private
     */
    private addKeyDownHandler;
    private focusEditModeBtn;
    private sendCurrentValue;
    private discardChanges;
    forceDisplayStateAndValidate(): void;
    onWindowClickEvent(event: MouseEvent | KeyboardEvent): void;
    /**
     * discard changes and force component state to DISPLAY
     * <br/>
     * This method must be call when component is in LOAD state
     */
    errorHandler(): void;
    onValueChange(): void;
    private onDisplayContainerClick;
    private getReadonlySvgIcon;
    private formatValues;
    render(): any;
}
