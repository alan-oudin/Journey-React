import { ComponentInterface, EventEmitter } from '../../stencil-public-runtime';
import { MenuOpenedEventDetail } from '../com-nav/com-nav-interface';
import { ComNavSize } from "../com-nav/com-nav-size";
import { AriaAttributeName, MutableAriaAttribute } from "../../utils/mutable-aria-attribute";
/**
 * The com-nav-submenu is a subcomponent of `wcs-com-nav`. It represents an expandable menu containing more items or categories.
 *
 * @cssprop --wcs-com-nav-submenu-button-color - Color of the menu label
 * @cssprop --wcs-com-nav-submenu-button-font-weight - Font-weight of the menu label
 * @cssprop --wcs-com-nav-submenu-button-focus-outline-color - Focus outline color of the menu label
 * @cssprop --wcs-com-nav-submenu-button-gap - Gap inside menu label between text and arrow indicator
 * @cssprop --wcs-com-nav-submenu-desktop-menu-background-color - Background color of the menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-text-color - Text color inside menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-link-font-weight - Link font-weight color inside menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-heading-font-weight - Heading font-weight of the menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-description-font-weight - Description font-weight of the menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-description-gap - Gap between heading and description in the description section of the menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-padding - Padding of the menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-items-padding-left - Padding left around link items group in menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-items-padding-right - Padding right around link items group in menu (desktop)
 * @cssprop --wcs-com-nav-submenu-mobile-text-color - Text color for each text (mobile)
 * @cssprop --wcs-com-nav-submenu-mobile-link-font-weight - Link font-weight for each link (mobile)
 * @cssprop --wcs-com-nav-submenu-mobile-spacing-top - Spacing around top of the submenu (mobile)
 * @cssprop --wcs-com-nav-submenu-mobile-spacing-bottom - Spacing around bottom of the submenu (mobile)
 * @cssprop --wcs-com-nav-submenu-mobile-spacing-left - Spacing around left of the submenu (mobile)
 * @cssprop --wcs-com-nav-submenu-mobile-gap - Gap between each item in submenu (mobile)
 */
export declare class ComNavSubmenu implements ComponentInterface, MutableAriaAttribute {
    private el;
    private nativeButton;
    private inheritedAttributes;
    label: string;
    panelTitle: string;
    panelDescription: string;
    private menuOpen;
    wcsSubmenuOpened: EventEmitter<MenuOpenedEventDetail>;
    private menuItemsId;
    private resizeObserver;
    /**
     * To re-trigger re-render in order to render a button in case of desktop or a heading in mobile case
     * @private
     */
    currentActiveSizing: ComNavSize;
    componentWillLoad(): Promise<void> | void;
    componentDidLoad(): void;
    /**
     * If the user clicks outside the menu, we close it
     */
    onWindowClickEvent(_: MouseEvent): void;
    onSubmenuOpened(event: CustomEvent<MenuOpenedEventDetail>): void;
    /**
     * Close the menu when escape is pressed
     * @param _event keydown event
     */
    onEscapeKeyDown(_event: KeyboardEvent): void;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    /**
     * Close the menu
     */
    close(): Promise<void>;
    /**
     * Opens the menu
     */
    open(): Promise<void>;
    /**
     * When the user clicks on the menu, we do not propagate the native event and we launch a custom event to manage
     * the closing of the menu correctly
     */
    private onClick;
    /**
     * Handle key down on menu items
     * @param _event the keyboard event
     * @private
     */
    private handleMenuItemsKeyDown;
    private handleMenuItemsClick;
    /**
     * handle category item click to close the submenu
     * @param _
     * @private
     */
    private wcsCategoryItemClickedHandler;
    disconnectedCallback(): void;
    render(): any;
}
