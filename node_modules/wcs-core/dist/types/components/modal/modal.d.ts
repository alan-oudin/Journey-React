import { EventEmitter, ComponentInterface } from '../../stencil-public-runtime';
import { ModalSize } from './modal-interface';
import { AriaAttributeName, MutableAriaAttribute } from "../../utils/mutable-aria-attribute";
/**
 * The modal component (also named dialog or popup) is an interface element that appears on top of the page content.
 * Use it to show a message, a confirmation dialog, or any other content like forms.
 *
 * ## Accessibility guidelines ðŸ’¡
 * > - Modal element has `role="dialog"` and `aria-modal="true"`
 * > - Keyboard navigation is trapped inside the modal
 * > - It is mandatory to set the `modal-trigger-controls-id` to the id of the element that opens the dialog, in order
 * > to focus it upon dialog dismissal.
 * > - On modal opening, the default behaviour is to focus the first focusable element. If you want to change the initial
 * > behaviour, you have to use `modal-element-id-to-focus-on-opening` attribute to set the id of the inner modal element you
 * > want to focus. You will see a story as example below
 * > - The modal can be closed at any time by pressing the Escape key.
 * >
 * > - More info : https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/
 *
 * @cssprop --wcs-modal-max-height - Max height of the main container
 * @cssprop --wcs-modal-overflow-y - Overflow-y of the content
 *
 * @cssprop --wcs-modal-backdrop-color - Backdrop color of the modal
 * @cssprop --wcs-modal-max-height - Max height of the main container
 * @cssprop --wcs-modal-background-color - Background color of the modal
 * @cssprop --wcs-modal-border-radius - Border radius of the modal
 * @cssprop --wcs-modal-padding - Padding inside the modal
 * @cssprop --wcs-modal-border-width - Border width of the modal
 * @cssprop --wcs-modal-border-color - Border color of the modal
 * @cssprop --wcs-modal-title-margin-bottom - Margin bottom of the modal title
 * @cssprop --wcs-modal-title-font-size - Font size of the modal title
 * @cssprop --wcs-modal-title-font-weight - Font weight of the modal title
 * @cssprop --wcs-modal-title-line-height - Line height of the modal title
 * @cssprop --wcs-modal-actions-margin-top - Margin top of the modal actions
 * @cssprop --wcs-modal-width-s - Width of the modal for size small
 * @cssprop --wcs-modal-width-m - Width of the modal for size medium
 * @cssprop --wcs-modal-width-l - Width of the modal for size large
 * @cssprop --wcs-modal-width-xl - Width of the modal for size extra large
 *
 * @slot <no-name> Main container slot
 * @slot header Header container slot (for title)
 * @slot actions Actions container slot (for buttons)
 */
export declare class Modal implements ComponentInterface, MutableAriaAttribute {
    private el;
    private nativeDivDialog;
    private inheritedAttributes;
    /**
     * Specifies whether the component should display a backdrop on the entire page
     */
    withoutBackdrop: boolean;
    /**
     * Displays the modal
     */
    show: boolean;
    /**
     * Triggered when the user leaves the dialog with the closing button.
     */
    wcsDialogClosed: EventEmitter<void>;
    /**
     * Specifies whether the component should display a close button.
     * if false, it won't close the modal when the escape key is pressed.
     */
    showCloseButton: boolean;
    /**
     * Specifies the aria-label present on the close button when the modal is opened.
     * Only use when `showCloseButton` is `true`.
     */
    closeButtonAriaLabel: string;
    /**
     * There are multiple sizes for modals. The default size is medium (m), however other sizes are available. Select the
     * size best suited for the content and screen size displaying the modal. Remember to test responsiveness.
     */
    size: ModalSize;
    /**
     * Specifies whether the component should hide the actions slot or not
     */
    hideActions: boolean;
    /**
     * Specifies which element id controls the modal
     * @private
     */
    modalTriggerControlsId: string;
    /**
     * The ID of the element to automatically focus when the modal opens.
     *
     * If this property is not set and `disableAutoFocus` is false, the modal will
     * automatically focus the first focusable element within its content.
     * This follows accessibility best practices by ensuring keyboard navigation
     * starts from a logical point when the modal opens.
     *
     * @example
     * <wcs-modal initial-focus-element="cancel-button"></wcs-modal>
     */
    initialFocusElementId?: string;
    /**
     * Disables automatic focus behavior when the modal opens.
     *
     * When set to true, the modal will not automatically focus any element upon opening.
     * Use this property with caution, as managing focus is important for accessibility.
     * Consider providing an alternative focus management strategy if disabling the default behavior.
     */
    disableAutoFocus: boolean;
    /**
     * Give an unique id
     * @private
     */
    private modalId;
    private firstFocusableElement;
    private lastFocusableElement;
    /**
     * This attribute is used to determine whether the show attribute has changed since the last rendering.
     * This allows us to call the focus method on the first element of the modal when the show attribute changes to true.
     * This call is made in the componentDidRender method
     * @private
     */
    private showAttributeChangedMarker;
    /**
     * This attribute is used to determine if the modal has been closed for the first time since its last activation.
     * It is set to 'true' when the modal is first closed, and will be reset to 'false' when the modal is shown again.
     * This state is important for accessibility reasons in order to focus the modal trigger element (like the button
     * which controls the modal)
     *
     * @private
     */
    private hasBeenClosedBefore;
    componentWillLoad(): Promise<void> | void;
    componentDidLoad(): void;
    componentDidRender(): void;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    onShowChange(): void;
    private updateFocusableElements;
    private close;
    onKeyDown(event: KeyboardEvent): void;
    private onCloseButtonClick;
    private handleSlotContentChange;
    render(): any;
}
