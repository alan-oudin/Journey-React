import { ComponentInterface } from '../../stencil-public-runtime';
/**
 * Form field component wraps the native input element and add some more functionality on top of it.
 *
 * You can use the `wcs-form-field` to wrap any of these components :
 * - `wcs-input`
 * - `wcs-textarea`
 * - `wcs-radio-group`
 * - `wcs-switch`
 * - `wcs-checkbox`
 * - `wcs-native-select`
 * - `wcs-select`
 * - `wcs-counter`
 *
 * For non-supported slotted component, you can use the `required` attribute on the wrapped component to tell the
 * form-field that it is required. It will add a red star after the label of the form field.
 *
 * ## Accessibility guidelines ðŸ’¡
 * - Each form control should be identified with a unique `wcs-label`
 * - Don't forget to add form validation to make sure the data is correctly formatted
 * - If the `wcs-label` is required, the form control must have the `required` HTML attribute and vice-versa (this is normally automatically set)
 * - The form should not be submittable if at least one required form control is not filled
 * - Hints are optional and should only be used to add extra information
 * - Additional aria attributes put on `<wcs-form-field>` won't inherit onto the native component : you must use the `setAriaAttribute` method.
 *
 * @slot label - Automatically filled when a `wcs-label` is provided
 * @slot <no-name> - The main slot containing the wrapped component
 * @slot prefix - (Optional) Display a component as prefix. See "Prefix Suffix Group" story for more info.
 * @slot suffix - (Optional) Display a component as suffix. See "Prefix Suffix Group" story for more info.
 * @slot error - Automatically filled when a `wcs-error` is provided
 * @slot messages - Automatically filled when a `wcs-hint` is provided
 *
 * @cssprop --wcs-form-field-gap - Defines the spacing between the label, input control, and hint messages.
 * @cssprop --wcs-form-field-prefix-suffix-border-radius - Sets the border radius for both prefix and suffix elements.
 *
 * @cssprop --wcs-form-field-prefix-background-color-default - Background color default for prefix elements
 * @cssprop --wcs-form-field-prefix-background-color-disabled - Background color for prefix elements when disabled
 * @cssprop --wcs-form-field-prefix-background-color-hover - Background color for prefix elements when hovered
 * @cssprop --wcs-form-field-prefix-border-color-default - Defines the default border color for prefix
 * @cssprop --wcs-form-field-prefix-border-color-focus - Sets the border color for prefix elements when focused.
 * @cssprop --wcs-form-field-prefix-border-color-disabled - Determines the border color for prefix elements when disabled.
 *
 * @cssprop --wcs-form-field-prefix-icon-color - Specifies the color of icons within prefix elements.
 * @cssprop --wcs-form-field-prefix-value-color - Sets the color of values within prefix elements.
 * @cssprop --wcs-form-field-prefix-placeholder-color - Defines the placeholder text color within prefix elements.
 * @cssprop --wcs-form-field-prefix-color-disabled - Determines the text color for prefix elements when disabled.
 */
export declare class FormField implements ComponentInterface {
    private el;
    /**
     * Specifies whether the form field is in an error state. Displays the field border in red and the message contained in the wcs-error component
     */
    isError: boolean;
    private hasPrefix;
    private hasSuffix;
    private spiedElement;
    private observer;
    componentWillLoad(): void;
    componentDidLoad(): void;
    private isErrorChange;
    private updateErrorStateOnInput;
    /**
     * This function return true if the form field contains an element with tagName matches a value of the types param
     * @param types
     * @private
     */
    private spiedElementIsOfType;
    private addRequiredMarkerToLabel;
    private initSpiedElement;
    private updateAriaAttributes;
    private get label();
    private get description();
    private get error();
    private updateLabelRequiredFlag;
    disconnectedCallback(): void;
    render(): any;
    private onFormInputSlotChange;
}
