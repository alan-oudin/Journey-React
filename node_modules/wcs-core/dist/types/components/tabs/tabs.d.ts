import { ComponentInterface, EventEmitter } from '../../stencil-public-runtime';
import { WcsTabsAlignment, WcsTabChangeEvent } from './tabs-interface';
import { AriaAttributeName, MutableAriaAttribute } from "../../utils/mutable-aria-attribute";
/**
 * Tabs component to switch between tab content. Use in conjunction with `wcs-tab`.
 *
 * ## Accessibility guidelines ðŸ’¡
 * > - Mobile display should be used for narrower screens (automatically set by default).
 * > - The component respects the W3C [tab pattern](https://www.w3.org/WAI/ARIA/apg/patterns/tabs/)
 *
 * @cssprop --wcs-tabs-indicator-height - Height of the tabs indicator
 * @cssprop --wcs-tabs-indicator-background-color - Background color of the tabs indicator
 * @cssprop --wcs-tabs-indicator-border-radius - Border radius of the tabs indicator
 * @cssprop --wcs-tabs-color-default - Text color of the tabs
 * @cssprop --wcs-tabs-color-hover - Text color of the tabs when hovered
 * @cssprop --wcs-tabs-color-press - Text color of the tabs when pressed
 * @cssprop --wcs-tabs-color-focus - Text color of the tabs when focused
 * @cssprop --wcs-tabs-color-selected - Text color of the tabs when selected
 * @cssprop --wcs-tabs-background-color-focus - Background color of the tabs when focused
 * @cssprop --wcs-tabs-background-color-hover - Background color of the tabs when hovered
 * @cssprop --wcs-tabs-background-color-press - Background color of the tabs when pressed
 * @cssprop --wcs-tabs-border-radius - Border radius of the tabs
 * @cssprop --wcs-tabs-border-color-focus - Outline color on a focused tab
 * @cssprop --wcs-tabs-font-weight-default - Font weight of the tabs
 * @cssprop --wcs-tabs-font-weight-selected - Font weight of the tabs when selected
 * @cssprop --wcs-tabs-padding-top - Padding top of the tabs
 * @cssprop --wcs-tabs-padding-right - Padding right of the tabs
 * @cssprop --wcs-tabs-padding-bottom - Padding bottom of the tabs
 * @cssprop --wcs-tabs-padding-left - Padding left of the tabs
 * @cssprop --wcs-tabs-headers-border-bottom - Border bottom (gutter) below the tabs
 * @cssprop --wcs-tabs-transition-duration - Transition duration of the tabs
 * @cssprop --wcs-tabs-mobile-breakpoint - Breakpoint for mobile display (default: 575px)
 * @cssprop --wcs-tabs-mobile-overlay-border-width - Border width of the mobile overlay
 * @cssprop --wcs-tabs-mobile-overlay-border-color - Border color of the mobile overlay
 * @cssprop --wcs-tabs-mobile-overlay-background-color - Background color of the mobile overlay
 * @cssprop --wcs-tabs-mobile-overlay-padding - Padding of the mobile overlay
 * @cssprop --wcs-tabs-mobile-overlay-border-radius - Border radius of the mobile overlay
 * @cssprop --wcs-tabs-mobile-gap - Gap between the mobile tabs in the overlay
 * @cssprop --wcs-tabs-mobile-padding - Padding of the mobile tabs in the overlay
 * @cssprop --wcs-tabs-mobile-height - Height of the mobile tabs in the overlay
 * @cssprop --wcs-tabs-mobile-font-weight-default - Default weight of the mobile tabs in the overlay
 * @cssprop --wcs-tabs-mobile-font-weight-active - Active font weight of the mobile tabs in the overlay
 * @cssprop --wcs-tabs-mobile-font-size - Font size of the mobile tabs in the overlay
 * @cssprop --wcs-tabs-mobile-color - Text color of the mobile tabs in the overlay
 * @cssprop --wcs-tabs-mobile-background-color-default - Default background color of the mobile tabs in the overlay
 * @cssprop --wcs-tabs-mobile-background-color-focus - Focused background color of the mobile tabs in the overlay
 * @cssprop --wcs-tabs-mobile-background-color-hover - Hovered background color of the mobile tabs in the overlay
 * @cssprop --wcs-tabs-mobile-background-color-press - Pressed background color of the mobile tabs in the overlay
 * @cssprop --wcs-tabs-mobile-border-radius - Border radius of the mobile tabs in the overlay
 */
export declare class Tabs implements ComponentInterface, MutableAriaAttribute {
    private el;
    private nativeTablist;
    private inheritedAttributes;
    /**
     * Tab headers alignment.
     */
    align: WcsTabsAlignment;
    /**
     * Current selected tab index.
     * Starts at 0.
     */
    selectedIndex: number;
    selectedKey: any;
    /**
     * Whether to skip rendering the tabpanel with the content of the selected tab. Use this prop if you plan to
     * separately render the tab content.
     */
    headersOnly: boolean;
    /** Determines if tabs header should have a border at the bottom */
    gutter: boolean;
    /**
     * Description is used to provide aria-label for the tabs container which has `role="tablist"`.
     */
    description: string;
    /**
     * Mobile display : This div is shown on the user interface when the tabs are expanded
     * @private
     */
    private popoverDiv;
    private popper;
    private mobileOverlayExpanded;
    /**
     * If true, the tabs will be displayed as a dropdown list containing the tabs. Useful for narrower screens.
     */
    private mobile;
    /**
     * Mobile display: the selected tab semantically become a button that opens an overlay
     */
    private mobileButton;
    /**
     * Observe the screen resize to switch between mobile and desktop mode
     */
    private resizeObserver;
    /**
     *
     * Emitted when the selected tab change.
     */
    tabChange: EventEmitter<WcsTabChangeEvent>;
    private headers;
    private currentActiveTabIndex;
    private tabsId;
    selectedIndexChanged(newValue: number): void;
    selectedTabkeyChanged(newValue: any): void;
    onMobileChange(newValue: boolean): void;
    private emitActiveTabChange;
    private updateCurrentActiveIndexByTabKey;
    onTabLoaded(): void;
    onWindowClickEvent(event: MouseEvent): void;
    /**
     * Init resize observer for mobile
     */
    private tabsDidLoadWithResizeObserver;
    private initMobileOverlay;
    componentDidLoad(): void;
    componentDidRender(): void;
    private putTabsInCorrectDivIfTheyAreNot;
    handleKeyDown(ev: KeyboardEvent, tabIndex: number): void;
    handleKeyDownMobile(ev: KeyboardEvent, tabIndex: number): void;
    private refreshHeaders;
    private get tabs();
    private selectTabAndEmitChangeEvent;
    componentWillUpdate(): void;
    componentWillLoad(): Promise<void> | void;
    disconnectedCallback(): void;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    private updateTabVisibility;
    private hideAllTabsContent;
    onMobileButtonClick(): void;
    onMobileButtonKeyDown(ev: KeyboardEvent): void;
    mobileLayout(): any[];
    desktopLayout(): any[];
    render(): any;
    /**
     * Observe when a new tab panel is added to the slot to let's handle accessibility properties for tabs panel:
     * - id: to let header tab refers it proper panel
     * - aria-label: take the same name as it's referenced header name
     *
     * @private
     */
    private onTabsSlotChange;
}
