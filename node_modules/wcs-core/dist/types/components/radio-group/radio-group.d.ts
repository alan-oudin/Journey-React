import { ComponentInterface, EventEmitter } from '../../stencil-public-runtime';
import { RadioGroupChangeEventDetail, RadioGroupMode } from './radio-group-interface';
import { RadioChosedEvent } from '../radio/radio-interface';
import { AriaAttributeName, MutableAriaAttribute } from '../../utils/mutable-aria-attribute';
/**
 * @cssprop --wcs-radio-group-gap - Gap between each radio (checkmark + label) in horizontal mode
 *
 *
 * @cssprop --wcs-radio-group-option-background-color - Background color of the radio group option
 *
 * @cssprop --wcs-radio-group-option-height - Height of the radio group option
 * @cssprop --wcs-radio-group-option-padding - Padding of the radio group option
 *
 * @cssprop --wcs-radio-group-option-border-radius - Border radius of the radio group option
 *
 * @cssprop --wcs-radio-group-option-gap - Gap between each radio option
 */
export declare class RadioGroup implements ComponentInterface, MutableAriaAttribute {
    private el;
    /**
     * The value of the radio-group. Automatically reflects which radio button is selected.
     */
    value: any | any[] | undefined | null;
    /**
     * The name of the control to be set on all radio button children
     */
    name: any;
    /**
     * The display mode of the control to be set on all radio button children
     */
    mode: RadioGroupMode;
    /** Emitted when the value has changed. */
    wcsChange: EventEmitter<RadioGroupChangeEventDetail>;
    onValueChangeHandler(value: any | undefined): void;
    setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined): Promise<void>;
    componentDidLoad(): void;
    onSlotChange(): void;
    updateAllRadioState(): void;
    updateAllRadioModeAndName(): void;
    updateRadioTabIndex(value: any | undefined): void;
    private getSlottedRadios;
    private getSlottedRadiosNotDisabled;
    handleRadioClick(event: CustomEvent<RadioChosedEvent>): void;
    handleKeyDown(ev: KeyboardEvent): Promise<void>;
    render(): any;
}
