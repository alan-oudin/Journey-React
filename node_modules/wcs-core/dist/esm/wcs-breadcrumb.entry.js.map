{"file":"wcs-breadcrumb.entry.js","mappings":"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","names":[],"sources":["src/components/breadcrumb/breadcrumb.scss?tag=wcs-breadcrumb&encapsulation=shadow","src/components/breadcrumb/breadcrumb.tsx"],"sourcesContent":[":host {\n    --wcs-breadcrumb-icon-color: var(--wcs-semantic-color-foreground-brand);\n    --wcs-breadcrumb-icon-font-size: 0.5rem;\n    --wcs-breadcrumb-gap: var(--wcs-semantic-spacing-base);\n}\n\nnav.wcs-breadcrumb-container {\n    slot[name=\"hidden-items\"] {\n        display: none;\n    }\n    &.show-hidden-items {\n        slot[name=\"hidden-items\"] {\n            display: contents;\n        }\n    }\n\n    div[role=\"list\"] {\n        display: flex;\n        flex-wrap: wrap;\n        align-items: center;\n        margin: 0;\n        padding: 0;\n        list-style: none;\n\n        ::slotted(wcs-breadcrumb-item) {\n            margin-right: var(--wcs-breadcrumb-gap);\n        }\n\n        ::slotted(wcs-breadcrumb-item:last-child) {\n            margin-right: 0;\n        }\n\n        .item-not-slotted {\n            display: flex;\n            align-items: center;\n            margin-right: var(--wcs-breadcrumb-gap);\n\n            wcs-button[size=\"s\"] {\n                --wcs-button-min-width: 24px;\n                --wcs-button-height: 20px;\n                --wcs-button-border-radius: 2px;\n                transform: translateY(2px);\n            }\n\n            .item-icon {\n                margin-left: calc(var(--wcs-breadcrumb-gap) - 1px);\n                font-family: \"icons\";\n                font-size: var(--wcs-breadcrumb-icon-font-size);\n                color: var(--wcs-breadcrumb-icon-color);\n                transform: translateY(1px);\n            }\n        }\n    }\n}\n","import {\n    Component,\n    ComponentInterface,\n    Element, forceUpdate,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n    Watch\n} from '@stencil/core';\n\nimport { inheritAttributes, inheritAriaAttributes, setOrRemoveAttribute } from '../../utils/helpers';\nimport { AriaAttributeName, MutableAriaAttribute } from '../../utils/mutable-aria-attribute';\nimport {\n    ICONS_FONT_CHEVRON_UNICODE,\n    NAV_ARIA_LABEL_DEFAULT,\n    EXPAND_BTN_ARIA_LABEL_DEFAULT\n} from './breadcrumb-constants';\n\nconst BREADCRUMB_INHERITED_ATTRS = [];\n\n/**\n * A breadcrumb trail consists of a list of links to the parent pages of the current page in hierarchical order.  \n * It helps users find their place within a website or web application. Breadcrumbs are often placed horizontally before a page's main content.\n *\n * ## Accessibility guidelines ðŸ’¡\n * > - If the last item is a link to the current page, you must set the `aria-current` attribute to `page` on `wcs-breadcrumb-item`.\n * > - If the element representing the current page is not a link, `aria-current` is optional.\n * > - You can set the attribute `aria-label` on `wcs-breadcrumb`, it will be passed to the native `nav` element located inside its shadow DOM. \n * >   You can find the `aria-label` default value in the table below. If your application is in English, you can set it to `Breadcrumb`.\n * > - You can do the same thing for the `aria-label` of the expand button when the breadcrumb is collapsed. You can find its default value\n * >   in the table below too.  \n * > - If you need to **dynamically change the `aria-label` attribute of `wcs-breadcrumb` after the first render**, you can use the \n * >   `setAriaAttribute` JS method (example below). For the expand button however, you can update the prop `ariaLabelExpandButton`.  \n * >   Note: we're working on updating the component automatically when attributes change. \n *\n * > ```javascript\n * > const wcsButton = document.querySelector('wcs-button');\n * > await wcsButton.setAriaAttribute('aria-label', 'new label');\n * > ```\n * \n * @cssprop --wcs-breadcrumb-icon-color - Icon color\n * @cssprop --wcs-breadcrumb-icon-font-size - Icon font size\n * @cssprop --wcs-breadcrumb-gap - Gap between breadcrumb items\n */\n@Component({\n    tag: 'wcs-breadcrumb',\n    styleUrl: 'breadcrumb.scss',\n    shadow: true,\n})\nexport class Breadcrumb implements ComponentInterface, MutableAriaAttribute {\n    @Element() private el: HTMLElement;\n    private navEl?: HTMLElement;\n    private expandBtnEl: HTMLWcsButtonElement;\n\n    private inheritedAttributes: { [k: string]: any } = {};\n\n    /**\n     * If the number of breadcrumb items exceeds this maximum,\n     * the breadcrumb will collapse and show an expand button.  \n     * If this prop is `undefined`, breadcrumb items will never collapse.\n     */\n    @Prop() maxItems?: number;\n    /**\n     * The number of breadcrumb items to show before the expand button.\n     * If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,\n     * the breadcrumb will not be collapsed.\n     */\n    @Prop() itemsBeforeCollapse: number = 1;\n    /**\n     * The number of breadcrumb items to show after the expand button.\n     * If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,\n     * the breadcrumb will not be collapsed.\n     */\n    @Prop() itemsAfterCollapse: number = 2;\n    /** Set `aria-label` for the expand button when the breadcrumb is collapsed. */\n    @Prop() ariaLabelExpandButton?: string = EXPAND_BTN_ARIA_LABEL_DEFAULT;\n\n    /**\n     * Show breadcrumb items that are inside the hidden-items slot.\n     */\n    @State() private showHiddenItems: boolean = false;\n\n    @Watch('maxItems')\n    @Watch('itemsBeforeCollapse')\n    @Watch('itemsAfterCollapse')\n    handleCollapsePropsChange() {\n        this.updateCollapsedViewMode();\n    }\n\n    @Watch('ariaLabelExpandButton')\n    handleAriaLabelExpandBtnChange(newValue: string) {\n        this.expandBtnEl?.setAriaAttribute('aria-label', newValue);\n    }\n\n    componentWillLoad(): Promise<void> | void {\n        this.inheritedAttributes = {\n            ...inheritAriaAttributes(this.el),\n            ...inheritAttributes(this.el, BREADCRUMB_INHERITED_ATTRS),\n        };\n        this.updateCollapsedViewMode();\n    }\n\n    componentDidLoad(): void {\n        this.expandBtnEl?.setAriaAttribute('aria-label', this.ariaLabelExpandButton);\n    }\n\n    @Method()\n    async setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined) {\n        setOrRemoveAttribute(this.navEl, attr, value);\n    }\n\n    private getBreadcrumbItems(): HTMLWcsBreadcrumbItemElement[] {\n        return Array.from(this.el.querySelectorAll('wcs-breadcrumb-item'));\n    }\n\n    private shouldCollapseItems(): boolean {\n        return (\n            !!this.maxItems &&\n            this.getBreadcrumbItems().length > this.maxItems &&\n            this.itemsBeforeCollapse + this.itemsAfterCollapse <= this.maxItems\n        );\n    }\n\n    private updateCollapsedViewMode(): void {\n        if (this.shouldCollapseItems()) {\n            this.assignSlotNamesForCollapsedViewMode();\n        } else {\n            this.assignSlotNamesForNonCollapsedViewMode();\n        }\n    }\n\n    /**\n     * Setting slot names on breadcrumb items allows to leverage JSX in the render method.\n     */\n    private assignSlotNamesForCollapsedViewMode(): void {\n        const breadcrumbItems = this.getBreadcrumbItems();\n        const itemBeforeExpandBtnIndex = this.itemsBeforeCollapse - 1;\n        const itemAfterExpandBtnIndex = breadcrumbItems.length - this.itemsAfterCollapse;\n\n        breadcrumbItems.forEach((breadcrumbItem, index) => {\n            if (index <= itemBeforeExpandBtnIndex) {\n                breadcrumbItem.slot = 'items-before-expand-btn';\n                breadcrumbItem.last = false;\n            } else if (index > itemBeforeExpandBtnIndex && index < itemAfterExpandBtnIndex) {\n                breadcrumbItem.slot = 'hidden-items';\n                breadcrumbItem.last = false;\n            } else {\n                breadcrumbItem.slot = 'items-after-expand-btn';\n                breadcrumbItem.last = index === breadcrumbItems.length - 1;\n            }\n        });\n    }\n    \n    private assignSlotNamesForNonCollapsedViewMode(): void {\n        const breadcrumbItems = this.getBreadcrumbItems();\n        breadcrumbItems.forEach((breadcrumbItem, index) => {\n            breadcrumbItem.slot = 'non-collapsed';\n            breadcrumbItem.last = index === breadcrumbItems.length - 1;\n        });\n    }\n\n    private handleSlotChange(): void {\n        this.updateCollapsedViewMode();\n        this.showHiddenItems = false;\n        forceUpdate(this);\n    }\n\n    private handleOnExpandBtnClick(): void {\n        // We leave the breadcrumb items in the hidden-items slot, without passing them to\n        // the non-collapsed slot, so that we know which items to hide again later if needed.\n        // For future implementations, the expand button could show or hide hidden items on click,\n        // with a wcs-dropdown for example.\n        this.showHiddenItems = true;\n        // We wait for the first hidden item to be visible in the DOM again\n        // to be able to focus it.\n        requestAnimationFrame(() => this.setFocusToFirstHiddenItem());\n    }\n\n    /**\n     * Avoid losing focus after clicking the expand button.\n     * We need to give focus back to the first breadcrumb item link that was hidden before.\n     */\n    private setFocusToFirstHiddenItem(): void {\n        const breadcrumbItems = this.getBreadcrumbItems();\n        const firstHiddenItemIndex = this.itemsBeforeCollapse;\n        const firstHiddenItem = breadcrumbItems[firstHiddenItemIndex];\n        const firstHiddenItemSlot =\n            firstHiddenItem.shadowRoot.querySelector('slot') as HTMLSlotElement;\n        const breadcrumbItemLinkToFocus =\n            firstHiddenItemSlot.assignedElements()[0] as HTMLAnchorElement;\n        breadcrumbItemLinkToFocus?.focus();\n    }\n\n    private renderExpandAllButton(): JSX.Element {\n        const expandBtnIsLastItem = this.itemsAfterCollapse === 0;\n        return (\n            <div role=\"listitem\" class=\"item-not-slotted\">\n                <wcs-button\n                    mode=\"clear\"\n                    shape=\"square\"\n                    size=\"s\"\n                    onClick={this.handleOnExpandBtnClick.bind(this)}\n                    ref={(el) => this.expandBtnEl = el}\n                >\n                    <wcs-mat-icon icon=\"more_horiz\" />\n                </wcs-button>\n                {!expandBtnIsLastItem && (\n                    <span class=\"item-icon\" aria-hidden=\"true\">\n                        {ICONS_FONT_CHEVRON_UNICODE}\n                    </span>\n                )}\n            </div>\n        );\n    }\n\n    render() {\n        const showExpandBtn = this.shouldCollapseItems() && !this.showHiddenItems;\n        return (\n            <Host>\n                <nav\n                    class={`wcs-breadcrumb-container${this.showHiddenItems ? ' show-hidden-items' : ''}`}\n                    aria-label={NAV_ARIA_LABEL_DEFAULT}\n                    {...this.inheritedAttributes}\n                    ref={(el) => this.navEl = el}\n                >\n                    {/*\n                    * We use aria roles here instead of an <ol> tag\n                    * so that the list can be browsed correctly on Firefox with screen readers.\n                    * There seems to be an issue with Firefox and the Shadow DOM.\n                    */}\n                    <div role=\"list\">\n                        {/* Only the main slot shoud be used by consumers. */}\n                        <slot onSlotchange={this.handleSlotChange.bind(this)} />\n                        {/* Non collapsed view mode */}\n                        <slot name=\"non-collapsed\"></slot>\n                        {/* Collapsed view mode */}\n                        <slot name=\"items-before-expand-btn\" />\n                        <slot name=\"hidden-items\" />\n                        {showExpandBtn && this.renderExpandAllButton()}\n                        <slot name=\"items-after-expand-btn\" />\n                    </div>\n                </nav>\n            </Host>\n        );\n    }\n}\n"],"version":3}