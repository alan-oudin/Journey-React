import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-d9de61ce.js';

const alertCss = "@keyframes progress-bar-slide{0%{width:0}100%{width:100%}}:host{--wcs-alert-background-color:var(--wcs-semantic-color-background-surface-accent-lighter);--wcs-alert-icon-background-color:var(--wcs-semantic-color-background-surface-brand-default);--wcs-alert-title-color:var(--wcs-semantic-color-text-primary);--wcs-alert-subtitle-color:var(--wcs-semantic-color-text-secondary);--wcs-alert-dismiss-button-color:var(--wcs-semantic-color-foreground-inverse);--wcs-alert-title-font-weight:var(--wcs-semantic-font-weight-heavy);--wcs-alert-subtitle-font-weight:var(--wcs-semantic-font-weight-roman);--wcs-alert-title-font-size:var(--wcs-semantic-font-size-base);--wcs-alert-subtitle-font-size:var(--wcs-semantic-font-size-caption-2);--wcs-alert-border-width:var(--wcs-semantic-border-width-default);--wcs-alert-border-color:var(--wcs-semantic-color-border-primary);--wcs-alert-border-radius:var(--wcs-semantic-border-radius-base);--wcs-alert-padding:var(--wcs-semantic-spacing-base-150);--wcs-alert-gap:var(--wcs-semantic-spacing-base-150);--wcs-alert-min-width:100%;--wcs-alert-progress-bar-height:0.25rem;--wcs-alert-progress-bar-background-color:var(--wcs-alert-icon-background-color);--wcs-alert-internal-progress-bar-animation-duration:5s;box-sizing:border-box;background-color:var(--wcs-alert-background-color);border-radius:var(--wcs-alert-border-radius);padding:var(--wcs-alert-padding);width:100%;min-width:var(--wcs-alert-min-width);position:relative;display:flex;align-items:center;justify-content:space-between;gap:var(--wcs-alert-gap);border:solid var(--wcs-alert-border-width) var(--wcs-alert-border-color);overflow:hidden}:host .content{display:flex;flex-direction:column}:host .announcement-icon{color:var(--wcs-alert-icon-background-color)}:host ::slotted([slot=title]){color:var(--wcs-alert-title-color);font-size:var(--wcs-alert-title-font-size);font-weight:var(--wcs-alert-title-font-weight)}:host ::slotted([slot=subtitle]){font-weight:var(--wcs-alert-subtitle-font-weight);color:var(--wcs-alert-subtitle-color);font-size:var(--wcs-alert-subtitle-font-size)}:host .progress-bar{bottom:0;left:0;width:100%;height:var(--wcs-alert-progress-bar-height);position:absolute}:host .progress-bar-track{background-color:var(--wcs-alert-progress-bar-background-color);height:100%;animation:progress-bar-slide var(--wcs-alert-internal-progress-bar-animation-duration) linear;border-bottom-left-radius:var(--wcs-alert-border-radius);border-bottom-right-radius:var(--wcs-alert-border-radius);border-top-right-radius:var(--wcs-alert-border-radius)}:host([intent=success]){--wcs-alert-border-color:var(--wcs-semantic-color-border-success);--wcs-alert-background-color:var(--wcs-semantic-color-background-surface-success-lighter);--wcs-alert-icon-background-color:var(--wcs-semantic-color-background-surface-success-default)}:host([intent=information]){--wcs-alert-border-color:var(--wcs-semantic-color-border-information);--wcs-alert-background-color:var(--wcs-semantic-color-background-surface-information-lighter);--wcs-alert-icon-background-color:var(--wcs-semantic-color-background-surface-information-default)}:host([intent=warning]){--wcs-alert-border-color:var(--wcs-semantic-color-border-warning);--wcs-alert-background-color:var(--wcs-semantic-color-background-surface-warning-lighter);--wcs-alert-icon-background-color:var(--wcs-semantic-color-background-surface-warning-default)}:host([intent=error]){--wcs-alert-border-color:var(--wcs-semantic-color-border-critical);--wcs-alert-background-color:var(--wcs-semantic-color-background-surface-critical-lightest);--wcs-alert-icon-background-color:var(--wcs-semantic-color-background-surface-critical-default)}:host>*{box-sizing:border-box}.icon-content-container{display:flex;gap:var(--wcs-alert-gap);align-items:center}.close-button wcs-mat-icon{color:var(--wcs-alert-dismiss-button-color)}.hidden{display:none}";
const WcsAlertStyle0 = alertCss;

const Alert = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.wcsAlertDismiss = createEvent(this, "wcsAlertDismiss", 7);
        /** Only active if timeout > 0, becomes true when the alert reaches its maximum display time */
        this.isTimedOut = false;
        /** Indicates if the mouse cursor is hovering over the alert */
        this.isMouseHover = false;
        /**
         * ID of the setTimeout used to manage the alert's lifetime
         * https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout#notes
         */
        this.timeoutId = undefined;
        this.show = true;
        this.intent = 'success';
        this.timeout = 5000;
        this.showProgressBar = false;
    }
    mouseOverHandler() {
        this.mouseHover(true);
    }
    mouseOutHandler() {
        this.mouseHover(false);
    }
    /**
     * Handles the mouse hover state of the alert
     * @param hover - true if the mouse is hovering over the alert, false otherwise
     */
    mouseHover(hover) {
        this.isMouseHover = hover;
        // If the timeout has passed (i.e. the user had the mouse on the component when it expired), we close the alert.
        if (this.isTimedOut && !this.isMouseHover) {
            this.close();
        }
    }
    async componentWillLoad() {
        await this.showAlertAndRunTimeout();
    }
    async componentDidLoad() {
        var _a;
        /*
        Because icon serves also to announce the state of the alert based on the type. We set aria-label on the icon based
        on the type
         */
        (_a = this.annoucementIconHtmlElement) === null || _a === void 0 ? void 0 : _a.setAriaAttribute('aria-hidden', 'false');
        if (this.showProgressBar) {
            this.el.style.setProperty('--wcs-alert-internal-progress-bar-animation-duration', this.timeout / 1000 + 's');
        }
        else {
            this.el.style.setProperty('--wcs-alert-internal-progress-bar-animation-duration', '0s');
        }
    }
    async showAlertAndRunTimeout() {
        if (this.timeout === 0)
            return;
        this.show = true;
        this.timeoutId = setTimeout(() => {
            // If the user has the mouse over the alert, we only indicate that the timemout has expired, and the method that handles the mousehover event will close it
            if (!this.isMouseHover) {
                this.close();
            }
            this.isTimedOut = true;
        }, this.timeout);
    }
    onCloseButtonClick(_) {
        this.close();
    }
    close() {
        this.show = false;
        this.wcsAlertDismiss.emit();
    }
    getMaterialIcon() {
        switch (this.intent) {
            case "success":
                return 'check_circle';
            case "information":
                return 'info';
            case "error":
                return 'error';
            case "warning":
                return 'warning';
        }
    }
    getAriaLabel() {
        switch (this.intent) {
            case "success":
                return 'SuccÃ¨s';
            case "information":
                return 'Information';
            case "error":
                return 'Erreur';
            case "warning":
                return 'Attention';
        }
    }
    disconnectedCallback() {
        /*
         https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout#notes
         (Passing an invalid ID to clearTimeout() silently does nothing; no exception is thrown.)
         */
        clearTimeout(this.timeoutId);
    }
    render() {
        return (h(Host, { key: '82c9f5879eae7adef41c921ef34b2b9d891c0d6b' }, h("div", { key: 'b46424dfb6b620b62767b6bb8048827f83d116a7', class: "icon-content-container" }, h("wcs-mat-icon", { key: 'ff3a0bc91a73e275936bbe8f77c904f397296551', class: "announcement-icon", ref: (el) => this.annoucementIconHtmlElement = el, icon: this.getMaterialIcon(), "aria-label": this.getAriaLabel(), role: "img", "aria-hidden": false }), h("div", { key: 'ea866940416ddaf5eaf73cec83f30c71b01c41d8', class: "content" }, h("slot", { key: 'd14c321ebdb78b646bb4fc19e613dbd2cc61ed31', name: "title" }), h("slot", { key: '569d6556ea823f82e1d6164ac20361e27c85b592', name: "subtitle" }))), h("wcs-button", { key: 'f13afc31116b7b6fe04e0186128d0288725ace98', shape: "round", size: "s", mode: "clear", class: "close-button wcs-dark", "aria-label": "Fermer cette notification", onClick: ($event) => this.onCloseButtonClick($event) }, h("wcs-mat-icon", { key: '02557c896159ec1a7fdab853a07f7c79c17dd5d7', icon: "close" })), h("div", { key: '9e90e95009da575ca693e5ba4e92b3916ad4ee6f', class: 'progress-bar' + (!this.showProgressBar ? ' hidden' : '') }, h("div", { key: 'c8858551592bb0b1622e2ee19c67a662f31ce068', class: "progress-bar-track" }))));
    }
    get el() { return getElement(this); }
};
Alert.style = WcsAlertStyle0;

export { Alert as wcs_alert };

//# sourceMappingURL=wcs-alert.entry.js.map