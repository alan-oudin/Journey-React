{"file":"wcs-dropdown-item.entry.js","mappings":";;;AAAA,MAAM,eAAe,GAAG,kxEAAkxE,CAAC;AAC3yE,8BAAe,eAAe;;MCyBjB,YAAY;;;;;IAUrB,SAAS,CAAC,CAAa;QACnB,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;KACpC;IAGD,SAAS,CAAC,GAAkB;QACxB,IAAI,UAAU,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;YACpC,GAAG,CAAC,cAAc,EAAE,CAAC;YACrB,GAAG,CAAC,wBAAwB,EAAE,CAAC;YAC/B,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;SACpC;KACJ;IAED,MAAM;QACF,QACI,EAAC,IAAI,qDAAC,IAAI,EAAC,MAAM,EAAC,IAAI,EAAC,UAAU,EAAC,QAAQ,EAAC,IAAI,IAC3C,8DAAO,CACJ,EACT;KACL;;;;;;","names":[],"sources":["src/components/dropdown-item/dropdown-item.scss?tag=wcs-dropdown-item","src/components/dropdown-item/dropdown-item.tsx"],"sourcesContent":["wcs-dropdown-item {\n    --wcs-dropdown-item-height: var(--wcs-semantic-size-m);\n    --wcs-dropdown-item-padding-horizontal: var(--wcs-semantic-spacing-base);\n    --wcs-dropdown-item-padding-vertical: 0;\n\n    --wcs-dropdown-item-text-font-weight: var(--wcs-semantic-font-weight-roman);\n\n    --wcs-dropdown-item-text-color-default: var(--wcs-semantic-color-foreground-action-neutral-default);\n    --wcs-dropdown-item-text-color-hover: var(--wcs-semantic-color-foreground-action-neutral-hover);\n    --wcs-dropdown-item-text-color-press: var(--wcs-semantic-color-foreground-action-neutral-press);\n\n    --wcs-dropdown-item-background-color-default: var(--wcs-semantic-color-background-action-neutral-default);\n    --wcs-dropdown-item-background-color-hover: var(--wcs-semantic-color-background-action-neutral-hover);\n    --wcs-dropdown-item-background-color-press: var(--wcs-semantic-color-background-action-neutral-press);\n\n    --wcs-dropdown-item-border-width-focus: var(--wcs-semantic-border-width-large);\n    --wcs-dropdown-item-border-color-focus: var(--wcs-semantic-color-border-focus-base);\n    --wcs-dropdown-item-border-radius: var(--wcs-semantic-border-radius-base);\n\n    --wcs-dropdown-item-transition-duration: var(--wcs-semantic-motion-duration-feedback-base);\n\n    padding: 0 var(--wcs-dropdown-item-padding-horizontal);\n    font-weight: var(--wcs-dropdown-item-text-font-weight);\n    cursor: pointer;\n    color: var(--wcs-dropdown-item-text-color-default);\n    height: var(--wcs-dropdown-item-height);\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    border-radius: var(--wcs-dropdown-item-border-radius);\n    transition: background-color var(--wcs-dropdown-item-transition-duration) ease-in-out;\n}\n\nwcs-dropdown-item:hover {\n    color: var(--wcs-dropdown-item-text-color-hover);\n    background-color: var(--wcs-dropdown-item-background-color-hover);\n}\n\n/* Press state */\nwcs-dropdown-item:active {\n    color: var(--wcs-dropdown-item-text-color-press);\n    background-color: var(--wcs-dropdown-item-background-color-press);\n}\n\nwcs-dropdown-item:focus-visible {\n    outline: dashed var(--wcs-dropdown-item-border-width-focus) var(--wcs-dropdown-item-border-color-focus);\n    outline-offset: calc(-1 * var(--wcs-dropdown-item-border-width-focus));\n}\n\n@supports not selector(wcs-dropdown-item:focus-visible) {\n    wcs-dropdown-item:focus-within {\n        outline: dashed var(--wcs-dropdown-item-border-width-focus) var(--wcs-dropdown-item-border-color-focus);\n        outline-offset: calc(-1 * var(--wcs-dropdown-item-border-width-focus));\n    }\n}\n","import { Component, ComponentInterface, EventEmitter, h, Event, Listen, Host } from '@stencil/core';\nimport { isEnterKey, isSpaceKey } from \"../../utils/helpers\";\n\n/**\n * You must add `wcs-dropdown-item` to `wcs-dropdown`\n * @slot <no-name> the slot that contains the item's name\n * \n * @cssprop --wcs-dropdown-item-height - Height of the dropdown item\n * @cssprop --wcs-dropdown-item-padding-horizontal - Padding horizontal\n * @cssprop --wcs-dropdown-item-padding-vertical - Padding vertical\n * @cssprop --wcs-dropdown-item-text-font-weight - Font weight of the dropdown item\n * @cssprop --wcs-dropdown-item-text-color-default - Default text color of the dropdown item \n * @cssprop --wcs-dropdown-item-text-color-hover - Text color of the dropdown item when hovered\n * @cssprop --wcs-dropdown-item-text-color-press - Text color of the dropdown item when pressed\n * @cssprop --wcs-dropdown-item-background-color-default - Default background color of the dropdown item\n * @cssprop --wcs-dropdown-item-background-color-hover - Background color of the dropdown item when hovered\n * @cssprop --wcs-dropdown-item-background-color-press - Background color of the dropdown item when pressed\n * @cssprop --wcs-dropdown-item-border-width-focus - Border width of the dropdown item when focused\n * @cssprop --wcs-dropdown-item-border-color-focus - Border color of the dropdown item when focused\n * @cssprop --wcs-dropdown-item-border-radius - Border radius of the dropdown item\n * @cssprop --wcs-dropdown-item-transition-duration - Transition duration of the dropdown item\n */\n@Component({\n    tag: 'wcs-dropdown-item',\n    styleUrl: 'dropdown-item.scss'\n})\nexport class DropdownItem implements ComponentInterface {\n    /**\n     * Event emitted when the dropdown item is clicked\n     */\n    @Event({\n        eventName: 'wcsDropdownItemClick',\n    })\n    wcsDropdownItemClick: EventEmitter<void>;\n    \n    @Listen('mouseup')\n    onMouseUp(_: MouseEvent): void {\n        this.wcsDropdownItemClick.emit();\n    }\n\n    @Listen('keydown')\n    onKeyDown(evt: KeyboardEvent): void {\n        if (isSpaceKey(evt) || isEnterKey(evt)) {\n            evt.preventDefault();\n            evt.stopImmediatePropagation();\n            this.wcsDropdownItemClick.emit();\n        }\n    }\n\n    render() {\n        return (\n            <Host slot=\"item\" role=\"menuitem\" tabindex=\"-1\">\n                <slot/>\n            </Host>\n        );\n    }\n}\n"],"version":3}