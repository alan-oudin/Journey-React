{"version":3,"names":["keyboardShortcutFromKeyboardEvent","event","key","shiftKey","altKey","ctrlKey","isHomeKey","isEndKey","isPageUpKey","isPageDownKey","isEnterKey","isSpaceKey","isTabKey","isEscapeKey"],"sources":["src/utils/keyboard-event.ts"],"sourcesContent":["import {\n    isEndKey,\n    isEnterKey,\n    isEscapeKey,\n    isHomeKey,\n    isPageDownKey,\n    isPageUpKey,\n    isSpaceKey,\n    isTabKey\n} from \"./helpers\";\n\ntype KeyboardShortcutCtrl = 'CTRL+A' | 'CTRL+HOME' | 'CTRL+END';\ntype KeyboardShortcutAlt = 'ALT+DOWN_ARROW' | 'ALT+UP_ARROW';\ntype KeyboardShortcutMaj = 'MAJ+TAB' | 'MAJ+SPACE';\ntype KeyboardShortcutDirectional = 'DOWN_ARROW' | 'UP_ARROW' | 'LEFT_ARROW' | 'RIGHT_ARROW';\ntype KeyboardShortcutOthers = 'HOME' | 'END' | 'PAGE_UP' | 'PAGE_DOWN' | 'ENTER' | 'SPACE' | 'TAB' | 'ESCAPE';\n\nexport type KeyboardShortcut = KeyboardShortcutCtrl | KeyboardShortcutAlt | KeyboardShortcutMaj | KeyboardShortcutDirectional | KeyboardShortcutOthers | 'UNKNOWN';\n\n/**\n * Convert a {@link KeyboardEvent} into a {@link KeyboardShortcut}\n * @param event - KeyboardEvent\n * @returns The corresponding {@link KeyboardShortcut}\n */\nexport function keyboardShortcutFromKeyboardEvent(event: KeyboardEvent): KeyboardShortcut {\n    const { key } = event;\n\n    if (event.shiftKey) {\n        switch (key) {\n            case ' ':\n                return 'MAJ+SPACE';\n            case 'Tab':\n                return 'MAJ+TAB';\n        }\n    } else if (event.altKey) {\n        switch (key) {\n            case 'ArrowDown':\n                return 'ALT+DOWN_ARROW';\n            case 'ArrowUp':\n                return 'ALT+UP_ARROW';\n        }\n    } else if (event.ctrlKey) {\n        if(isHomeKey(event)) {\n            return 'CTRL+HOME';\n        } else if(isEndKey(event)) {\n            return 'CTRL+END';\n        } else if (key === 'a') {\n            return 'CTRL+A';\n        }\n    } else {\n        switch (key) {\n            case 'ArrowDown':\n                return 'DOWN_ARROW';\n            case 'ArrowUp':\n                return 'UP_ARROW';\n            case 'ArrowLeft':\n                return 'LEFT_ARROW';\n            case 'ArrowRight':\n                return 'RIGHT_ARROW';\n        }\n\n        if(isHomeKey(event)) {\n            return 'HOME';\n        } else if (isEndKey(event)) {\n            return 'END';\n        } else if(isPageUpKey(event)) {\n            return 'PAGE_UP';\n        } else if(isPageDownKey(event)) {\n            return 'PAGE_DOWN';\n        } else if(isEnterKey(event)) {\n            return 'ENTER';\n        } else if(isSpaceKey(event)) {\n            return 'SPACE';\n        } else if(isTabKey(event)) {\n            return 'TAB';\n        } else if (isEscapeKey(event)) {\n            return 'ESCAPE';\n        }\n    }\n\n    return 'UNKNOWN';\n}\n"],"mappings":"8FAwBgBA,EAAkCC,GAC9C,MAAMC,IAAEA,GAAQD,EAEhB,GAAIA,EAAME,SAAU,CAChB,OAAQD,GACJ,IAAK,IACD,MAAO,YACX,IAAK,MACD,MAAO,U,MAEZ,GAAID,EAAMG,OAAQ,CACrB,OAAQF,GACJ,IAAK,YACD,MAAO,iBACX,IAAK,UACD,MAAO,e,MAEZ,GAAID,EAAMI,QAAS,CACtB,GAAGC,EAAUL,GAAQ,CACjB,MAAO,W,MACJ,GAAGM,EAASN,GAAQ,CACvB,MAAO,U,MACJ,GAAIC,IAAQ,IAAK,CACpB,MAAO,Q,MAER,CACH,OAAQA,GACJ,IAAK,YACD,MAAO,aACX,IAAK,UACD,MAAO,WACX,IAAK,YACD,MAAO,aACX,IAAK,aACD,MAAO,cAGf,GAAGI,EAAUL,GAAQ,CACjB,MAAO,M,MACJ,GAAIM,EAASN,GAAQ,CACxB,MAAO,K,MACJ,GAAGO,EAAYP,GAAQ,CAC1B,MAAO,S,MACJ,GAAGQ,EAAcR,GAAQ,CAC5B,MAAO,W,MACJ,GAAGS,EAAWT,GAAQ,CACzB,MAAO,O,MACJ,GAAGU,EAAWV,GAAQ,CACzB,MAAO,O,MACJ,GAAGW,EAASX,GAAQ,CACvB,MAAO,K,MACJ,GAAIY,EAAYZ,GAAQ,CAC3B,MAAO,Q,EAIf,MAAO,SACX,Q"}