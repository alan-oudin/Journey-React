{"version":3,"names":["isControlComponentWithLabel","el","undefined","getSlottedContentText","element","slotName","shadowRoot","slotSelector","slotElement","querySelector","assignedNodes","flatten","length","map","node","textContent","filter","text","trim","join","replace"],"sources":["src/utils/control-component-interface.ts"],"sourcesContent":["/**\n * For form controls components which have a label within like a wcs-switch or wcs-checkbox\n */\nexport interface ControlComponentWithLabel {\n    /**\n     * Get the label text\n     */\n    getLabel(): Promise<string>;\n}\n\nexport function isControlComponentWithLabel(el: any): el is ControlComponentWithLabel {\n    if (typeof el !== 'object' || el === null || el === undefined) return false;\n    return 'getLabel' in el;\n}\n\n/**\n\n * Extracts the text content from nodes assigned to a slot in a Web Component's Shadow DOM.\n *\n * @param element - The Web Component HTMLElement containing a Shadow DOM with slots\n * @param slotName - Optional name of the slot to target (if not provided, targets the default slot)\n * @returns The combined text content of all nodes assigned to the specified slot, with normalized whitespace\n *\n * @throws Will not throw errors, but returns empty string if the element has no Shadow DOM,\n *         no matching slot, or no assigned nodes\n */\nexport function getSlottedContentText(element: HTMLElement, slotName?: string): string {\n    if (!element.shadowRoot) {\n        return '';\n    }\n\n    const slotSelector = typeof slotName === 'string' ? `slot[name=\"${slotName}\"]` : 'slot:not([name])';\n\n    const slotElement = element.shadowRoot.querySelector(slotSelector);\n    if (!slotElement) {\n        return '';\n    }\n\n    const assignedNodes = (slotElement as HTMLSlotElement).assignedNodes({flatten: true});\n    if (!assignedNodes.length) {\n        return '';\n    }\n\n    return assignedNodes\n        .map(node => node.textContent || '')\n        .filter(text => text.trim() !== '') // we skip empty text nodes\n        .join(' ')\n        .replace(/\\s+/g, ' ')\n        .trim();\n}\n"],"mappings":"SAUgBA,EAA4BC,GACxC,UAAWA,IAAO,UAAYA,IAAO,MAAQA,IAAOC,UAAW,OAAO,MACtE,MAAO,aAAcD,CACzB,C,SAagBE,EAAsBC,EAAsBC,GACxD,IAAKD,EAAQE,WAAY,CACrB,MAAO,E,CAGX,MAAMC,SAAsBF,IAAa,SAAW,cAAcA,MAAe,mBAEjF,MAAMG,EAAcJ,EAAQE,WAAWG,cAAcF,GACrD,IAAKC,EAAa,CACd,MAAO,E,CAGX,MAAME,EAAiBF,EAAgCE,cAAc,CAACC,QAAS,OAC/E,IAAKD,EAAcE,OAAQ,CACvB,MAAO,E,CAGX,OAAOF,EACFG,KAAIC,GAAQA,EAAKC,aAAe,KAChCC,QAAOC,GAAQA,EAAKC,SAAW,KAC/BC,KAAK,KACLC,QAAQ,OAAQ,KAChBF,MACT,Q"}