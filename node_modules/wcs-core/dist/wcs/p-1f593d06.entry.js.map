{"version":3,"names":["tabsCss","WcsTabsStyle0","TABS_INHERITED_ATTRS","Tabs","this","inheritedAttributes","tabsId","selectedIndexChanged","newValue","currentActiveTabIndex","selectedTabkeyChanged","updateCurrentActiveIndexByTabKey","onMobileChange","popper","destroy","emitActiveTabChange","tabChange","emit","tabName","headers","tabIndex","selectedKey","tabs","itemKey","i","length","tab","onTabLoaded","refreshHeaders","onWindowClickEvent","event","mobile","clickedOnMobileButtonOrOverlay","composedPath","some","el","mobileButton","popoverDiv","mobileOverlayExpanded","tabsDidLoadWithResizeObserver","smallBreakpoint","getComputedStyle","getPropertyValue","smallBreakpointValue","parseInt","ResizeObserver","entry","cr","contentRect","paddingRight","right","width","paddingLeft","left","initMobileOverlay","createPopper","placement","strategy","modifiers","name","options","offset","componentDidLoad","putTabsInCorrectDivIfTheyAreNot","selectedIndex","resizeObserver","observe","document","body","componentDidRender","update","tabDiv","shadowRoot","querySelector","Array","from","querySelectorAll","filter","node","parentNode","forEach","parentElement","isEqualNode","removeChild","appendChild","handleKeyDown","ev","target","key","selectTabAndEmitChangeEvent","preventDefault","_a","previousElementSibling","classList","contains","focus","_b","nextElementSibling","firstTab","lastTab","handleKeyDownMobile","x","push","getAttribute","tabsEl","assignedElements","index","componentWillUpdate","headersOnly","updateTabVisibility","hideAllTabsContent","componentWillLoad","Object","assign","inheritAriaAttributes","inheritAttributes","disconnectedCallback","disconnect","setAriaAttribute","attr","value","setOrRemoveAttribute","nativeTablist","idx","hidden","onMobileButtonClick","tabElementToFocus","requestAnimationFrame","onMobileButtonKeyDown","mobileLayout","h","id","class","role","ref","onClick","onKeyDown","evt","onBlur","$event","stopImmediatePropagation","SelectArrow","up","description","map","header","desktopLayout","render","Host","onSlotchange","onTabsSlotChange","tabId","setAttribute","at"],"sources":["src/components/tabs/tabs.scss?tag=wcs-tabs&encapsulation=shadow","src/components/tabs/tabs.tsx"],"sourcesContent":["@import '../../style/focus-outline.scss';\n\n:host {\n    --wcs-tabs-indicator-height: calc(var(--wcs-semantic-size-base) / 2);\n    --wcs-tabs-indicator-background-color: var(--wcs-semantic-color-foreground-action-secondary-default);\n    --wcs-tabs-indicator-border-radius: var(--wcs-semantic-border-radius-full);\n\n    --wcs-tabs-color-default: var(--wcs-semantic-color-foreground-action-secondary-default);\n    --wcs-tabs-color-hover: var(--wcs-semantic-color-foreground-action-secondary-hover);\n    --wcs-tabs-color-press: var(--wcs-semantic-color-foreground-action-secondary-press);\n    --wcs-tabs-color-selected: var(--wcs-semantic-color-foreground-action-secondary-default);\n\n    --wcs-tabs-background-color-focus: var(--wcs-semantic-color-background-action-secondary-focus);\n    --wcs-tabs-background-color-hover: var(--wcs-semantic-color-background-action-secondary-hover);\n    --wcs-tabs-background-color-press: var(--wcs-semantic-color-background-action-secondary-press);\n\n    --wcs-tabs-border-radius: var(--wcs-semantic-border-radius-base);\n    --wcs-tabs-border-color-focus: var(--wcs-semantic-color-border-focus-base);\n\n    --wcs-tabs-font-weight-default: var(--wcs-semantic-font-weight-roman);\n    --wcs-tabs-font-weight-selected: var(--wcs-semantic-font-weight-roman);\n\n    --wcs-tabs-padding-top: var(--wcs-semantic-spacing-base);\n    --wcs-tabs-padding-right: var(--wcs-semantic-spacing-large);\n    --wcs-tabs-padding-bottom: calc(var(--wcs-semantic-spacing-base) + var(--wcs-tabs-indicator-height));\n    --wcs-tabs-padding-left: var(--wcs-semantic-spacing-large);\n\n    --wcs-tabs-gutter-border-width: var(--wcs-semantic-border-width-default);\n    --wcs-tabs-gutter-background-color: var(--wcs-semantic-color-border-secondary);\n    --wcs-tabs-headers-border-bottom: var(--wcs-tabs-gutter-border-width) solid var(--wcs-tabs-gutter-background-color);\n\n    --wcs-tabs-mobile-breakpoint: var(--wcs-phone-breakpoint-max-width, 575px);\n\n    --wcs-tabs-mobile-overlay-border-width: var(--wcs-semantic-border-width-default);\n    --wcs-tabs-mobile-overlay-border-color: var(--wcs-semantic-color-border-secondary);\n    --wcs-tabs-mobile-overlay-background-color: var(--wcs-semantic-color-background-surface-primary);\n    --wcs-tabs-mobile-overlay-padding: var(--wcs-semantic-spacing-base);\n    --wcs-tabs-mobile-overlay-border-radius: var(--wcs-semantic-border-radius-base);\n\n    --wcs-tabs-mobile-gap: var(--wcs-semantic-spacing-base);\n    --wcs-tabs-mobile-padding: 0 var(--wcs-semantic-spacing-base);\n    --wcs-tabs-mobile-height: var(--wcs-semantic-size-m);\n    --wcs-tabs-mobile-font-weight-default: var(--wcs-semantic-font-weight-medium);\n    --wcs-tabs-mobile-font-weight-active: var(--wcs-semantic-font-weight-black);\n    --wcs-tabs-mobile-font-size: var(--wcs-semantic-font-size-base);\n    --wcs-tabs-mobile-color: var(--wcs-semantic-color-text-primary);\n    --wcs-tabs-mobile-background-color-default: var(--wcs-semantic-color-background-action-secondary-default);\n    --wcs-tabs-mobile-background-color-focus: var(--wcs-semantic-color-background-action-secondary-focus);\n    --wcs-tabs-mobile-background-color-hover: var(--wcs-semantic-color-background-action-secondary-hover);\n    --wcs-tabs-mobile-background-color-press: var(--wcs-semantic-color-background-action-secondary-press);\n    --wcs-tabs-mobile-border-radius: var(--wcs-semantic-border-radius-base);\n\n    --wcs-tabs-transition-duration: var(--wcs-semantic-motion-duration-feedback-base);\n\n    display: block;\n}\n\n:host([align=start]) .wcs-tabs-headers {\n    justify-content: start;\n}\n\n:host([align=end]) .wcs-tabs-headers {\n    justify-content: end;\n}\n\n:host([align=center]) .wcs-tabs-headers {\n    justify-content: center;\n}\n\n.wcs-tabs-headers {\n    overflow-x: auto;\n    display: flex;\n    flex-direction: row;\n    position: relative;\n}\n\n:host([gutter]) {\n    .wcs-tabs-headers {\n        border-bottom: var(--wcs-tabs-headers-border-bottom);\n    }\n}\n\n.wcs-tab-header {\n    position: relative;\n\n    padding: var(--wcs-tabs-padding-top) var(--wcs-tabs-padding-right) var(--wcs-tabs-padding-bottom) var(--wcs-tabs-padding-left);\n    border-radius: var(--wcs-tabs-border-radius) var(--wcs-tabs-border-radius) 0 0;\n    display: flex;\n    flex-shrink: 0;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    outline: none;\n    transition: all var(--wcs-tabs-transition-duration) ease-out;\n\n    span {\n        text-align: center;\n        color: var(--wcs-tabs-color-default);\n        font-size: 1rem;\n        font-weight: var(--wcs-tabs-font-weight-default);\n    }\n\n    &:hover {\n        background-color: var(--wcs-tabs-background-color-hover);\n\n        span {\n            color: var(--wcs-tabs-color-hover);\n        }\n    }\n\n    // TODO : mettre le focus outline sur la wcs-tab-header comme dans figma\n    &:focus-visible > span {\n        @include focus-outline(var(--wcs-tabs-border-color-focus));\n    }\n\n    &:active {\n        background-color: var(--wcs-tabs-background-color-press);\n\n        span {\n            color: var(--wcs-tabs-color-press);\n        }\n    }\n}\n\n\n.active {\n    span {\n        font-weight: var(--wcs-tabs-font-weight-selected);\n        color: var(--wcs-tabs-color-selected);\n    }\n\n    &::after {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        content: \"\";\n        height: var(--wcs-tabs-indicator-height);\n        background-color: var(--wcs-tabs-indicator-background-color);\n        border-radius: var(--wcs-tabs-indicator-border-radius);\n    }\n}\n\n/* ============= */\n/* region MOBILE */\n/* ============= */\n\nbutton {\n    background-color: inherit;\n}\n\n#mobile-button {\n    border: 0;\n    font-family: var(--wcs-font-sans-serif), sans-serif;\n    text-align: center;\n    color: var(--wcs-tabs-color-default);\n    font-size: 1rem;\n    font-weight: var(--wcs-tabs-font-weight-default);\n    padding-right: calc(0.75 * var(--wcs-tabs-padding-right)); /* reduce padding right because of the arrow */\n\n    span {\n        display: flex;\n        align-items: center;\n    }\n\n    .arrow {\n        fill: var(--wcs-tabs-color-default);\n    }\n\n    &:hover {\n        .arrow {\n            fill: var(--wcs-tabs-color-hover);\n        }\n    }\n\n    &:active {\n        .arrow {\n            fill: var(--wcs-tabs-color-press);\n        }\n    }\n}\n\n.popover {\n    display: none;\n    z-index: 9999;\n    overflow: hidden;\n    border: var(--wcs-tabs-mobile-overlay-border-width) solid var(--wcs-tabs-mobile-overlay-border-color);\n    border-radius: var(--wcs-tabs-mobile-overlay-border-radius);\n    padding: var(--wcs-tabs-mobile-overlay-padding);\n    background-color: var(--wcs-tabs-mobile-overlay-background-color);\n\n    [role=tab] {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        cursor: pointer;\n        user-select: none;\n\n        gap: var(--wcs-tabs-mobile-gap);\n        padding: var(--wcs-tabs-mobile-padding);\n        height: var(--wcs-tabs-mobile-height);\n        font-weight: var(--wcs-tabs-mobile-font-weight-default);\n        font-size: var(--wcs-tabs-mobile-font-size);\n\n        color: var(--wcs-tabs-mobile-color);\n        background-color: var(--wcs-tabs-mobile-background-color);\n        border-radius: var(--wcs-tabs-mobile-border-radius);\n\n        transition-duration: var(--wcs-tabs-transition-duration);\n        transition-property: background-color, color;\n        transition-timing-function: ease;\n\n        overflow: hidden;\n        white-space: nowrap;\n\n        &:focus {\n            background-color: var(--wcs-tabs-mobile-background-color-focus);\n        }\n\n        &:focus-visible {\n            @include focus-outline($border-radius: var(--wcs-tabs-mobile-border-radius), $outline-offset: 0);\n        }\n\n        &:hover {\n            background-color: var(--wcs-tabs-mobile-background-color-hover);\n        }\n\n        &:active {\n            background-color: var(--wcs-tabs-mobile-background-color-press);\n        }\n\n    }\n\n    .mobile-active {\n        font-weight: var(--wcs-tabs-mobile-font-weight-active);\n    }\n}\n\n.show {\n    display: block;\n}\n\n/* ================ */\n/* endregion MOBILE */\n/* ================ */\n","import {\n    Component,\n    Prop,\n    Element,\n    State,\n    ComponentInterface,\n    Event,\n    EventEmitter,\n    Watch,\n    h,\n    Host,\n    Listen, Method\n} from '@stencil/core';\n\nimport { WcsTabsAlignment, WcsTabChangeEvent } from './tabs-interface';\nimport { AriaAttributeName, MutableAriaAttribute } from \"../../utils/mutable-aria-attribute\";\nimport {\n    inheritAriaAttributes,\n    inheritAttributes,\n    setOrRemoveAttribute\n} from \"../../utils/helpers\";\nimport { SelectArrow } from \"../select/select-arrow\";\nimport { createPopper, Instance } from \"@popperjs/core\";\n\nconst TABS_INHERITED_ATTRS = [];\n\n/**\n * Tabs component to switch between tab content. Use in conjunction with `wcs-tab`.\n * \n * ## Accessibility guidelines 💡\n * > - Mobile display should be used for narrower screens (automatically set by default).\n * > - The component respects the W3C [tab pattern](https://www.w3.org/WAI/ARIA/apg/patterns/tabs/)\n * \n * @cssprop --wcs-tabs-indicator-height - Height of the tabs indicator \n * @cssprop --wcs-tabs-indicator-background-color - Background color of the tabs indicator\n * @cssprop --wcs-tabs-indicator-border-radius - Border radius of the tabs indicator\n * @cssprop --wcs-tabs-color-default - Text color of the tabs\n * @cssprop --wcs-tabs-color-hover - Text color of the tabs when hovered\n * @cssprop --wcs-tabs-color-press - Text color of the tabs when pressed\n * @cssprop --wcs-tabs-color-focus - Text color of the tabs when focused\n * @cssprop --wcs-tabs-color-selected - Text color of the tabs when selected\n * @cssprop --wcs-tabs-background-color-focus - Background color of the tabs when focused\n * @cssprop --wcs-tabs-background-color-hover - Background color of the tabs when hovered\n * @cssprop --wcs-tabs-background-color-press - Background color of the tabs when pressed\n * @cssprop --wcs-tabs-border-radius - Border radius of the tabs\n * @cssprop --wcs-tabs-border-color-focus - Outline color on a focused tab\n * @cssprop --wcs-tabs-font-weight-default - Font weight of the tabs\n * @cssprop --wcs-tabs-font-weight-selected - Font weight of the tabs when selected\n * @cssprop --wcs-tabs-padding-top - Padding top of the tabs\n * @cssprop --wcs-tabs-padding-right - Padding right of the tabs\n * @cssprop --wcs-tabs-padding-bottom - Padding bottom of the tabs\n * @cssprop --wcs-tabs-padding-left - Padding left of the tabs\n * @cssprop --wcs-tabs-headers-border-bottom - Border bottom (gutter) below the tabs\n * @cssprop --wcs-tabs-transition-duration - Transition duration of the tabs\n * @cssprop --wcs-tabs-mobile-breakpoint - Breakpoint for mobile display (default: 575px)\n * @cssprop --wcs-tabs-mobile-overlay-border-width - Border width of the mobile overlay\n * @cssprop --wcs-tabs-mobile-overlay-border-color - Border color of the mobile overlay\n * @cssprop --wcs-tabs-mobile-overlay-background-color - Background color of the mobile overlay\n * @cssprop --wcs-tabs-mobile-overlay-padding - Padding of the mobile overlay\n * @cssprop --wcs-tabs-mobile-overlay-border-radius - Border radius of the mobile overlay\n * @cssprop --wcs-tabs-mobile-gap - Gap between the mobile tabs in the overlay\n * @cssprop --wcs-tabs-mobile-padding - Padding of the mobile tabs in the overlay\n * @cssprop --wcs-tabs-mobile-height - Height of the mobile tabs in the overlay\n * @cssprop --wcs-tabs-mobile-font-weight-default - Default weight of the mobile tabs in the overlay\n * @cssprop --wcs-tabs-mobile-font-weight-active - Active font weight of the mobile tabs in the overlay\n * @cssprop --wcs-tabs-mobile-font-size - Font size of the mobile tabs in the overlay\n * @cssprop --wcs-tabs-mobile-color - Text color of the mobile tabs in the overlay\n * @cssprop --wcs-tabs-mobile-background-color-default - Default background color of the mobile tabs in the overlay\n * @cssprop --wcs-tabs-mobile-background-color-focus - Focused background color of the mobile tabs in the overlay\n * @cssprop --wcs-tabs-mobile-background-color-hover - Hovered background color of the mobile tabs in the overlay\n * @cssprop --wcs-tabs-mobile-background-color-press - Pressed background color of the mobile tabs in the overlay\n * @cssprop --wcs-tabs-mobile-border-radius - Border radius of the mobile tabs in the overlay\n */\n@Component({\n    tag: 'wcs-tabs',\n    styleUrl: 'tabs.scss',\n    shadow: true,\n})\nexport class Tabs implements ComponentInterface, MutableAriaAttribute {\n    @Element() private el!: HTMLWcsTabsElement;\n    private nativeTablist!: HTMLElement;\n    private inheritedAttributes: { [k: string]: any } = {};\n    \n    /**\n     * Tab headers alignment.\n     */\n    @Prop({reflect: true}) align: WcsTabsAlignment = 'start';\n\n    /**\n     * Current selected tab index.\n     * Starts at 0.\n     */\n    @Prop() selectedIndex: number = 0;\n\n    @Prop() selectedKey: any;\n\n    /**\n     * Whether to skip rendering the tabpanel with the content of the selected tab. Use this prop if you plan to\n     * separately render the tab content.\n     */\n    @Prop({ reflect: true }) headersOnly: boolean = false;\n    /** Determines if tabs header should have a border at the bottom */\n    @Prop({ reflect: true }) gutter: boolean;\n\n    /**\n     * Description is used to provide aria-label for the tabs container which has `role=\"tablist\"`.\n     */\n    @Prop() description: string;\n\n    // region MOBILE\n    \n    /**\n     * Mobile display : This div is shown on the user interface when the tabs are expanded\n     * @private\n     */\n    private popoverDiv!: HTMLDivElement;\n\n    private popper: Instance;\n    \n    @State() private mobileOverlayExpanded: boolean = false;\n\n    /**\n     * If true, the tabs will be displayed as a dropdown list containing the tabs. Useful for narrower screens.\n     */\n    @State() private mobile: boolean = false;\n\n    /**\n     * Mobile display: the selected tab semantically become a button that opens an overlay\n     */\n    private mobileButton!: HTMLButtonElement;\n\n    /**\n     * Observe the screen resize to switch between mobile and desktop mode\n     */\n    private resizeObserver: ResizeObserver;\n\n\n    // endregion MOBILE\n\n    /**\n     *\n     * Emitted when the selected tab change.\n     */\n    @Event() tabChange!: EventEmitter<WcsTabChangeEvent>;\n\n    @State() private headers: string[] = [];\n\n    @State() private currentActiveTabIndex = 0;\n\n    private tabsId: number = tabsId++;\n\n    @Watch('selectedIndex')\n    selectedIndexChanged(newValue: number) {\n        this.currentActiveTabIndex = newValue;\n    }\n\n    @Watch('selectedKey')\n    selectedTabkeyChanged(newValue: any) {\n        this.updateCurrentActiveIndexByTabKey(newValue);\n    }\n    \n    @Watch('mobile')\n    onMobileChange(newValue: boolean) {\n        // Remove the popper instance when switching from mobile to desktop for performance\n        if (!newValue) {\n            this.popper.destroy();\n            this.popper = null;\n        }\n    }\n\n    private emitActiveTabChange() {\n        this.tabChange.emit({\n            tabName: this.headers[this.currentActiveTabIndex],\n            tabIndex: this.currentActiveTabIndex,\n            selectedKey: this.tabs[this.currentActiveTabIndex].itemKey\n        });\n    }\n\n    private updateCurrentActiveIndexByTabKey(newValue: any) {\n        for (let i = 0; i < this.tabs.length; i++) {\n            const tab = this.tabs[i];\n            if (tab.itemKey === newValue) {\n                this.currentActiveTabIndex = i;\n            }\n        }\n    }\n\n    @Listen('tabLoaded')\n    onTabLoaded() {\n        this.refreshHeaders();\n    }\n\n    @Listen('click', {target: 'window'})\n    onWindowClickEvent(event: MouseEvent) {\n        if (this.mobile) {\n            const clickedOnMobileButtonOrOverlay = event.composedPath().some(el => el === this.mobileButton || el === this.popoverDiv);\n            if (this.mobileOverlayExpanded && !clickedOnMobileButtonOrOverlay) {\n                this.mobileOverlayExpanded = false;\n            }\n        }\n    }\n\n    /**\n     * Init resize observer for mobile\n     */\n    private tabsDidLoadWithResizeObserver(): ResizeObserver {\n        const smallBreakpoint = getComputedStyle(this.el).getPropertyValue('--wcs-tabs-mobile-breakpoint') || '575px';\n        const smallBreakpointValue = parseInt(smallBreakpoint, 10);\n\n        return new ResizeObserver(entry => {\n            const cr = entry[0].contentRect;\n            const paddingRight = cr.right - cr.width;\n            const paddingLeft = cr.left;\n            // Switch to mobile mode if the screen is smaller than the breakpoint\n            this.mobile = cr.width <= smallBreakpointValue - (paddingLeft + paddingRight);\n        });\n    }\n\n\n    private initMobileOverlay() {\n        this.popper = createPopper(this.mobileButton, this.popoverDiv, {\n            placement: 'bottom-start',\n            strategy: 'fixed',\n            modifiers: [\n                {\n                    name: 'offset',\n                    options: {\n                        offset: [0, 8]\n                    }\n                }\n            ]\n        });\n    }\n\n    componentDidLoad() {\n        this.putTabsInCorrectDivIfTheyAreNot();\n        this.refreshHeaders();\n        if (this.selectedIndex) {\n            this.currentActiveTabIndex = this.selectedIndex;\n        }\n        if (this.selectedKey) {\n            this.updateCurrentActiveIndexByTabKey(this.selectedKey);\n        }\n        if (!this.resizeObserver) {\n            this.resizeObserver = this.tabsDidLoadWithResizeObserver();\n            this.resizeObserver.observe(document.body);\n        }\n    }\n\n    componentDidRender() {\n        if (this.mobile) {\n            if(!this.popper) {\n                this.initMobileOverlay();\n            } else {\n                this.popper.update();\n            }\n        }\n    }\n\n    // XXX: Firefox < 63\n    private putTabsInCorrectDivIfTheyAreNot() {\n        const tabDiv = this.el.shadowRoot.querySelector('.wcs-tabs');\n        if (tabDiv.querySelector('slot') === null) {\n            Array.from(this.el.querySelectorAll('wcs-tab'))\n                .filter(node => node.parentNode !== tabDiv)\n                .forEach(tab => {\n                    if (tab.parentElement.isEqualNode(this.el)) {\n                        this.el.removeChild(tab);\n                        tabDiv.appendChild(tab);\n                    }\n                });\n        }\n    }\n\n    handleKeyDown(ev: KeyboardEvent, tabIndex: number) {\n        const target = ev.target as HTMLDivElement;\n        switch (ev.key) {\n            case ' ':\n            case 'Enter': {\n                this.selectTabAndEmitChangeEvent(tabIndex);\n                ev.preventDefault();\n                break;\n            }\n            case 'ArrowLeft': {\n                if (target.previousElementSibling?.classList.contains('wcs-tab-header')) {\n                    (target.previousElementSibling as HTMLDivElement).focus();\n                    ev.preventDefault();\n                }\n                break;\n            }\n            case 'ArrowRight': {\n                if (target.nextElementSibling?.classList.contains('wcs-tab-header')) {\n                    (target.nextElementSibling as HTMLDivElement).focus();\n                    ev.preventDefault();\n                }\n                break;\n            }\n            case 'Home': {\n                const firstTab = this.el.shadowRoot.querySelector('.wcs-tab-header:first-child');\n                if (firstTab) {\n                    (firstTab as HTMLDivElement).focus();\n                    ev.preventDefault();\n                }\n                break;\n            }\n            case 'End': {\n                const lastTab = this.el.shadowRoot.querySelector('.wcs-tab-header:last-child');\n                if (lastTab) {\n                    (lastTab as HTMLDivElement).focus();\n                    ev.preventDefault();\n                }\n                break;\n            }\n        }\n    }\n\n    handleKeyDownMobile(ev: KeyboardEvent, tabIndex: number) {\n        const target = ev.target as HTMLDivElement;\n        switch (ev.key) {\n            case ' ':\n            case 'Enter': {\n                this.selectTabAndEmitChangeEvent(tabIndex);\n                ev.preventDefault();\n                break;\n            }\n            case 'ArrowUp': {\n                if (target.previousElementSibling?.classList.contains('wcs-tab-header-mobile')) {\n                    (target.previousElementSibling as HTMLDivElement).focus();\n                    ev.preventDefault();\n                }\n                break;\n            }\n            case 'ArrowDown': {\n                if (target.nextElementSibling?.classList.contains('wcs-tab-header-mobile')) {\n                    (target.nextElementSibling as HTMLDivElement).focus();\n                    ev.preventDefault();\n                }\n                break;\n            }\n            case 'Home': {\n                const firstTab = this.el.shadowRoot.querySelector('.wcs-tab-header-mobile:first-child');\n                if (firstTab) {\n                    (firstTab as HTMLDivElement).focus();\n                    ev.preventDefault();\n                }\n                break;\n            }\n            case 'End': {\n                const lastTab = this.el.shadowRoot.querySelector('.wcs-tab-header-mobile:last-child');\n                if (lastTab) {\n                    (lastTab as HTMLDivElement).focus();\n                    ev.preventDefault();\n                }\n                break;\n            }\n            case 'Escape': {\n                this.mobileOverlayExpanded = false;\n                ev.preventDefault();\n                break;\n            }\n        }\n    }\n\n    private refreshHeaders() {\n        this.headers = [];\n        this.tabs\n            .forEach(x => {\n                this.headers.push(x.getAttribute('header'));\n            });\n    }\n\n    private get tabs() {\n        const tabsEl = this.el.shadowRoot.querySelector('.wcs-tabs');\n        // FIXME: problem with this selector being too greedy in ff < 63\n        const tabs = this.el.shadowRoot.querySelectorAll('.wcs-tabs > wcs-tab');\n\n        return tabs.length !== 0\n            ? tabs\n            : tabsEl?.querySelector('slot')\n                ? tabsEl?.querySelector('slot')?.assignedElements() as unknown as NodeListOf<HTMLWcsTabElement>\n                : [];\n    }\n\n    private selectTabAndEmitChangeEvent(index: number) {\n        this.currentActiveTabIndex = index;\n        this.emitActiveTabChange();\n        \n        if (this.mobile) {\n            this.mobileOverlayExpanded = false;\n            this.mobileButton?.focus();\n            \n        }\n    }\n\n    componentWillUpdate() {\n        if (!this.headersOnly) {\n            this.updateTabVisibility();\n        } else {\n            this.hideAllTabsContent();\n        }\n    }\n\n    componentWillLoad(): Promise<void> | void {\n        this.inheritedAttributes = {\n            ...inheritAriaAttributes(this.el),\n            ...inheritAttributes(this.el, TABS_INHERITED_ATTRS),\n        };\n    }\n\n    disconnectedCallback(): void {\n        if (this.popper) {\n            this.popper.destroy();\n            this.popper = null;\n        }\n        this.resizeObserver?.disconnect();\n    }\n\n    @Method()\n    async setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined) {\n        setOrRemoveAttribute(this.mobile ? this.popoverDiv : this.nativeTablist, attr, value);\n    }\n\n    private updateTabVisibility() {\n        this.tabs.forEach((el: HTMLWcsTabElement, idx: number) => {\n            if (idx !== this.currentActiveTabIndex) {\n                el.hidden = true;\n            } else {\n                el.hidden = false;\n            }\n        });\n    }\n\n    private hideAllTabsContent() {\n        this.tabs.forEach((el: HTMLWcsTabElement) => el.hidden = true);\n    }\n    \n    onMobileButtonClick() {\n        this.mobileOverlayExpanded = !this.mobileOverlayExpanded;\n        const tabElementToFocus = this.popoverDiv.querySelectorAll('[role=tab]')[this.currentActiveTabIndex] as HTMLElement;\n        requestAnimationFrame(() => {\n            tabElementToFocus?.focus();\n        })\n    }\n    \n    onMobileButtonKeyDown(ev: KeyboardEvent) {\n        if (ev.key === 'ArrowDown' || ev.key === 'ArrowUp') {\n            this.onMobileButtonClick();\n        }\n    }\n\n    mobileLayout() {\n        return [\n            <button id=\"mobile-button\"\n                    class=\"wcs-tab-header active\"\n                    aria-controls=\"menu\"\n                    role=\"button\"\n                    aria-expanded={this.mobileOverlayExpanded ? 'true' : 'false'}\n                    ref={el => this.mobileButton = el}\n                    onClick={() => this.onMobileButtonClick()}\n                    onKeyDown={(evt) => this.onMobileButtonKeyDown(evt)}\n                    onBlur={($event) => $event.stopImmediatePropagation()}>\n                <span>\n                    {this.headers[this.currentActiveTabIndex]} <SelectArrow up={this.mobileOverlayExpanded}/>\n                </span>\n            </button>,\n            <div class={(this.mobileOverlayExpanded ? 'show ' : '') + 'popover'}\n                 role=\"tablist\"\n                 id=\"menu\"\n                 aria-label={this.description}\n                 aria-orientation=\"vertical\"\n                 ref={el => this.popoverDiv = el}\n                 tabIndex={-1}\n                 {...this.inheritedAttributes}>\n                {this.headers.map((header, idx) =>\n                    <div class={'wcs-tab-header-mobile ' + (this.currentActiveTabIndex === idx ? 'mobile-active' : '')}\n                         onClick={() => this.selectTabAndEmitChangeEvent(idx)}\n                         onKeyDown={evt => this.handleKeyDownMobile(evt, idx)}\n                         tabIndex={this.currentActiveTabIndex === idx ? 0 : -1}\n                         role=\"tab\"\n                         id={`tabs-id-${this.tabsId}-tab-id-${idx}`}\n                        // aria-controls refers to ID of the tab panel related to the header\n                         aria-controls={`tabs-id-${this.tabsId}-tab-panel-${idx}`}\n                         aria-label={header}\n                         aria-selected={this.currentActiveTabIndex === idx ? 'true' : 'false'}\n                    >\n                        <span>{header}</span>\n                    </div>\n                )}\n            </div>\n        ]\n    }\n    \n    desktopLayout() {\n        return (\n            this.headers.map((header, idx) =>\n                <div class={'wcs-tab-header ' + (this.currentActiveTabIndex === idx ? 'active' : '')}\n                     onClick={() => this.selectTabAndEmitChangeEvent(idx)}\n                     onKeyDown={evt => this.handleKeyDown(evt, idx)}\n                     tabIndex={this.currentActiveTabIndex === idx ? 0 : -1}\n                     role=\"tab\"\n                     id={`tabs-id-${this.tabsId}-tab-id-${idx}`}\n                    // aria-controls refers to ID of the tab panel related to the header\n                     aria-controls={`tabs-id-${this.tabsId}-tab-panel-${idx}`}\n                     aria-label={header}\n                     aria-selected={this.currentActiveTabIndex === idx ? 'true' : 'false'}\n                >\n                    <span>{header}</span>\n                </div>\n            )\n        )\n    }\n\n    render() {\n        return (\n            <Host>\n                <div class=\"wcs-tabs-headers\"\n                     role={this.mobile ? null : 'tablist'}\n                     ref={(el) => (this.nativeTablist = el)}\n                     aria-orientation={this.mobile ? null : 'horizontal'}\n                     aria-label={this.mobile ? null : this.description}\n                     {...(!this.mobile && this.inheritedAttributes)}>\n                    {this.mobile ? this.mobileLayout() : this.desktopLayout()}\n                </div>\n                <div class=\"wcs-tabs\">\n                    <slot onSlotchange={() => this.onTabsSlotChange()} name=\"wcs-tab\"/>\n                </div>\n            </Host>\n        );\n    }\n\n    /**\n     * Observe when a new tab panel is added to the slot to let's handle accessibility properties for tabs panel:\n     * - id: to let header tab refers it proper panel\n     * - aria-label: take the same name as it's referenced header name\n     * \n     * @private\n     */\n    private onTabsSlotChange() {\n        let tabId = 0;\n        this.refreshHeaders();\n        this.tabs.forEach(tab => {\n            tab.setAttribute(\"aria-label\", this.headers.at(tabId));\n            // set an ID to set aria-controls on header tab \n            // (https://www.w3.org/WAI/ARIA/apg/patterns/tabs/examples/tabs-automatic/#:~:text=Refers%20to%20the%20element)\n            tab.setAttribute(\"id\", `tabs-id-${this.tabsId}-tab-panel-${tabId}`);\n            tabId++;\n        });\n    }\n}\n\nlet tabsId = 0;\n"],"mappings":"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"}