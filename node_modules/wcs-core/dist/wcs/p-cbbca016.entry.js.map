{"version":3,"names":["cardMediaCss","WcsCardMediaStyle0","CardMedia","setOrientation","orientation","this","render","h","Host","key","class","name"],"sources":["src/components/card-media/card-media.scss?tag=wcs-card-media&encapsulation=shadow","src/components/card-media/card-media.tsx"],"sourcesContent":[":host {\n    display: block;\n\n    --wcs-card-media-max-width-horizontal: 160px;\n\n    ::slotted(*), ::slotted([slot=\"horizontal\"]), ::slotted([slot=\"vertical\"]) {\n        display: block;\n        object-fit: cover; // object position = 50% 50%\n\n        width: 100%;\n        height: 100%;\n    }\n}\n\n:host(.vertical) {\n    ::slotted(*), ::slotted([slot=\"vertical\"]) {\n        border-radius: var(--wcs-card-border-radius) var(--wcs-card-border-radius) 0 0;\n        aspect-ratio: 16 / 9;\n    }\n}\n\n:host(.horizontal) {\n    ::slotted(*), ::slotted([slot=\"horizontal\"]) {\n        width: var(--wcs-card-media-max-width-horizontal);\n        aspect-ratio: 1 / 1;\n        border-radius: var(--wcs-card-border-radius) 0 0 var(--wcs-card-border-radius);\n    }\n}\n","import { Component, Host, h, Method, State } from '@stencil/core';\nimport { CardOrientation } from \"../card/card-interface\";\n\n/**\n * The card media component is a container that display an image/icon inside a card. \n * On horizontal orientation, the image/icon has an aspect ratio of 1/1\n * On vertical orientation, the image/icon has an aspect ratio of 16/9.\n * \n * @slot - The default slot where the image/icon is displayed\n * @slot vertical - The slot where the image/icon is displayed when the card is vertical\n * @slot horizontal - The slot where the image/icon is displayed when the card is horizontal\n * \n * @cssprop --wcs-card-media-max-width-horizontal - Max width of the image when the card is horizontal\n */\n@Component({\n    tag: 'wcs-card-media',\n    styleUrl: 'card-media.scss',\n    shadow: true,\n})\nexport class CardMedia {\n    @State() private orientation: CardOrientation = 'vertical';\n\n    /**\n     * @internal this method is not intended to be used by the user\n     */\n    @Method()\n    async setOrientation(orientation: CardOrientation) {\n        this.orientation = orientation;\n    }\n\n    render() {\n        return (\n            <Host class={this.orientation}>\n                <slot></slot>\n                {this.orientation === 'vertical' ? <slot name=\"vertical\"></slot> : <slot name=\"horizontal\"></slot>}\n            </Host>\n        );\n    }\n\n}\n"],"mappings":"kDAAA,MAAMA,EAAe,0lBACrB,MAAAC,EAAeD,E,MCkBFE,EAAS,M,0CAC8B,U,CAMhD,oBAAMC,CAAeC,GACjBC,KAAKD,YAAcA,C,CAGvB,MAAAE,GACI,OACIC,EAACC,EAAI,CAAAC,IAAA,2CAACC,MAAOL,KAAKD,aACdG,EAAA,QAAAE,IAAA,6CACCJ,KAAKD,cAAgB,WAAaG,EAAA,QAAMI,KAAK,aAAqBJ,EAAA,QAAMI,KAAK,e"}