'use strict';

const helpers = require('./helpers-2f1a8ddc.js');

/**
 * This function add event handlers on the navigableItems list. The handlers call the function close() on the nodeName.
 *
 * T: type class of the nodeNameToClose param (must have a close function)
 *
 * @param navigableItems items on which focusout event listeners must be added
 * @param nodeNameToClose nodeName of the element we want to close in the event path
 */
function registerCloseHandlerForFocusOutEventOn(navigableItems, nodeNameToClose) {
    navigableItems.forEach(navigableItem => {
        navigableItem.addEventListener("focusout", (evt) => {
            const relatedTargetElement = evt.relatedTarget;
            if (!isElementChildOfNavigableItem(navigableItem, relatedTargetElement)) {
                const eventComposedPath = evt.composedPath();
                if (isEventThrownFromChildOfNodeNameToClose(eventComposedPath, nodeNameToClose)) {
                    eventComposedPath.filter(eventTargetNodeNameEquals(nodeNameToClose))[0].close();
                }
            }
        });
    });
}
function isElementChildOfNavigableItem(navigableItem, element) {
    return navigableItem.contains(element);
}
function eventTargetNodeNameEquals(nodeName) {
    return x => x.nodeName === nodeName;
}
function isEventThrownFromChildOfNodeNameToClose(eventComposedPath, nodeName) {
    return eventComposedPath.map(x => x.nodeName).indexOf(nodeName) !== -1;
}
function comNavDidLoadWithResizeObserver(comNavElement) {
    const smallBreakpoint = helpers.getCssRootPropertyValue('--wcs-phone-breakpoint-max-width') || '575px';
    const smallBreakpointValue = parseInt(smallBreakpoint, 10);
    return new ResizeObserver(entry => {
        const cr = entry[0].contentRect;
        const paddingRight = cr.right - cr.width;
        const paddingLeft = cr.left;
        if (cr.width <= smallBreakpointValue - (paddingLeft + paddingRight)) {
            comNavElement.currentActiveSizing = 'mobile';
        }
        else {
            comNavElement.currentActiveSizing = 'desktop';
        }
    });
}

exports.comNavDidLoadWithResizeObserver = comNavDidLoadWithResizeObserver;
exports.registerCloseHandlerForFocusOutEventOn = registerCloseHandlerForFocusOutEventOn;

//# sourceMappingURL=com-nav-utils-ff4f0bef.js.map