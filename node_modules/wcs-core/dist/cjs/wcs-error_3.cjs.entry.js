'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6f0140d8.js');
const mutableAriaAttribute = require('./mutable-aria-attribute-342a2304.js');
const helpers = require('./helpers-2f1a8ddc.js');
const controlComponentInterface = require('./control-component-interface-d9b68f28.js');

const errorCss = ":host{--wcs-error-color:var(--wcs-semantic-color-text-critical);--wcs-error-font-size:var(--wcs-semantic-font-size-caption-2);--wcs-error-font-weight:var(--wcs-semantic-font-weight-book);color:var(--wcs-error-color);font-size:var(--wcs-error-font-size);font-weight:var(--wcs-error-font-weight)}";
const WcsErrorStyle0 = errorCss;

const Label$1 = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
    }
    render() {
        return (index.h(index.Host, { key: '7dffcb3487f7210c5c9a45af709fc942a1410679', role: "alert", slot: "error" }, index.h("slot", { key: '251fbdc26fe58be4296328c4ebaed77329c6c507' })));
    }
};
Label$1.style = WcsErrorStyle0;

const formFieldCss = ":host{--wcs-form-field-gap:var(--wcs-semantic-spacing-small);--wcs-form-field-prefix-suffix-border-radius:var(--wcs-semantic-border-radius-base);--wcs-form-field-prefix-icon-color:var(--wcs-semantic-color-foreground-primary);--wcs-form-field-prefix-value-color:var(--wcs-semantic-color-text-inverse);--wcs-form-field-prefix-placeholder-color:var(--wcs-semantic-color-text-inverse);display:flex;flex-direction:column;gap:var(--wcs-form-field-gap);}:host .input-container{display:flex}:host ::slotted([slot=prefix]){--wcs-select-value-color:var(--wcs-semantic-color-text-inverse);--wcs-select-placeholder-color:var(--wcs-semantic-color-text-inverse);--wcs-select-control-background-color:var(--wcs-semantic-color-background-action-primary-default);--wcs-select-control-arrow-color:var(--wcs-form-field-prefix-icon-color);--wcs-select-control-border-radius:var(--wcs-form-field-prefix-suffix-border-radius) 0 0 var(--wcs-form-field-prefix-suffix-border-radius);--wcs-select-control-border-width-default:0;--wcs-select-control-border-style-focus:dashed;--wcs-select-control-border-color-focus:var(--wcs-semantic-color-border-focus-base);--wcs-native-select-value-color:var(--wcs-semantic-color-text-inverse);--wcs-native-select-placeholder-color:var(--wcs-semantic-color-text-inverse);--wcs-native-select-arrow-color:var(--wcs-form-field-prefix-icon-color);--wcs-native-select-background-color:var(--wcs-semantic-color-background-action-primary-default);--wcs-native-select-border-width:0;--wcs-native-select-border-color-focus:var(--wcs-semantic-color-border-focus-base);--wcs-native-select-border-style-focus:dashed;--wcs-native-select-border-radius:var(--wcs-form-field-prefix-suffix-border-radius) 0 0 var(--wcs-form-field-prefix-suffix-border-radius);--wcs-native-select-option-color:var(--wcs-semantic-color-text-inverse);--wcs-button-border-radius:var(--wcs-form-field-prefix-suffix-border-radius) 0 0 var(--wcs-form-field-prefix-suffix-border-radius)}:host ::slotted([slot=suffix]){--wcs-button-border-radius:0 var(--wcs-form-field-prefix-suffix-border-radius) var(--wcs-form-field-prefix-suffix-border-radius) 0;--wcs-select-control-border-radius:0 var(--wcs-form-field-prefix-suffix-border-radius) var(--wcs-form-field-prefix-suffix-border-radius) 0;--wcs-native-select-border-radius:0 var(--wcs-form-field-prefix-suffix-border-radius) var(--wcs-form-field-prefix-suffix-border-radius) 0}::slotted([slot=prefix][disabled]),::slotted([slot=prefix]:disabled),::slotted([slot=prefix][aria-disabled=true]),::slotted([slot=prefix][data-disabled]){--wcs-semantic-color-background-control-disabled:var(--wcs-semantic-color-background-action-primary-disabled);--wcs-semantic-color-text-disabled:var(--wcs-semantic-color-foreground-disabled);--wcs-select-control-background-color:var(--wcs-semantic-color-background-action-primary-disabled);--wcs-select-value-color:var(--wcs-semantic-color-text-disabled);--wcs-select-placeholder-color:var(--wcs-semantic-color-text-disabled);--wcs-native-select-background-color:var(--wcs-semantic-color-background-action-primary-disabled);--wcs-native-select-placeholder-color:var(--wcs-semantic-color-text-disabled);--wcs-native-select-value-color:var(--wcs-semantic-color-text-disabled)}::slotted([slot=prefix]:hover:not([disabled]):not([data-disabled])){--wcs-select-control-background-color:var(--wcs-semantic-color-background-action-primary-hover);--wcs-native-select-background-color:var(--wcs-semantic-color-background-action-primary-hover)}::slotted([slot=prefix]:active:not([disabled]):not([data-disabled])){--wcs-select-control-background-color:var(--wcs-semantic-color-background-action-primary-press);--wcs-native-select-background-color:var(--wcs-semantic-color-background-action-primary-press)}.input-container{display:flex}::slotted(wcs-select:not([slot=prefix])){width:100%}::slotted(wcs-native-select:not([slot=prefix])){width:100%}:host(.has-prefix) ::slotted(:not([slot=prefix])){--wcs-input-border-radius-left:0;--wcs-select-control-border-radius:0 var(--wcs-form-field-prefix-suffix-border-radius) var(--wcs-form-field-prefix-suffix-border-radius) 0;--wcs-native-select-border-radius:0 var(--wcs-form-field-prefix-suffix-border-radius) var(--wcs-form-field-prefix-suffix-border-radius) 0}:host(.has-suffix) ::slotted(:not([slot=suffix])){--wcs-input-border-radius-right:0;--wcs-select-control-border-radius:var(--wcs-form-field-prefix-suffix-border-radius) 0 0 var(--wcs-form-field-prefix-suffix-border-radius);--wcs-native-select-border-radius:var(--wcs-form-field-prefix-suffix-border-radius) 0 0 var(--wcs-form-field-prefix-suffix-border-radius)}:host(.has-prefix.has-suffix) ::slotted(:not([slot=prefix]):not([slot=suffix])){--wcs-input-border-radius-left:0;--wcs-input-border-radius-right:0;--wcs-select-control-border-radius:0;--wcs-native-select-border-radius:0}";
const WcsFormFieldStyle0 = formFieldCss;

const FormField = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.isError = false;
        this.hasPrefix = false;
        this.hasSuffix = false;
        this.spiedElement = undefined;
    }
    componentWillLoad() {
        this.hasSuffix = this.el.querySelector('[slot=suffix]') !== null;
        this.hasPrefix = this.el.querySelector('[slot=prefix]') !== null;
    }
    componentDidLoad() {
        this.initSpiedElement();
        this.addRequiredMarkerToLabel();
        this.updateErrorStateOnInput(this.isError);
    }
    isErrorChange(newValue) {
        this.updateErrorStateOnInput(newValue);
        this.updateAriaAttributes();
    }
    updateErrorStateOnInput(newValue) {
        if (this.spiedElementIsOfType('wcs-input', 'wcs-textarea')) {
            if (newValue) {
                this.spiedElement.setAttribute('state', 'error');
            }
            else {
                this.spiedElement.setAttribute('state', 'initial');
            }
        }
    }
    /**
     * This function return true if the form field contains an element with tagName matches a value of the types param
     * @param types
     * @private
     */
    spiedElementIsOfType(...types) {
        var _a;
        for (const type of types) {
            if (((_a = this.spiedElement) === null || _a === void 0 ? void 0 : _a.tagName) === type.toUpperCase())
                return true;
        }
        return false;
    }
    addRequiredMarkerToLabel() {
        var _a;
        // TODO: deprecate this in favor of the 'required' component attribute
        const label = this.el.querySelector('wcs-label');
        this.observer = new MutationObserver(mutations => {
            var _a;
            const requiredAttMutation = mutations.filter(m => m.attributeName === 'required')[0];
            if (requiredAttMutation) {
                this.updateLabelRequiredFlag((_a = this.spiedElement) === null || _a === void 0 ? void 0 : _a.hasAttribute('required'), label);
            }
        });
        if (this.spiedElement) {
            this.observer.observe(this.spiedElement, { attributes: true });
        }
        const isRequired = (_a = this.spiedElement) === null || _a === void 0 ? void 0 : _a.hasAttribute('required');
        this.updateLabelRequiredFlag(isRequired, label);
    }
    initSpiedElement() {
        var _a, _b;
        const SUPPORTED_COMPONENTS = ['wcs-input', 'wcs-select', 'wcs-native-select', 'wcs-textarea', 'wcs-radio-group', 'wcs-switch', 'wcs-checkbox', 'wcs-native-select', 'wcs-counter'];
        this.spiedElement = (_a = this.el.shadowRoot.querySelector('slot:not([name])')) === null || _a === void 0 ? void 0 : _a.assignedElements().filter(n => [...SUPPORTED_COMPONENTS, 'SLOT'].map(x => x.toUpperCase()).indexOf(n.nodeName) !== -1)[0];
        // If the component is used in another web component
        if (((_b = this.spiedElement) === null || _b === void 0 ? void 0 : _b.tagName) === 'SLOT') {
            this.spiedElement = (this.spiedElement
                .assignedElements()
                .filter(n => SUPPORTED_COMPONENTS.map(x => x.toUpperCase()).indexOf(n.nodeName) !== -1)[0]);
        }
        if (!this.spiedElement) {
            // tslint:disable-next-line:no-console
            console.warn('Form-field component support only ' + SUPPORTED_COMPONENTS.toString() + '. Some features may not work with the provided component.');
            return;
        }
    }
    async updateAriaAttributes() {
        if (mutableAriaAttribute.isMutableAriaAttribute(this.spiedElement)) {
            const ariaLabelParts = [];
            if (controlComponentInterface.isControlComponentWithLabel(this.spiedElement)) {
                const innerLabel = await this.spiedElement.getLabel();
                const combinedLabel = `${this.label || ''} ${innerLabel || ''}`.trim();
                if (combinedLabel) {
                    ariaLabelParts.push(helpers.normalizeWhitespace(combinedLabel));
                }
            }
            else {
                if (this.label) {
                    ariaLabelParts.push(helpers.normalizeWhitespace(this.label));
                }
            }
            if (this.description) {
                ariaLabelParts.push(helpers.normalizeWhitespace(this.description));
            }
            // Sur les autres DS, généralement seul l'erreur est affichée et pas avec la description
            if (this.isError) {
                this.spiedElement.setAriaAttribute('aria-invalid', 'true');
                if (this.error) {
                    ariaLabelParts.push(helpers.normalizeWhitespace(this.error));
                }
            }
            else {
                this.spiedElement.setAriaAttribute('aria-invalid', 'false');
            }
            this.spiedElement.setAriaAttribute('aria-label', ariaLabelParts.length > 0 ? ariaLabelParts.join(' ') : null);
        }
    }
    get label() {
        var _a;
        return ((_a = this.el.querySelector('wcs-label')) === null || _a === void 0 ? void 0 : _a.textContent) || null;
    }
    get description() {
        var _a;
        return ((_a = this.el.querySelector('wcs-hint')) === null || _a === void 0 ? void 0 : _a.textContent) || null;
    }
    get error() {
        var _a;
        return ((_a = this.el.querySelector('wcs-error')) === null || _a === void 0 ? void 0 : _a.textContent) || null;
    }
    updateLabelRequiredFlag(isRequired, label) {
        if (isRequired && label) {
            label.setAttribute('required', 'true');
        }
        else if (!isRequired && label) {
            label.removeAttribute('required');
        }
    }
    disconnectedCallback() {
        var _a;
        (_a = this.observer) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
    render() {
        let classes = '';
        const isError = this.isError;
        if (this.hasSuffix) {
            classes += ' has-suffix';
        }
        if (this.hasPrefix) {
            classes += ' has-prefix';
        }
        return (index.h(index.Host, { key: 'd8a5d2023add393b0a31173351a3d16d9fa0b1a6', class: classes }, index.h("slot", { key: '3f347f4dce239c0106fbbe52bdc217fa37c05d01', name: "label" }), index.h("div", { key: 'd6cb92104d72530059ecb9a383ff832afb0c2141', class: "input-container" }, index.h("slot", { key: '8be28f721ff351d41dced80c97c0e34337703d0e', name: "prefix" }), index.h("slot", { key: 'cc58d463877a1e8513736a987286e965870e096d', onSlotchange: () => this.onFormInputSlotChange() }), index.h("slot", { key: '898709cfcf0ae1cd43dabd55547d62199d6230c9', name: "suffix" })), isError ? (index.h("slot", { name: "error" })) : '', index.h("slot", { key: 'aaf2d35dfbdfda47b440f96d7f9aa22cb09f6a06', name: "messages" })));
    }
    onFormInputSlotChange() {
        this.initSpiedElement();
        this.updateAriaAttributes();
        this.addRequiredMarkerToLabel();
        this.updateErrorStateOnInput(this.isError);
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "isError": ["isErrorChange"]
    }; }
};
FormField.style = WcsFormFieldStyle0;

const labelCss = ":host{--wcs-label-font-weight:var(--wcs-semantic-font-weight-book);--wcs-label-color:var(--wcs-semantic-color-text-primary);--wcs-label-required-marker-color:var(--wcs-semantic-color-text-critical);--wcs-label-gap:var(--wcs-semantic-spacing-small);font-weight:var(--wcs-label-font-weight)}:host([required])>label::after{font-weight:var(--wcs-label-font-weight);color:var(--wcs-label-required-marker-color);content:\" *\"}label{display:inline-block;color:var(--wcs-label-color);font-weight:var(--wcs-label-font-weight)}label ::slotted(wcs-mat-icon){display:inline;vertical-align:middle;margin-left:var(--wcs-label-gap)}";
const WcsLabelStyle0 = labelCss;

const LABEL_INHERITED_ATTRS = ['title'];
const Label = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.inheritedAttributes = {};
        this.required = false;
    }
    componentWillLoad() {
        this.inheritedAttributes = Object.assign(Object.assign({}, helpers.inheritAriaAttributes(this.el)), helpers.inheritAttributes(this.el, LABEL_INHERITED_ATTRS));
    }
    async setAriaAttribute(attr, value) {
        helpers.setOrRemoveAttribute(this.nativeLabel, attr, value);
    }
    render() {
        return (index.h(index.Host, { key: '62f8ca37637cc792483f24476dbbd63ff3c077e5', slot: "label" }, index.h("label", Object.assign({ key: '3cef9a517d57652b75af3157d2c96a34693b258f', ref: (el) => this.nativeLabel = el }, this.inheritedAttributes), index.h("slot", { key: 'a614b379b45ac3d4cc1d58c45d39b64c0312c1d7' }))));
    }
    get el() { return index.getElement(this); }
};
Label.style = WcsLabelStyle0;

exports.wcs_error = Label$1;
exports.wcs_form_field = FormField;
exports.wcs_label = Label;

//# sourceMappingURL=wcs-error_3.cjs.entry.js.map