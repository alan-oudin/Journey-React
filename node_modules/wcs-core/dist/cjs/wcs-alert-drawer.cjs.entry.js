'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6f0140d8.js');
const helpers = require('./helpers-2f1a8ddc.js');

const alertDrawerCss = "@keyframes slide-in-bottom{from{transform:translateY(100%)}to{transform:translateY(0%)}}@keyframes slide-out{from{opacity:1}to{opacity:0}}@keyframes slide-in-top{from{opacity:0;transform:translateY(-100%)}to{opacity:1;transform:translateY(0%)}}:host{--wcs-alert-drawer-gap:var(--wcs-semantic-spacing-base);--wcs-alert-drawer-margin-horizontal:var(--wcs-semantic-spacing-base);--wcs-alert-drawer-margin-vertical:var(--wcs-semantic-spacing-base);--wcs-alert-drawer-min-width:400px;--wcs-alert-drawer-hide-alert-animation-duration:var(--wcs-semantic-motion-duration-feedback-slow);position:fixed;z-index:99999;width:fit-content}:host wcs-alert{--wcs-alert-min-width:var(--wcs-alert-drawer-min-width)}:host wcs-alert:not([show]){animation-duration:var(--wcs-alert-drawer-hide-alert-animation-duration);animation-timing-function:ease;animation-name:slide-out;animation-fill-mode:forwards}@media (prefers-reduced-motion: reduce){:host wcs-alert:not([show]){animation:none}}:host #alerts-container{display:flex;flex-direction:column;gap:var(--wcs-alert-drawer-gap)}@media (max-width: 575px){:host{left:50% !important;transform:translate(-50%, 0);width:calc(100% - 2 * var(--wcs-alert-drawer-margin-horizontal))}:host wcs-alert{--wcs-alert-min-width:100%}}:host([position=top]),:host([position=top-left]),:host([position=top-right]){top:var(--wcs-alert-drawer-margin-vertical);flex-direction:column-reverse}:host([position=top]) wcs-alert[show],:host([position=top-left]) wcs-alert[show],:host([position=top-right]) wcs-alert[show]{animation:slide-in-top var(--wcs-alert-drawer-hide-alert-animation-duration) ease}@media (prefers-reduced-motion: reduce){:host([position=top]) wcs-alert[show],:host([position=top-left]) wcs-alert[show],:host([position=top-right]) wcs-alert[show]{animation:none}}:host([position=bottom]),:host([position=bottom-left]),:host([position=bottom-right]){bottom:var(--wcs-alert-drawer-margin-vertical)}:host([position=bottom]) wcs-alert[show],:host([position=bottom-left]) wcs-alert[show],:host([position=bottom-right]) wcs-alert[show]{animation:slide-in-bottom var(--wcs-alert-drawer-hide-alert-animation-duration) ease}@media (prefers-reduced-motion: reduce){:host([position=bottom]) wcs-alert[show],:host([position=bottom-left]) wcs-alert[show],:host([position=bottom-right]) wcs-alert[show]{animation:none}}:host([position=top-right]),:host([position=bottom-right]){right:var(--wcs-alert-drawer-margin-horizontal)}:host([position=top-left]),:host([position=bottom-left]){left:var(--wcs-alert-drawer-margin-horizontal)}:host([position=bottom]),:host([position=top]){left:50%;transform:translate(-50%, 0)}";
const WcsAlertDrawerStyle0 = alertDrawerCss;

const AlertDrawer = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /*
         https://www.reddit.com/r/Frontend/comments/1ato11w/comment/kqz4gt8/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
         https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef
         */
        this.alertEventListeners = new WeakMap();
        this.timeoutId = undefined;
        this.userPrefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        /**
         * Handles the dismissal of an alert
         * @param alert The alert element
         */
        this.close = (alert) => {
            if (!this.userPrefersReducedMotion) {
                this.timeoutId = setTimeout(() => {
                    alert.remove();
                    // Cleanup the event listener reference
                    this.alertEventListeners.delete(alert);
                }, helpers.parseCssTimeValueToMilliseconds(window.getComputedStyle(this.el).getPropertyValue("--wcs-alert-drawer-hide-alert-animation-duration")) || 300);
            }
            else {
                // If the user has reduced motion preference, remove the alert immediately
                alert.remove();
                // Cleanup the event listener reference
                this.alertEventListeners.delete(alert);
            }
        };
        this.position = 'bottom-right';
        this.timeout = 5000;
        this.showProgressBar = false;
    }
    /**
     * Method exposed on `wcs-alert-drawer` to show an alert programmatically via the JS API
     * @example
     * Plain javascript (example inside a script tag):
     * ```javascript
     *  document.querySelector('wcs-alert-drawer').show({
     *      title: 'Alert title',
     *      subtitle: 'Alert subtitle',
     *      intent: 'info',
     *      showProgressBar: true,
     *      timeout: 5000
     *  });
     * @param alert The alert to show
     */
    async show(alert) {
        this.alertsContainer.appendChild(this.renderToast(alert));
    }
    renderToast(alert) {
        var _a, _b;
        const alertElement = document.createElement('wcs-alert');
        alertElement.setAttribute('intent', alert.intent);
        // Uses the alert config if defined, otherwise falls back to the drawer default
        // as the showProgressBar is a boolean attribute, we need to set it to an empty string only if true
        if (((_a = alert.showProgressBar) !== null && _a !== void 0 ? _a : this.showProgressBar)) {
            alertElement.setAttribute('show-progress-bar', '');
        }
        // Uses the alert config if defined, otherwise falls back to the drawer default
        alertElement.setAttribute('timeout', String((_b = alert.timeout) !== null && _b !== void 0 ? _b : this.timeout));
        const listener = () => this.close(alertElement);
        this.alertEventListeners.set(alertElement, listener);
        alertElement.addEventListener("wcsAlertDismiss", listener);
        const title = document.createElement('span');
        title.setAttribute('slot', 'title');
        title.textContent = alert.title;
        alertElement.appendChild(title);
        const subtitle = document.createElement('span');
        subtitle.setAttribute('slot', 'subtitle');
        subtitle.textContent = alert.subtitle;
        alertElement.appendChild(subtitle);
        return alertElement;
    }
    render() {
        // https://www.clever-cloud.com/doc/clever-components/?path=/docs/%F0%9F%9B%A0-toast-cc-toaster--docs#about-accessibility
        return (index.h(index.Host, { key: '18a68f9f7727b29da85e0852dc87de30d79581ed', role: "region", "aria-label": "Informations", "aria-live": "polite", "aria-atomic": "true" }, index.h("div", { key: 'ee0d30077439b991e5ff6eb02b24873f015dce5e', ref: (el) => this.alertsContainer = el, id: "alerts-container" })));
    }
    disconnectedCallback() {
        this.alertEventListeners = new WeakMap(); // Clear the event listeners, weakmap is not iterable
        clearTimeout(this.timeoutId);
    }
    get el() { return index.getElement(this); }
};
AlertDrawer.style = WcsAlertDrawerStyle0;

exports.wcs_alert_drawer = AlertDrawer;

//# sourceMappingURL=wcs-alert-drawer.cjs.entry.js.map