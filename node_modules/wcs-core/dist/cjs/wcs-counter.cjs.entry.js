'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6f0140d8.js');
const helpers = require('./helpers-2f1a8ddc.js');

const counterCss = "@keyframes spin-animation-up{0%{transform:translateY(0);transform-origin:center;opacity:1}50%{opacity:0.5}100%{transform:translateY(30px);transform-origin:center;opacity:1}}@keyframes spin-animation-down{0%{transform:translateY(0);transform-origin:center;opacity:1}50%{opacity:0.5}100%{transform:translateY(-30px);transform-origin:center;opacity:1}}:host{--wcs-counter-border-radius:var(--wcs-semantic-border-radius-full);--wcs-counter-value-color-default:var(--wcs-semantic-color-text-primary);--wcs-counter-value-color-disabled:var(--wcs-semantic-color-text-tertiary);--wcs-counter-font-weight:var(--wcs-semantic-font-weight-heavy);--wcs-counter-height-m:var(--wcs-semantic-size-m);--wcs-counter-height-l:var(--wcs-semantic-size-l);--wcs-counter-font-size-m:var(--wcs-semantic-font-size-m);--wcs-counter-font-size-l:var(--wcs-semantic-font-size-l);--wcs-counter-padding-m:var(--wcs-semantic-spacing-small);--wcs-counter-padding-l:var(--wcs-semantic-spacing-base);--wcs-counter-background-color:var(--wcs-semantic-color-background-surface-secondary);--wcs-counter-gap-size-m:calc(1.5 * var(--wcs-semantic-spacing-base));--wcs-counter-gap-size-l:calc(2 * var(--wcs-semantic-spacing-base));--wcs-counter-outline-color-focus:var(--wcs-semantic-color-border-focus-base);--wcs-counter-transition-duration:var(--wcs-semantic-motion-duration-feedback-base);--wcs-counter-padding:var(--wcs-counter-padding-m);--wcs-counter-height:var(--wcs-counter-height-m);--wcs-counter-font-size:var(--wcs-counter-font-size-m);--wcs-counter-gap:var(--wcs-counter-gap-size-m);display:flex}:host .counter{box-sizing:border-box;height:var(--wcs-counter-height);font-family:var(--wcs-font-sans-serif);font-size:var(--wcs-counter-font-size);font-weight:var(--wcs-counter-font-weight);color:var(--wcs-counter-value-color-default);display:flex;align-items:center;padding:var(--wcs-counter-padding);width:fit-content;overflow:hidden;border-radius:var(--wcs-counter-border-radius);background-color:var(--wcs-counter-background-color);background-clip:padding-box;gap:var(--wcs-counter-gap)}:host .counter:focus-within{outline:none}:host .counter:has(.current-value:focus-visible){outline:var(--wcs-semantic-border-width-large) dashed var(--wcs-counter-outline-color-focus);outline-offset:0;border-radius:var(--wcs-counter-border-radius)}@supports not selector(&:has(.current-value:focus-visible)){:host .counter:focus-within{outline:var(--wcs-semantic-border-width-large) dashed var(--wcs-counter-outline-color-focus);outline-offset:0;border-radius:var(--wcs-counter-border-radius)}}:host .counter-container{height:var(--wcs-counter-height);display:flex;flex-direction:column;align-items:center;justify-content:center;position:relative}:host .outliers{position:absolute}:host #outlier-down{top:calc(var(--wcs-counter-height) / 2 * -1)}:host #outlier-up{bottom:calc(var(--wcs-counter-height) / 2 * -1)}:host .current-value{outline:none}:host .animate-up{animation:spin-animation-up var(--wcs-counter-transition-duration) ease-in-out}:host .animate-down{animation:spin-animation-down var(--wcs-counter-transition-duration) ease-in-out}:host [hidden]{opacity:0}:host([size=m]){--wcs-counter-padding:var(--wcs-counter-padding-m);--wcs-counter-height:var(--wcs-counter-height-m);--wcs-counter-font-size:var(--wcs-counter-font-size-m);--wcs-counter-gap:var(--wcs-counter-gap-size-m)}:host([size=l]){--wcs-counter-padding:var(--wcs-counter-padding-l);--wcs-counter-height:var(--wcs-counter-height-l);--wcs-counter-font-size:var(--wcs-counter-font-size-l);--wcs-counter-gap:var(--wcs-counter-gap-size-l)}:host([disabled]){cursor:not-allowed}:host([disabled]) .counter{color:var(--wcs-counter-value-color-disabled)}";
const WcsCounterStyle0 = counterCss;

const COUNTER_INHERITED_ATTRS = ['tabindex', 'title'];
const Counter = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.wcsChange = index.createEvent(this, "wcsChange", 7);
        this.wcsBlur = index.createEvent(this, "wcsBlur", 7);
        this.inheritedAttributes = {};
        /**
         * Default animation duration, in milliseconds
         * @private
         */
        this.ANIMATION_DURATION = 150;
        this.animateRunning = false;
        this.handleDecrement = () => {
            if (this.disabled)
                return;
            if (this.min === undefined || this.value > this.min) {
                // we set animateRunning here to prevent the watch method on value prop from affecting the displayed value
                // before the animation runs.
                this.animateRunning = true;
                this.value -= this.step;
                this.notifyChange();
                this.animate('up');
            }
        };
        this.handleIncrement = () => {
            if (this.disabled)
                return;
            if (this.max === undefined || this.value < this.max) {
                // we set animateRunning here to prevent the watch method on value prop from affecting the displayed value
                // before the animation runs.
                this.animateRunning = true;
                this.value += this.step;
                this.notifyChange();
                this.animate('down');
            }
        };
        this.animate = (direction) => {
            // In case someone call animate function, we want ensured that animateRunning is set to true to prevent other 
            // method to mutate the displayedValue.
            this.animateRunning = true;
            const outliers = Array.from(this.counterContainer.children)
                .filter((span) => span.classList.contains('outliers'));
            this.counterContainer.classList.add('animate-' + direction);
            outliers.forEach((span) => {
                span.hidden = false;
            });
            setTimeout(() => {
                this.counterContainer.classList.remove('animate-' + direction);
                outliers.forEach((span) => {
                    span.hidden = true;
                });
                this.displayedValue = this.value;
                this.animateRunning = false;
            }, this.ANIMATION_DURATION - 20);
        };
        this.size = 'm';
        this.label = undefined;
        this.disabled = false;
        this.min = undefined;
        this.max = undefined;
        this.step = 1;
        this.value = undefined;
        this.displayedValue = undefined;
    }
    componentWillLoad() {
        this.handleValueChange();
        this.inheritedAttributes = Object.assign(Object.assign({}, helpers.inheritAriaAttributes(this.el)), helpers.inheritAttributes(this.el, COUNTER_INHERITED_ATTRS));
    }
    componentDidRender() {
        var _a, _b;
        this.ANIMATION_DURATION = (_b = helpers.parseCssTimeValueToMilliseconds((_a = window.getComputedStyle(this.el).getPropertyValue('--wcs-counter-transition-duration')) !== null && _a !== void 0 ? _a : '150ms')) !== null && _b !== void 0 ? _b : 150;
    }
    async setAriaAttribute(attr, value) {
        helpers.setOrRemoveAttribute(this.spinButton, attr, value);
    }
    /**
     * Current value change => handle event and interval
     */
    valueChange(newVal, oldVal) {
        if (oldVal === newVal)
            return;
        this.handleValueChange();
    }
    handleValueChange() {
        this.setMinimumIfValueIsUndefinedOrNull();
        this.ensureValueIsNotOutOfMinMax();
        this.updateDisplayValueIfNoAnimationRunning();
    }
    updateDisplayValueIfNoAnimationRunning() {
        if (!this.animateRunning) {
            this.displayedValue = this.value;
        }
    }
    ensureValueIsNotOutOfMinMax() {
        if (this.max !== undefined && this.value > this.max) {
            this.value = this.max;
        }
        else if (this.min !== undefined && this.value < this.min) {
            this.value = this.min;
        }
    }
    setMinimumIfValueIsUndefinedOrNull() {
        var _a;
        if (this.value === undefined || this.value === null) {
            this.value = (_a = this.min) !== null && _a !== void 0 ? _a : 0;
        }
    }
    onKeyDown(_event) {
        if (this.disabled)
            return;
        if (helpers.isKeyup(_event)) {
            _event.preventDefault();
            this.handleIncrement();
        }
        if (helpers.isKeydown(_event)) {
            _event.preventDefault();
            this.handleDecrement();
        }
        if (helpers.isHomeKey(_event)) {
            _event.preventDefault();
            if (this.min != null) {
                this.value = this.min;
                this.displayedValue = this.value;
                this.notifyChange();
            }
        }
        if (helpers.isEndKey(_event)) {
            _event.preventDefault();
            if (this.max != null) {
                this.value = this.max;
                this.displayedValue = this.value;
                this.notifyChange();
            }
        }
    }
    notifyChange() {
        this.wcsChange.emit({
            value: this.value
        });
    }
    render() {
        return (index.h(index.Host, { key: '6f1d46e231cc1f88a92a2faa0122e1ed7b9dd834' }, index.h("div", { key: 'c3ed2c944c2a8f61ab862411b1d503a84ac37ae4', class: "counter" }, index.h("wcs-button", { key: 'c0d0d41e07a99ef0730b22d029529e629ff2f8d3', class: "wcs-primary", shape: "round", size: "s", tabindex: -1, onClick: () => this.handleDecrement(), onBlur: (event) => this.wcsBlur.emit(event), disabled: this.disabled || this.value === this.min }, index.h("wcs-mat-icon", { key: '5003db6a007f8ede51d567a76ea18160fdb60949', icon: "remove", size: "s" })), index.h("div", { key: 'ae3b0ca61a95fe908583df73748b7e7d19242fd0', class: "counter-container", ref: input => this.counterContainer = input }, index.h("span", { key: '499a0d0ff7f38fcae6664b118991aeb39f5d6034', id: "outlier-down", class: "outliers", hidden: true, "aria-hidden": "true" }, this.displayedValue - this.step), index.h("span", Object.assign({ key: '62cab421b796106f0b2957e4d8445266bd6ba754', tabindex: this.disabled ? -1 : 0, role: "spinbutton", ref: (el) => this.spinButton = el, class: "current-value", onBlur: (event) => this.wcsBlur.emit(event), onKeyDown: (event) => this.onKeyDown(event), "aria-disabled": this.disabled ? 'true' : null, "aria-valuenow": this.value, "aria-valuetext": this.value, "aria-valuemin": this.min, "aria-valuemax": this.max, "aria-label": this.label }, this.inheritedAttributes), this.displayedValue), index.h("span", { key: '339b6949d2b64262085f7bda19897f9533166cb4', id: "outlier-up", class: "outliers", hidden: true, "aria-hidden": "true" }, this.displayedValue + this.step)), index.h("wcs-button", { key: 'ee77cee6c9d08225c1844d1c4703ea6868c054da', class: "wcs-primary", shape: "round", size: "s", tabindex: -1, onClick: () => this.handleIncrement(), onBlur: (event) => this.wcsBlur.emit(event), disabled: this.disabled || this.value === this.max }, index.h("wcs-mat-icon", { key: 'b1b6cc395186ee871801d47ad2b9b62791f64b29', icon: "add", size: "s" })))));
    }
    static get delegatesFocus() { return true; }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "value": ["valueChange"]
    }; }
};
Counter.style = WcsCounterStyle0;

exports.wcs_counter = Counter;

//# sourceMappingURL=wcs-counter.cjs.entry.js.map