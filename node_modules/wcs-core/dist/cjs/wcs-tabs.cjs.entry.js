'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-6f0140d8.js');
const helpers = require('./helpers-2f1a8ddc.js');
const selectArrow = require('./select-arrow-a8a47fe4.js');
const popper = require('./popper-8d6e7fca.js');

const tabsCss = ":host{--wcs-tabs-indicator-height:calc(var(--wcs-semantic-size-base) / 2);--wcs-tabs-indicator-background-color:var(--wcs-semantic-color-foreground-action-secondary-default);--wcs-tabs-indicator-border-radius:var(--wcs-semantic-border-radius-full);--wcs-tabs-color-default:var(--wcs-semantic-color-foreground-action-secondary-default);--wcs-tabs-color-hover:var(--wcs-semantic-color-foreground-action-secondary-hover);--wcs-tabs-color-press:var(--wcs-semantic-color-foreground-action-secondary-press);--wcs-tabs-color-selected:var(--wcs-semantic-color-foreground-action-secondary-default);--wcs-tabs-background-color-focus:var(--wcs-semantic-color-background-action-secondary-focus);--wcs-tabs-background-color-hover:var(--wcs-semantic-color-background-action-secondary-hover);--wcs-tabs-background-color-press:var(--wcs-semantic-color-background-action-secondary-press);--wcs-tabs-border-radius:var(--wcs-semantic-border-radius-base);--wcs-tabs-border-color-focus:var(--wcs-semantic-color-border-focus-base);--wcs-tabs-font-weight-default:var(--wcs-semantic-font-weight-roman);--wcs-tabs-font-weight-selected:var(--wcs-semantic-font-weight-roman);--wcs-tabs-padding-top:var(--wcs-semantic-spacing-base);--wcs-tabs-padding-right:var(--wcs-semantic-spacing-large);--wcs-tabs-padding-bottom:calc(var(--wcs-semantic-spacing-base) + var(--wcs-tabs-indicator-height));--wcs-tabs-padding-left:var(--wcs-semantic-spacing-large);--wcs-tabs-gutter-border-width:var(--wcs-semantic-border-width-default);--wcs-tabs-gutter-background-color:var(--wcs-semantic-color-border-secondary);--wcs-tabs-headers-border-bottom:var(--wcs-tabs-gutter-border-width) solid var(--wcs-tabs-gutter-background-color);--wcs-tabs-mobile-breakpoint:var(--wcs-phone-breakpoint-max-width, 575px);--wcs-tabs-mobile-overlay-border-width:var(--wcs-semantic-border-width-default);--wcs-tabs-mobile-overlay-border-color:var(--wcs-semantic-color-border-secondary);--wcs-tabs-mobile-overlay-background-color:var(--wcs-semantic-color-background-surface-primary);--wcs-tabs-mobile-overlay-padding:var(--wcs-semantic-spacing-base);--wcs-tabs-mobile-overlay-border-radius:var(--wcs-semantic-border-radius-base);--wcs-tabs-mobile-gap:var(--wcs-semantic-spacing-base);--wcs-tabs-mobile-padding:0 var(--wcs-semantic-spacing-base);--wcs-tabs-mobile-height:var(--wcs-semantic-size-m);--wcs-tabs-mobile-font-weight-default:var(--wcs-semantic-font-weight-medium);--wcs-tabs-mobile-font-weight-active:var(--wcs-semantic-font-weight-black);--wcs-tabs-mobile-font-size:var(--wcs-semantic-font-size-base);--wcs-tabs-mobile-color:var(--wcs-semantic-color-text-primary);--wcs-tabs-mobile-background-color-default:var(--wcs-semantic-color-background-action-secondary-default);--wcs-tabs-mobile-background-color-focus:var(--wcs-semantic-color-background-action-secondary-focus);--wcs-tabs-mobile-background-color-hover:var(--wcs-semantic-color-background-action-secondary-hover);--wcs-tabs-mobile-background-color-press:var(--wcs-semantic-color-background-action-secondary-press);--wcs-tabs-mobile-border-radius:var(--wcs-semantic-border-radius-base);--wcs-tabs-transition-duration:var(--wcs-semantic-motion-duration-feedback-base);display:block}:host([align=start]) .wcs-tabs-headers{justify-content:start}:host([align=end]) .wcs-tabs-headers{justify-content:end}:host([align=center]) .wcs-tabs-headers{justify-content:center}.wcs-tabs-headers{overflow-x:auto;display:flex;flex-direction:row;position:relative}:host([gutter]) .wcs-tabs-headers{border-bottom:var(--wcs-tabs-headers-border-bottom)}.wcs-tab-header{position:relative;padding:var(--wcs-tabs-padding-top) var(--wcs-tabs-padding-right) var(--wcs-tabs-padding-bottom) var(--wcs-tabs-padding-left);border-radius:var(--wcs-tabs-border-radius) var(--wcs-tabs-border-radius) 0 0;display:flex;flex-shrink:0;align-items:center;justify-content:center;cursor:pointer;outline:none;transition:all var(--wcs-tabs-transition-duration) ease-out}.wcs-tab-header span{text-align:center;color:var(--wcs-tabs-color-default);font-size:1rem;font-weight:var(--wcs-tabs-font-weight-default)}.wcs-tab-header:hover{background-color:var(--wcs-tabs-background-color-hover)}.wcs-tab-header:hover span{color:var(--wcs-tabs-color-hover)}.wcs-tab-header:focus-visible>span{outline:var(--wcs-semantic-border-width-large) dashed var(--wcs-tabs-border-color-focus);outline-offset:var(--wcs-semantic-spacing-small);border-radius:0.1rem}.wcs-tab-header:active{background-color:var(--wcs-tabs-background-color-press)}.wcs-tab-header:active span{color:var(--wcs-tabs-color-press)}.active span{font-weight:var(--wcs-tabs-font-weight-selected);color:var(--wcs-tabs-color-selected)}.active::after{position:absolute;bottom:0;left:0;width:100%;content:\"\";height:var(--wcs-tabs-indicator-height);background-color:var(--wcs-tabs-indicator-background-color);border-radius:var(--wcs-tabs-indicator-border-radius)}button{background-color:inherit}#mobile-button{border:0;font-family:var(--wcs-font-sans-serif), sans-serif;text-align:center;color:var(--wcs-tabs-color-default);font-size:1rem;font-weight:var(--wcs-tabs-font-weight-default);padding-right:calc(0.75 * var(--wcs-tabs-padding-right));}#mobile-button span{display:flex;align-items:center}#mobile-button .arrow{fill:var(--wcs-tabs-color-default)}#mobile-button:hover .arrow{fill:var(--wcs-tabs-color-hover)}#mobile-button:active .arrow{fill:var(--wcs-tabs-color-press)}.popover{display:none;z-index:9999;overflow:hidden;border:var(--wcs-tabs-mobile-overlay-border-width) solid var(--wcs-tabs-mobile-overlay-border-color);border-radius:var(--wcs-tabs-mobile-overlay-border-radius);padding:var(--wcs-tabs-mobile-overlay-padding);background-color:var(--wcs-tabs-mobile-overlay-background-color)}.popover [role=tab]{display:flex;flex-direction:row;align-items:center;cursor:pointer;user-select:none;gap:var(--wcs-tabs-mobile-gap);padding:var(--wcs-tabs-mobile-padding);height:var(--wcs-tabs-mobile-height);font-weight:var(--wcs-tabs-mobile-font-weight-default);font-size:var(--wcs-tabs-mobile-font-size);color:var(--wcs-tabs-mobile-color);background-color:var(--wcs-tabs-mobile-background-color);border-radius:var(--wcs-tabs-mobile-border-radius);transition-duration:var(--wcs-tabs-transition-duration);transition-property:background-color, color;transition-timing-function:ease;overflow:hidden;white-space:nowrap}.popover [role=tab]:focus{background-color:var(--wcs-tabs-mobile-background-color-focus)}.popover [role=tab]:focus-visible{outline:var(--wcs-semantic-border-width-large) dashed var(--wcs-semantic-color-border-focus-base);outline-offset:0;border-radius:var(--wcs-tabs-mobile-border-radius)}.popover [role=tab]:hover{background-color:var(--wcs-tabs-mobile-background-color-hover)}.popover [role=tab]:active{background-color:var(--wcs-tabs-mobile-background-color-press)}.popover .mobile-active{font-weight:var(--wcs-tabs-mobile-font-weight-active)}.show{display:block}";
const WcsTabsStyle0 = tabsCss;

const TABS_INHERITED_ATTRS = [];
const Tabs = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.tabChange = index.createEvent(this, "tabChange", 7);
        this.inheritedAttributes = {};
        this.tabsId = tabsId++;
        this.align = 'start';
        this.selectedIndex = 0;
        this.selectedKey = undefined;
        this.headersOnly = false;
        this.gutter = undefined;
        this.description = undefined;
        this.mobileOverlayExpanded = false;
        this.mobile = false;
        this.headers = [];
        this.currentActiveTabIndex = 0;
    }
    selectedIndexChanged(newValue) {
        this.currentActiveTabIndex = newValue;
    }
    selectedTabkeyChanged(newValue) {
        this.updateCurrentActiveIndexByTabKey(newValue);
    }
    onMobileChange(newValue) {
        // Remove the popper instance when switching from mobile to desktop for performance
        if (!newValue) {
            this.popper.destroy();
            this.popper = null;
        }
    }
    emitActiveTabChange() {
        this.tabChange.emit({
            tabName: this.headers[this.currentActiveTabIndex],
            tabIndex: this.currentActiveTabIndex,
            selectedKey: this.tabs[this.currentActiveTabIndex].itemKey
        });
    }
    updateCurrentActiveIndexByTabKey(newValue) {
        for (let i = 0; i < this.tabs.length; i++) {
            const tab = this.tabs[i];
            if (tab.itemKey === newValue) {
                this.currentActiveTabIndex = i;
            }
        }
    }
    onTabLoaded() {
        this.refreshHeaders();
    }
    onWindowClickEvent(event) {
        if (this.mobile) {
            const clickedOnMobileButtonOrOverlay = event.composedPath().some(el => el === this.mobileButton || el === this.popoverDiv);
            if (this.mobileOverlayExpanded && !clickedOnMobileButtonOrOverlay) {
                this.mobileOverlayExpanded = false;
            }
        }
    }
    /**
     * Init resize observer for mobile
     */
    tabsDidLoadWithResizeObserver() {
        const smallBreakpoint = getComputedStyle(this.el).getPropertyValue('--wcs-tabs-mobile-breakpoint') || '575px';
        const smallBreakpointValue = parseInt(smallBreakpoint, 10);
        return new ResizeObserver(entry => {
            const cr = entry[0].contentRect;
            const paddingRight = cr.right - cr.width;
            const paddingLeft = cr.left;
            // Switch to mobile mode if the screen is smaller than the breakpoint
            this.mobile = cr.width <= smallBreakpointValue - (paddingLeft + paddingRight);
        });
    }
    initMobileOverlay() {
        this.popper = popper.createPopper(this.mobileButton, this.popoverDiv, {
            placement: 'bottom-start',
            strategy: 'fixed',
            modifiers: [
                {
                    name: 'offset',
                    options: {
                        offset: [0, 8]
                    }
                }
            ]
        });
    }
    componentDidLoad() {
        this.putTabsInCorrectDivIfTheyAreNot();
        this.refreshHeaders();
        if (this.selectedIndex) {
            this.currentActiveTabIndex = this.selectedIndex;
        }
        if (this.selectedKey) {
            this.updateCurrentActiveIndexByTabKey(this.selectedKey);
        }
        if (!this.resizeObserver) {
            this.resizeObserver = this.tabsDidLoadWithResizeObserver();
            this.resizeObserver.observe(document.body);
        }
    }
    componentDidRender() {
        if (this.mobile) {
            if (!this.popper) {
                this.initMobileOverlay();
            }
            else {
                this.popper.update();
            }
        }
    }
    // XXX: Firefox < 63
    putTabsInCorrectDivIfTheyAreNot() {
        const tabDiv = this.el.shadowRoot.querySelector('.wcs-tabs');
        if (tabDiv.querySelector('slot') === null) {
            Array.from(this.el.querySelectorAll('wcs-tab'))
                .filter(node => node.parentNode !== tabDiv)
                .forEach(tab => {
                if (tab.parentElement.isEqualNode(this.el)) {
                    this.el.removeChild(tab);
                    tabDiv.appendChild(tab);
                }
            });
        }
    }
    handleKeyDown(ev, tabIndex) {
        var _a, _b;
        const target = ev.target;
        switch (ev.key) {
            case ' ':
            case 'Enter': {
                this.selectTabAndEmitChangeEvent(tabIndex);
                ev.preventDefault();
                break;
            }
            case 'ArrowLeft': {
                if ((_a = target.previousElementSibling) === null || _a === void 0 ? void 0 : _a.classList.contains('wcs-tab-header')) {
                    target.previousElementSibling.focus();
                    ev.preventDefault();
                }
                break;
            }
            case 'ArrowRight': {
                if ((_b = target.nextElementSibling) === null || _b === void 0 ? void 0 : _b.classList.contains('wcs-tab-header')) {
                    target.nextElementSibling.focus();
                    ev.preventDefault();
                }
                break;
            }
            case 'Home': {
                const firstTab = this.el.shadowRoot.querySelector('.wcs-tab-header:first-child');
                if (firstTab) {
                    firstTab.focus();
                    ev.preventDefault();
                }
                break;
            }
            case 'End': {
                const lastTab = this.el.shadowRoot.querySelector('.wcs-tab-header:last-child');
                if (lastTab) {
                    lastTab.focus();
                    ev.preventDefault();
                }
                break;
            }
        }
    }
    handleKeyDownMobile(ev, tabIndex) {
        var _a, _b;
        const target = ev.target;
        switch (ev.key) {
            case ' ':
            case 'Enter': {
                this.selectTabAndEmitChangeEvent(tabIndex);
                ev.preventDefault();
                break;
            }
            case 'ArrowUp': {
                if ((_a = target.previousElementSibling) === null || _a === void 0 ? void 0 : _a.classList.contains('wcs-tab-header-mobile')) {
                    target.previousElementSibling.focus();
                    ev.preventDefault();
                }
                break;
            }
            case 'ArrowDown': {
                if ((_b = target.nextElementSibling) === null || _b === void 0 ? void 0 : _b.classList.contains('wcs-tab-header-mobile')) {
                    target.nextElementSibling.focus();
                    ev.preventDefault();
                }
                break;
            }
            case 'Home': {
                const firstTab = this.el.shadowRoot.querySelector('.wcs-tab-header-mobile:first-child');
                if (firstTab) {
                    firstTab.focus();
                    ev.preventDefault();
                }
                break;
            }
            case 'End': {
                const lastTab = this.el.shadowRoot.querySelector('.wcs-tab-header-mobile:last-child');
                if (lastTab) {
                    lastTab.focus();
                    ev.preventDefault();
                }
                break;
            }
            case 'Escape': {
                this.mobileOverlayExpanded = false;
                ev.preventDefault();
                break;
            }
        }
    }
    refreshHeaders() {
        this.headers = [];
        this.tabs
            .forEach(x => {
            this.headers.push(x.getAttribute('header'));
        });
    }
    get tabs() {
        var _a;
        const tabsEl = this.el.shadowRoot.querySelector('.wcs-tabs');
        // FIXME: problem with this selector being too greedy in ff < 63
        const tabs = this.el.shadowRoot.querySelectorAll('.wcs-tabs > wcs-tab');
        return tabs.length !== 0
            ? tabs
            : (tabsEl === null || tabsEl === void 0 ? void 0 : tabsEl.querySelector('slot'))
                ? (_a = tabsEl === null || tabsEl === void 0 ? void 0 : tabsEl.querySelector('slot')) === null || _a === void 0 ? void 0 : _a.assignedElements()
                : [];
    }
    selectTabAndEmitChangeEvent(index) {
        var _a;
        this.currentActiveTabIndex = index;
        this.emitActiveTabChange();
        if (this.mobile) {
            this.mobileOverlayExpanded = false;
            (_a = this.mobileButton) === null || _a === void 0 ? void 0 : _a.focus();
        }
    }
    componentWillUpdate() {
        if (!this.headersOnly) {
            this.updateTabVisibility();
        }
        else {
            this.hideAllTabsContent();
        }
    }
    componentWillLoad() {
        this.inheritedAttributes = Object.assign(Object.assign({}, helpers.inheritAriaAttributes(this.el)), helpers.inheritAttributes(this.el, TABS_INHERITED_ATTRS));
    }
    disconnectedCallback() {
        var _a;
        if (this.popper) {
            this.popper.destroy();
            this.popper = null;
        }
        (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
    async setAriaAttribute(attr, value) {
        helpers.setOrRemoveAttribute(this.mobile ? this.popoverDiv : this.nativeTablist, attr, value);
    }
    updateTabVisibility() {
        this.tabs.forEach((el, idx) => {
            if (idx !== this.currentActiveTabIndex) {
                el.hidden = true;
            }
            else {
                el.hidden = false;
            }
        });
    }
    hideAllTabsContent() {
        this.tabs.forEach((el) => el.hidden = true);
    }
    onMobileButtonClick() {
        this.mobileOverlayExpanded = !this.mobileOverlayExpanded;
        const tabElementToFocus = this.popoverDiv.querySelectorAll('[role=tab]')[this.currentActiveTabIndex];
        requestAnimationFrame(() => {
            tabElementToFocus === null || tabElementToFocus === void 0 ? void 0 : tabElementToFocus.focus();
        });
    }
    onMobileButtonKeyDown(ev) {
        if (ev.key === 'ArrowDown' || ev.key === 'ArrowUp') {
            this.onMobileButtonClick();
        }
    }
    mobileLayout() {
        return [
            index.h("button", { id: "mobile-button", class: "wcs-tab-header active", "aria-controls": "menu", role: "button", "aria-expanded": this.mobileOverlayExpanded ? 'true' : 'false', ref: el => this.mobileButton = el, onClick: () => this.onMobileButtonClick(), onKeyDown: (evt) => this.onMobileButtonKeyDown(evt), onBlur: ($event) => $event.stopImmediatePropagation() }, index.h("span", null, this.headers[this.currentActiveTabIndex], " ", index.h(selectArrow.SelectArrow, { up: this.mobileOverlayExpanded }))),
            index.h("div", Object.assign({ class: (this.mobileOverlayExpanded ? 'show ' : '') + 'popover', role: "tablist", id: "menu", "aria-label": this.description, "aria-orientation": "vertical", ref: el => this.popoverDiv = el, tabIndex: -1 }, this.inheritedAttributes), this.headers.map((header, idx) => index.h("div", { class: 'wcs-tab-header-mobile ' + (this.currentActiveTabIndex === idx ? 'mobile-active' : ''), onClick: () => this.selectTabAndEmitChangeEvent(idx), onKeyDown: evt => this.handleKeyDownMobile(evt, idx), tabIndex: this.currentActiveTabIndex === idx ? 0 : -1, role: "tab", id: `tabs-id-${this.tabsId}-tab-id-${idx}`, "aria-controls": `tabs-id-${this.tabsId}-tab-panel-${idx}`, "aria-label": header, "aria-selected": this.currentActiveTabIndex === idx ? 'true' : 'false' }, index.h("span", null, header))))
        ];
    }
    desktopLayout() {
        return (this.headers.map((header, idx) => index.h("div", { class: 'wcs-tab-header ' + (this.currentActiveTabIndex === idx ? 'active' : ''), onClick: () => this.selectTabAndEmitChangeEvent(idx), onKeyDown: evt => this.handleKeyDown(evt, idx), tabIndex: this.currentActiveTabIndex === idx ? 0 : -1, role: "tab", id: `tabs-id-${this.tabsId}-tab-id-${idx}`, "aria-controls": `tabs-id-${this.tabsId}-tab-panel-${idx}`, "aria-label": header, "aria-selected": this.currentActiveTabIndex === idx ? 'true' : 'false' }, index.h("span", null, header))));
    }
    render() {
        return (index.h(index.Host, { key: '072fa3551b320a6415c20a3107500f2bee2aa690' }, index.h("div", Object.assign({ key: '294008dc27c2ff694119c3ce136caf866a0802b3', class: "wcs-tabs-headers", role: this.mobile ? null : 'tablist', ref: (el) => (this.nativeTablist = el), "aria-orientation": this.mobile ? null : 'horizontal', "aria-label": this.mobile ? null : this.description }, (!this.mobile && this.inheritedAttributes)), this.mobile ? this.mobileLayout() : this.desktopLayout()), index.h("div", { key: 'd20bb48fe80434a6797c86d206a86d11081b92ea', class: "wcs-tabs" }, index.h("slot", { key: 'd4a31047e41627dc9c2cfb63f201e5e7ddc40f15', onSlotchange: () => this.onTabsSlotChange(), name: "wcs-tab" }))));
    }
    /**
     * Observe when a new tab panel is added to the slot to let's handle accessibility properties for tabs panel:
     * - id: to let header tab refers it proper panel
     * - aria-label: take the same name as it's referenced header name
     *
     * @private
     */
    onTabsSlotChange() {
        let tabId = 0;
        this.refreshHeaders();
        this.tabs.forEach(tab => {
            tab.setAttribute("aria-label", this.headers.at(tabId));
            // set an ID to set aria-controls on header tab 
            // (https://www.w3.org/WAI/ARIA/apg/patterns/tabs/examples/tabs-automatic/#:~:text=Refers%20to%20the%20element)
            tab.setAttribute("id", `tabs-id-${this.tabsId}-tab-panel-${tabId}`);
            tabId++;
        });
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "selectedIndex": ["selectedIndexChanged"],
        "selectedKey": ["selectedTabkeyChanged"],
        "mobile": ["onMobileChange"]
    }; }
};
let tabsId = 0;
Tabs.style = WcsTabsStyle0;

exports.wcs_tabs = Tabs;

//# sourceMappingURL=wcs-tabs.cjs.entry.js.map