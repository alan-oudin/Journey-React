'use strict';

const index = require('./index-6f0140d8.js');
const helpers = require('./helpers-2f1a8ddc.js');

const getAccessibleName = (order, double) => {
    switch (order) {
        case 'next':
            return double ? 'Dernière page' : 'Page suivante';
        case 'previous':
        default:
            return double ? 'Première page' : 'Page précédente';
    }
};
const GridPaginationArrow = ({ active, order, double = false }) => (index.h("wcs-button", { mode: "clear", shape: "square", size: "s", disabled: !active, title: getAccessibleName(order, double) },
    index.h("svg", { style: { cursor: 'pointer' }, "aria-hidden": "true", xmlns: "http://www.w3.org/2000/svg", width: "24", height: "20", viewBox: "0 0 24 20" },
        index.h("style", { type: "text/css" }, `
              .arrow-group {
                  transform-origin: 50% 51%;
                  transition: transform 175ms ease-in-out;
              }
              .arrow {
                  transition: fill 175ms ease-in-out;
                  fill: var(--wcs-grid-pagination-arrow-color-inactive, var(--wcs-button-color));
              }
              .second-arrow {
                  transform: translateY(-8px);
              }
              .next {
                  transform: rotate(90deg);
              }
              .previous {
                  transform: rotate(-90deg);
              }
              .active {
                  fill: var(--wcs-grid-pagination-arrow-color-active, var(--wcs-button-color));
              }
          `),
        index.h("g", { fill: "none", class: order + ' arrow-group' },
            index.h("path", { class: (active ? 'active' : '') + ' arrow', d: "M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z" }),
            index.h("path", { d: "M0 0h24v24H0z", fill: "none" })),
        double ?
            index.h("g", { fill: "none", class: order + ' arrow-group' },
                index.h("path", { class: (active ? 'active' : '') + ' arrow second-arrow', d: "M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z" }),
                index.h("path", { d: "M0 0h24v24H0z", fill: "none" }))
            : '')));

const gridPaginationCss = ":host{display:block;margin-top:var(--wcs-grid-pagination-margin-top);--wcs-grid-pagination-color:var(--wcs-semantic-color-text-primary);--wcs-grid-pagination-font-size:var(--wcs-semantic-font-size-label-2);--wcs-grid-pagination-font-weight:var(--wcs-semantic-font-weight-medium);--wcs-grid-pagination-gap:var(--wcs-semantic-spacing-base);--wcs-grid-pagination-page-size-gap:var(--wcs-semantic-spacing-base);--wcs-grid-pagination-counter-gap:var(--wcs-semantic-spacing-small);--wcs-grid-pagination-margin-top:var(--wcs-semantic-spacing-large);--wcs-grid-pagination-arrow-color-inactive:unset;--wcs-grid-pagination-arrow-color-active:unset;}.container{display:grid;gap:var(--wcs-grid-pagination-gap);grid-template-columns:auto auto auto;justify-content:space-between;align-items:center;color:var(--wcs-grid-pagination-color);font-size:var(--wcs-grid-pagination-font-size);font-weight:var(--wcs-grid-pagination-font-weight)}.available-page-sizes{width:auto}.page-management,.page-size,.items-count{display:flex;align-items:center}.page-size{gap:var(--wcs-grid-pagination-page-size-gap)}.page-management{margin:0;padding:0;list-style-type:none}.pagination-arrow{display:flex}.pagination-counter{padding:0 var(--wcs-grid-pagination-counter-gap)}.pagination-counter span{white-space:nowrap}wcs-select.available-page-sizes{--wcs-select-control-height:var(--wcs-semantic-size-s)}";
const WcsGridPaginationStyle0 = gridPaginationCss;

const GRID_PAGINATION_INHERITED_ATTRS = ['tabindex', 'title'];
const GridPagination = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.wcsGridPaginationChange = index.createEvent(this, "wcsGridPaginationChange", 7);
        this.inheritedAttributes = {};
        this.availablePageSizes = [10, 20, 50];
        this.currentPage = GridPagination.INDEX_FIRST_PAGE;
        this.pageSize = this.availablePageSizes[0];
        this.itemsCount = 0;
        this.pageCount = 1;
    }
    componentWillLoad() {
        this.inheritedAttributes = Object.assign(Object.assign({}, helpers.inheritAriaAttributes(this.el)), helpers.inheritAttributes(this.el, GRID_PAGINATION_INHERITED_ATTRS));
    }
    async setAriaAttribute(attr, value) {
        helpers.setOrRemoveAttribute(this.nativeNav, attr, value);
    }
    getWcsGrid() {
        return this.el.parentElement.tagName === 'WCS-GRID' ? this.el.parentElement : undefined;
    }
    lastPage() {
        this.currentPage = this.pageCount - 1;
        this.emitPaginationChange();
        this.focusFirstGridCell();
    }
    nextPage() {
        if (this.canGoToNextPage()) {
            this.currentPage++;
            this.emitPaginationChange();
            this.focusFirstGridCell();
        }
    }
    canGoToNextPage() {
        return this.currentPage + 1 < this.pageCount;
    }
    previousPage() {
        if (this.canGoToPreviousPage()) {
            this.currentPage--;
            this.emitPaginationChange();
            this.focusFirstGridCell();
        }
    }
    canGoToPreviousPage() {
        return this.currentPage > 0;
    }
    firstPage() {
        this.currentPage = 0;
        this.emitPaginationChange();
        this.focusFirstGridCell();
    }
    onChangePageSize(event) {
        this.pageSize = event.detail.value;
        if (this.currentPage + 1 > this.pageSize) {
            this.currentPage = 0;
        }
        this.emitPaginationChange();
        this.focusFirstGridCell();
    }
    /**
     * Move focus to the first grid cell after a pagination change
     */
    focusFirstGridCell() {
        const grid = this.getWcsGrid();
        if (grid) {
            requestAnimationFrame(() => {
                this.el.blur();
                grid.focusFirstCell();
            });
        }
    }
    emitPaginationChange() {
        this.wcsGridPaginationChange.emit({
            pagination: {
                currentPage: this.currentPage,
                pageSize: this.pageSize,
                itemsCount: this.itemsCount,
                pageCount: this.pageCount
            }
        });
    }
    render() {
        return (index.h(index.Host, { key: 'a51e533835607f4e0b712fe26680704a71f76cd6', slot: "grid-pagination" }, index.h("div", { key: '8ff4ebf10c9e134a8e2fe5d577860a8d6dc9c863', class: "container" }, index.h("div", { key: 'a4c6ce48c71fb017dfecdb3f1e8bdc59894e1cbd', class: "page-size" }, index.h("wcs-select", { key: 'ae08e610f92bc8084806b25b0b5d7fa95db079ee', placeholder: "El\u00E9ments par page", class: "available-page-sizes", "aria-labelledby": "elements-per-page-number elements-per-page-text", value: this.pageSize, onWcsChange: this.onChangePageSize.bind(this) }, this.availablePageSizes.map((pageSize) => index.h("wcs-select-option", { value: pageSize }, pageSize))), index.h("span", { key: '282fd594fa817e9f2535c7403b5e1d66e4a7d030', id: "elements-per-page-number", hidden: true }, this.pageSize), index.h("span", { key: '00ee37d7e5156aa17b234fdf6eec956228064094', id: "elements-per-page-text" }, "\u00E9l\u00E9ments par page")), index.h("div", { key: '2ae95e32fc77cafebf0a38eb2746c62d0bd3a537', class: "items-count" }, index.h("span", { key: '5861d6bbf937867579181842dc93ba33290cdfe9' }, this.itemsCount, " \u00E9l\u00E9ments")), index.h("nav", Object.assign({ key: '7d847f316fb18ec7bdc08f7c055115a7391bb25e', "aria-label": "pagination", ref: (el) => (this.nativeNav = el) }, this.inheritedAttributes), index.h("ul", { key: 'd58fdfcd0a663071a6c94b72acf339a2efd57b5d', class: "page-management" }, index.h("li", { key: 'd18366653d52b0e481bfc8bb0d001d72aa5b3b36', class: "pagination-arrow", onClick: this.firstPage.bind(this) }, index.h(GridPaginationArrow, { key: 'ce33b84750ac08bfc50e91378f79ce62c11c9750', active: this.canGoToPreviousPage(), order: "previous", double: true })), index.h("li", { key: 'fb8adcbe91d40dd5d5dd741ec2c69299d971a1ee', class: "pagination-arrow", onClick: this.previousPage.bind(this) }, index.h(GridPaginationArrow, { key: 'b5f8b2804909a64e73e4d26a1faea483a10d2137', active: this.canGoToPreviousPage(), order: "previous" })), index.h("li", { key: '22742254c3c37ecf900eba29d1605a0420ff11e2', class: "pagination-counter" }, index.h("span", { key: '1f9385fffd93e2eb97d8199b0d7e459e58e01285', "aria-label": `Page ${this.currentPage + 1} sur ${this.pageCount}`, "aria-current": "page" }, this.currentPage + 1, " / ", this.pageCount)), index.h("li", { key: '3a408b5b27a1ff8ba7dc52b6027506100e371d49', class: "pagination-arrow", onClick: this.nextPage.bind(this) }, index.h(GridPaginationArrow, { key: '54e0d638e0645fd46b8a96a99509c8a3dafc842b', active: this.canGoToNextPage(), order: "next" })), index.h("li", { key: 'e91b2f2eeadfeea3ef68fa83c3c3e9fa30c3c17f', class: "pagination-arrow", onClick: this.lastPage.bind(this) }, index.h(GridPaginationArrow, { key: '14834c2f39a7f1076dfe2660aa2c651d1c52f40e', active: this.canGoToNextPage(), order: "next", double: true })))))));
    }
    get el() { return index.getElement(this); }
};
GridPagination.INDEX_FIRST_PAGE = 0;
GridPagination.style = WcsGridPaginationStyle0;

exports.GridPagination = GridPagination;

//# sourceMappingURL=grid-pagination-4505d7b6.js.map