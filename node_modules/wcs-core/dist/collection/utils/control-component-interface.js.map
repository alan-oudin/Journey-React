{"version":3,"file":"control-component-interface.js","sourceRoot":"","sources":["../../src/utils/control-component-interface.ts"],"names":[],"mappings":"AAUA,MAAM,UAAU,2BAA2B,CAAC,EAAO;IAC/C,IAAI,OAAO,EAAE,KAAK,QAAQ,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS;QAAE,OAAO,KAAK,CAAC;IAC5E,OAAO,UAAU,IAAI,EAAE,CAAC;AAC5B,CAAC;AAED;;;;;;;;;;GAUG;AACH,MAAM,UAAU,qBAAqB,CAAC,OAAoB,EAAE,QAAiB;IACzE,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QACtB,OAAO,EAAE,CAAC;IACd,CAAC;IAED,MAAM,YAAY,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,cAAc,QAAQ,IAAI,CAAC,CAAC,CAAC,kBAAkB,CAAC;IAEpG,MAAM,WAAW,GAAG,OAAO,CAAC,UAAU,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IACnE,IAAI,CAAC,WAAW,EAAE,CAAC;QACf,OAAO,EAAE,CAAC;IACd,CAAC;IAED,MAAM,aAAa,GAAI,WAA+B,CAAC,aAAa,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;IACtF,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;QACxB,OAAO,EAAE,CAAC;IACd,CAAC;IAED,OAAO,aAAa;SACf,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC;SACnC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,2BAA2B;SAC9D,IAAI,CAAC,GAAG,CAAC;SACT,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;SACpB,IAAI,EAAE,CAAC;AAChB,CAAC","sourcesContent":["/**\n * For form controls components which have a label within like a wcs-switch or wcs-checkbox\n */\nexport interface ControlComponentWithLabel {\n    /**\n     * Get the label text\n     */\n    getLabel(): Promise<string>;\n}\n\nexport function isControlComponentWithLabel(el: any): el is ControlComponentWithLabel {\n    if (typeof el !== 'object' || el === null || el === undefined) return false;\n    return 'getLabel' in el;\n}\n\n/**\n\n * Extracts the text content from nodes assigned to a slot in a Web Component's Shadow DOM.\n *\n * @param element - The Web Component HTMLElement containing a Shadow DOM with slots\n * @param slotName - Optional name of the slot to target (if not provided, targets the default slot)\n * @returns The combined text content of all nodes assigned to the specified slot, with normalized whitespace\n *\n * @throws Will not throw errors, but returns empty string if the element has no Shadow DOM,\n *         no matching slot, or no assigned nodes\n */\nexport function getSlottedContentText(element: HTMLElement, slotName?: string): string {\n    if (!element.shadowRoot) {\n        return '';\n    }\n\n    const slotSelector = typeof slotName === 'string' ? `slot[name=\"${slotName}\"]` : 'slot:not([name])';\n\n    const slotElement = element.shadowRoot.querySelector(slotSelector);\n    if (!slotElement) {\n        return '';\n    }\n\n    const assignedNodes = (slotElement as HTMLSlotElement).assignedNodes({flatten: true});\n    if (!assignedNodes.length) {\n        return '';\n    }\n\n    return assignedNodes\n        .map(node => node.textContent || '')\n        .filter(text => text.trim() !== '') // we skip empty text nodes\n        .join(' ')\n        .replace(/\\s+/g, ' ')\n        .trim();\n}\n"]}