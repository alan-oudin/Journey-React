import { h } from "@stencil/core";
import { inheritAriaAttributes, inheritAttributes, setOrRemoveAttribute } from "../../utils/helpers";
const PROGRESS_RADIAL_ARIA_INHERITED_ATTRS = ['title'];
/**
 * The progress-radial component is a circular progress bar that indicates the current completion of a task.
 *
 * ## Accessibility guidelines ðŸ’¡
 * > Aria attributes and how to display the progress-radial depend on the use case in your application :
 * >
 * > - **Case 1 : decorative**
 * > If the progress-radial is used as a decoration _(if removed, the user doesn't lose any relevant information)_ or in the
 * > context of another component _(such as progress-radial in a card)_ => **you don't need to show the label nor add an aria-label**.
 * >
 * > - **Case 2 : informative**
 * > If the progress-radial is used to convey important information _(e.g., form completion status, dashboard KPI)_, you need to :
 * >   - **Provide a visible label** that describes the purpose of the progress-radial.
 * >   - **Set the `showLabel` property to `true`** to show the percentage inside the progress-radial.
 * >   - Optionally, use aria-label to provide an accessible name if a visible label is not present.
 *
 *
 * @cssprop --wcs-progress-radial-rail-width - The width of the line that represents the rail of the progress radial
 * @cssprop --wcs-progress-radial-rail-spacing - The space between each rail of the progress radial
 * @cssprop --wcs-progress-radial-rail-color - The color of the rail of the progress radial
 * @cssprop --wcs-progress-radial-value-background-color - The background color of the bar on top of the rail
 * @cssprop --wcs-progress-radial-label-color - The color of the label inside the progress radial
 * @cssprop --wcs-progress-radial-label-font-size - The font size of the label inside the progress radial
 * @cssprop --wcs-progress-radial-label-font-weight - The font weight of the label inside the progress radial
 * @cssprop --wcs-progress-radial-label-percentage-font-size - The font size of the percentage inside the progress radial
 * @cssprop --wcs-progress-radial-animation-duration - The duration of the animation of the progress radial
 */
export class ProgressRadial {
    constructor() {
        this.inheritedAttributes = {};
        /** The initial background image size (120x120) as specified in the background-image css property of .progress-circle */
        this.backgroundImageSize = 120;
        this.size = 120;
        this.showLabel = false;
        this.value = 0;
    }
    componentWillLoad() {
        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, PROGRESS_RADIAL_ARIA_INHERITED_ATTRS));
    }
    async setAriaAttribute(attr, value) {
        setOrRemoveAttribute(this.nativeProgress, attr, value);
    }
    render() {
        const { backgroundImageSize, halfSize } = { backgroundImageSize: this.backgroundImageSize, halfSize: this.backgroundImageSize / 2 };
        return (h("div", Object.assign({ key: '7da6ed9d04399e5ff473d112d6a111696c9b14bc', class: "progress-circle", "data-component": "radial-progress", style: this.getSize(), role: "progressbar", "aria-valuemin": "0", "aria-valuemax": "100", "aria-valuenow": this.value, "aria-valuetext": this.value + '%', ref: (el) => (this.nativeProgress = el) }, this.inheritedAttributes), h("svg", { key: '226ed7d14005563adc1e55e7ba28c3bb49ed1d95', "data-role": "figure", class: "circle-rail", viewBox: `0 0 ${backgroundImageSize} ${backgroundImageSize}` }, h("circle", { key: 'a50b905a8c36416ce3ede895affbda05a30b1c1b', cx: halfSize, cy: halfSize, r: 54, "stroke-width": 12 })), h("svg", { key: '7d58cf8a614acdff769c769ecca919b86792cd0d', class: "progress-circle-figure", "data-role": "figure", viewBox: `0 0 ${backgroundImageSize} ${backgroundImageSize}`, style: this.getSvgStyle() }, h("circle", { key: '11f22fd6a506b226a0e8a450163ac5c3a0fcbe44', class: "progress-circle-value", cx: halfSize, cy: halfSize, r: "54", "stroke-width": "12" })), this.showLabel &&
            h("div", { key: 'a87680ab5a59f4e34072dde8a2f7d15ef4b671e9', class: "progress-circle-label", "data-role": "label" }, h("span", { key: 'fe65c818b10f58562d65f7f330a21a794f8b876f' }, h("span", { key: '337459684703272ec7817fe64226e2df10341e9c', "data-role": "labelvalue" }, this.value), h("sup", { key: '45f173f53dcfa8e85ea0986f28e8848f75d24434' }, "%")))));
    }
    getSvgStyle() {
        return {
            'stroke-dasharray': '339.292',
            'stroke-dashoffset': `${339.292 - (this.value / 100) * 339.292}`,
        };
    }
    getSize() {
        return {
            'width': `${(this.size)}px`,
            'height': `${(this.size)}px`,
        };
    }
    static get is() { return "wcs-progress-radial"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["progress-radial.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["progress-radial.css"]
        };
    }
    static get properties() {
        return {
            "size": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The size of the progress radial (in px)"
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "120"
            },
            "showLabel": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether the component should display the % label inside"
                },
                "attribute": "show-label",
                "reflect": true,
                "defaultValue": "false"
            },
            "value": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The value of the progress radial. Prefer values between 0 and 100."
                },
                "attribute": "value",
                "reflect": false,
                "defaultValue": "0"
            }
        };
    }
    static get methods() {
        return {
            "setAriaAttribute": {
                "complexType": {
                    "signature": "(attr: AriaAttributeName, value: string | null | undefined) => Promise<void>",
                    "parameters": [{
                            "name": "attr",
                            "type": "\"role\" | `aria-${string}`",
                            "docs": ""
                        }, {
                            "name": "value",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AriaAttributeName": {
                            "location": "import",
                            "path": "../../utils/mutable-aria-attribute",
                            "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=progress-radial.js.map
