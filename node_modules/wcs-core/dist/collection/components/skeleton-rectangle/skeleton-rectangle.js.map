{"version":3,"file":"skeleton-rectangle.js","sourceRoot":"","sources":["../../../src/components/skeleton-rectangle/skeleton-rectangle.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAsB,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAI7E;;;;;;;;;;GAUG;AAMH,MAAM,OAAO,iBAAiB;;yBAK+B,OAAO;uBAKtB,KAAK;sBAKE,MAAM;qBAKR,MAAM;;IAErD,MAAM;QACF,OAAO,CACH,EAAC,IAAI,qDAAC,KAAK,EAAE,EAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC;YACjD,4EAAkB,MAAM,GAAQ,CAC7B,CACV,CAAC;IACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAEJ","sourcesContent":["import { Component, ComponentInterface, h, Host, Prop } from \"@stencil/core\";\nimport { WcsSkeletonAnimation } from \"../skeleton/skeleton-interface\";\nimport { CssTypes } from \"../../shared-types\";\n\n/**\n * Use a skeleton rectangle as a placeholder for large images or square-shaped components\n *\n * @cssprop --wcs-skeleton-border-radius - Border-radius of the skeleton. If not overridden, depends on the `rounded` attribute.\n * \n * @cssprop --wcs-skeleton-height - _(Shared among all skeleton types)_<br/>Height of the skeleton\n * @cssprop --wcs-skeleton-min-height - _(Shared among all skeleton types)_<br/> Minimum height of the skeleton\n * @cssprop --wcs-skeleton-width - _(Shared among all skeleton types)_<br/> Width of the skeleton\n * @cssprop --wcs-skeleton-background-color - _(Shared among all skeleton types)_<br/> Background color of the skeleton (default is a gradient)\n * @cssprop --wcs-skeleton-animation-duration - _(Shared among all skeleton types)_<br/> Duration of the skeleton animation, if applicable\n */\n@Component({\n    tag: 'wcs-skeleton-rectangle',\n    styleUrl: 'skeleton-rectangle.scss',\n    shadow: true\n})\nexport class SkeletonRectangle implements ComponentInterface {\n\n    /**\n     * Specifies the animation of the skeleton\n     */\n    @Prop({reflect: true}) animation: WcsSkeletonAnimation = 'glide';\n\n    /**\n     * Adds a border radius on the skeleton if true\n     */\n    @Prop({reflect: true}) rounded: boolean = false;\n\n    /**\n     * Specifies the height of the skeleton (can be any valid CSS value)\n     */\n    @Prop({reflect: true}) height: CssTypes.Height = 'auto';\n\n    /**\n     * Specifies the width of the skeleton (can be any valid CSS value)\n     */\n    @Prop({reflect: true}) width: CssTypes.Width = 'auto';\n\n    render() {\n        return (\n            <Host style={{height: this.height, width: this.width}}>\n                <span aria-hidden=\"true\"></span>\n            </Host>\n        );\n    }\n\n}\n"]}