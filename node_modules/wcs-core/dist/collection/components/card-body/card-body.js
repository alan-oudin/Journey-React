import { h, Host } from "@stencil/core";
/**
 * The card-body is a subcomponent of `wcs-card`. It represents content of the card with an extra padding around.
 *
 * @slot default - Default slot for the card body content. You can put anything you want. If you want a structured card, you can use `wcs-card-header`, `wcs-card-content`, and `wcs-card-footer` as slot
 *
 * @cssprop --wcs-card-body-padding - Padding of the card body
 * @cssprop --wcs-card-body-gap - Gap between each element in the card body
 */
export class CardBody {
    constructor() {
        this.orientation = null;
    }
    /**
     * @internal this method is not intended to be used by the user
     */
    async setOrientation(orientation) {
        this.orientation = orientation;
    }
    render() {
        return (h(Host, { key: '27547ebfbab0737a4947baf9ff4086d37b494155', class: this.orientation }, h("slot", { key: 'f9444717438f9981b479b39575c03297b04a5847' })));
    }
    static get is() { return "wcs-card-body"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["card-body.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["card-body.css"]
        };
    }
    static get states() {
        return {
            "orientation": {}
        };
    }
    static get methods() {
        return {
            "setOrientation": {
                "complexType": {
                    "signature": "(orientation: CardOrientation) => Promise<void>",
                    "parameters": [{
                            "name": "orientation",
                            "type": "\"horizontal\" | \"vertical\"",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "CardOrientation": {
                            "location": "import",
                            "path": "../card/card-interface",
                            "id": "src/components/card/card-interface.ts::CardOrientation"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": [{
                            "name": "internal",
                            "text": "this method is not intended to be used by the user"
                        }]
                }
            }
        };
    }
}
//# sourceMappingURL=card-body.js.map
