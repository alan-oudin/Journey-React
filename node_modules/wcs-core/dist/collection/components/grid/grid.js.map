{"version":3,"file":"grid.js","sourceRoot":"","sources":["../../../src/components/grid/grid.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    ComponentDidLoad,\n    ComponentInterface,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Listen, Method,\n    Prop,\n    State,\n    VNode,\n    Watch\n} from '@stencil/core';\nimport {\n    getSortOrderInteger,\n    HyperFunc, RowCssPartsFn,\n    WcsGridAllRowSelectedEventDetails,\n    WcsGridCell,\n    WcsGridColumnSortChangeEventDetails,\n    WcsGridPaginationChangeEventDetails,\n    WcsGridRow,\n    WcsGridRowData,\n    WcsGridSelectionConfig,\n    WcsGridSelectionEventDetails,\n} from './grid-interface';\nimport { v4 as uuid } from 'uuid';\nimport { cloneDeep, get, isEqual } from 'lodash-es';\nimport { GridPagination } from '../grid-pagination/grid-pagination';\nimport { getActionForKeyboardEvent, KeyboardEventAssociatedAction } from \"./grid-keyboard-event\";\nimport { GridRadio } from \"./grid-radio\";\nimport { AriaAttributeName, MutableAriaAttribute } from \"../../utils/mutable-aria-attribute\";\nimport { inheritAriaAttributes, inheritAttributes, setOrRemoveAttribute } from \"../../utils/helpers\";\n\ninterface GridElementWithCoordinates {\n    el: HTMLTableCellElement,\n    row: number,\n    col: number,\n}\n\nconst GRID_INHERITED_ATTRS = ['title'];\n\n/**\n * The grid component is a complex component used as an HTML table to display collections of data.\n *\n * @cssprop --wcs-grid-gap - Gap between grid cells (horizontal, vertical using `border-spacing` property)\n * @cssprop --wcs-grid-vertical-align - Vertical alignment of grid cells\n * @cssprop --wcs-grid-outline-color - Outline color for grid cells\n *\n * @cssprop --wcs-grid-cell-text-color - Text color of all grid cells\n * @cssprop --wcs-grid-cell-padding-horizontal - Horizontal padding of grid cells\n * @cssprop --wcs-grid-cell-padding-vertical - Vertical padding of grid cells\n * @cssprop --wcs-grid-cell-border-bottom - Bottom border of grid cells\n * @cssprop --wcs-grid-cell-separator-border - Separator border between grid cells\n * @cssprop --wcs-grid-first-cell-border-radius - Border radius of the first cell in a row\n * @cssprop --wcs-grid-last-cell-border-radius - Border radius of the last cell in a row\n *\n * @cssprop --wcs-grid-highlight-color - Background color for selected rows\n * @cssprop --wcs-grid-row-background-color - Background color of all rows\n * @cssprop --wcs-grid-row-odd-background-color - Background color of odd rows\n * @cssprop --wcs-grid-row-even-background-color - Background color of even rows\n *\n * @cssprop --wcs-grid-header-background-color-default - Default background color of the header\n * @cssprop --wcs-grid-header-background-color-hover - Background color of the header on hover\n * @cssprop --wcs-grid-header-background-color-press - Background color of the header on press\n * @cssprop --wcs-grid-header-text-color - Text color of the header\n * @cssprop --wcs-grid-header-font-weight - Font weight of the header\n * @cssprop --wcs-grid-header-font-size - Font size of the header\n * @cssprop --wcs-grid-header-line-height - Line height of the header\n * @cssprop --wcs-grid-header-padding-vertical - Vertical padding of the header\n * @cssprop --wcs-grid-header-padding-horizontal - Horizontal padding of the header\n * @cssprop --wcs-grid-header-border-left - Left border between header cells (default is none\n * @cssprop --wcs-grid-header-border-radius - Border radius of the header\n * @cssprop --wcs-grid-header-border-bottom - Bottom border of the header\n * @cssprop --wcs-grid-header-transition-duration - Transition duration of the header\n * @cssprop --wcs-grid-first-header-background-color - Background color of the first header cell\n * @cssprop --wcs-grid-first-header-border-radius - Border radius of the first header cell\n * @cssprop --wcs-grid-last-header-border-radius - Border radius of the last header cell\n * @cssprop --wcs-grid-column-selection-width - Width of the selection column (when selectionConfig is defined)\n * @cssprop --wcs-grid-header-sort-arrow-color-default - Color of the sort arrow in the header\n * @cssprop --wcs-grid-header-sort-arrow-color-hover - Color of the sort arrow in the header when hovered\n * \n * @csspart all-rows-checkbox - CSS part for the checkbox in the selection column that selects all rows\n * @csspart row-checkbox - CSS part for the checkbox of each row in the selection column\n * \n * @slot grid-column - The slot containing the column of the grid in the `<thead>`\n * @slot grid-pagination - The slot containing the pagination of the grid below the `<table>`\n *\n */\n@Component({\n    tag: 'wcs-grid',\n    styleUrls: ['grid.scss', 'grid-radio.scss'],\n    shadow: true\n})\nexport class Grid implements ComponentInterface, ComponentDidLoad, MutableAriaAttribute {\n    @Element() private el!: HTMLWcsGridElement;\n    private nativeTable!: HTMLTableElement;\n    private inheritedAttributes: { [k: string]: any } = {};\n    \n    /**\n     * Manage sort and pagination with a backend server when set to `true`\n     */\n    @Prop({ reflect: true }) serverMode: boolean = false;\n    /**\n     * Contains the data to display in the table from a js object\n     */\n    @Prop() data: any[];\n    /**\n     * Flag to display a spinner during data loading\n     */\n    @Prop({ reflect: true }) loading: boolean;\n    /**\n     * Used to manage grid's row selection.  \n     * \"none\": no row can be selected.  \n     * \"multiple\": several rows can be selected.  \n     * \"single\": one row only can be selected.  \n     */\n    @Prop() selectionConfig: WcsGridSelectionConfig = 'none';\n    /**\n     * Set the selected items (rows)\n     */\n    @Prop() selectedItems: any | any[] = [];\n    /**\n     * Automatically set by the component to reference the wcs-grid-pagination HTML element by its id.\n     */\n    @Prop() wcsGridPaginationId: string;\n    /**\n     * Name of the object's key that will be used to display the cells whose `keyValue` attribute matches to the\n     * object's value for this key. Useful for custom cells.\n     */\n    @Prop() rowIdPath: string;\n    /**\n     * Function to add css parts to the grid rows, this allows you to customize the rows with css parts directly\n     * in you're application stylesheet.\n     */\n    @Prop() rowCssPartsFn: RowCssPartsFn = (_) => null;\n    @State() private columns: HTMLWcsGridColumnElement[];\n    @State() private paginationEl: HTMLWcsGridPaginationElement;\n    /**\n     * Rows to display, contains user data and meta data\n     */\n    @State() private rows: WcsGridRow[] = [];\n    /**\n     * Event emitted when a row is selected or unselected\n     */\n    @Event() wcsGridSelectionChange!: EventEmitter<WcsGridSelectionEventDetails>;\n    /**\n     * Event emitted when all rows are selected or unselected\n     */\n    @Event() wcsGridAllSelectionChange!: EventEmitter<WcsGridAllRowSelectedEventDetails>;\n    /**\n     * Event emitted when the grid has focus.\n     */\n    @Event() wcsFocus!: EventEmitter<FocusEvent>;\n    /**\n     * Event emitted when the grid loses focus.\n     */\n    @Event() wcsBlur!: EventEmitter<FocusEvent>;\n    \n    /**\n     * Used to track the focus position in the grid for keyboard navigation.  \n     * Header row : index 0  \n     * First column :\n     *   - index 1 if selection mode multiple or single\n     *   - index 0 if no selection mode\n     * Default position : col 0, row 1\n     */\n    @State() private cursorPosition: {col: number, row: number} = {col: 0, row: 1};\n    \n    @Watch('cursorPosition')\n    onCursorPositionChange(newValue: {col: number, row: number}): void {\n        // Notify all grid columns that the cursorPosition has changed\n        this.getGridColumnsFromTemplate().forEach(g => g.cursorPosition = newValue);\n    }\n    \n    @Watch('data')\n    onDataChange(newValue: any[]): void {\n        this.updateGridRows(newValue);\n        this.refreshSort(false);\n    }\n\n    @Watch('selectedItems')\n    onSelectedItemsPropertyChange(newValue: any | any[]) {\n        this.updateSelectionWithValues(newValue);\n    }\n    \n    @Listen('focus')\n    onFocus(event: FocusEvent) {\n        this.getElementToFocusAtCursorPosition()?.focus();\n        this.wcsFocus.emit(event);\n    }\n\n    @Listen('blur')\n    onBlur(event: FocusEvent) {\n        this.wcsBlur.emit(event);\n    }\n\n    /**\n     * Set focus on the first cell of the grid\n     */\n    @Method()\n    async focusFirstCell() {\n        this.cursorPosition = { col: this.selectionConfig === 'none' ? 0 : 1, row: 1 };\n        this.getElementToFocusAtCursorPosition()?.focus();\n    }\n\n    /**\n     * If selectionConfig is different from `none`, that means that an extra column for radio or checkbox is rendered\n     * in the table.\n     */\n    hasSelectionColumn() {\n        return this.selectionConfig !== 'none';\n    }\n    \n    /**\n     * Returns the element to focus at the current cursor position : it can be a cell (td, th) to focus or a nested\n     * checkbox / radio element if the selection mode is single or multiple\n     */\n    getElementToFocusAtCursorPosition(): HTMLTableCellElement | HTMLWcsCheckboxElement | HTMLInputElement {\n        const el = this.gridElementsWithCoordinates.find(cell =>\n            cell.col === this.cursorPosition?.col && cell.row === this.cursorPosition?.row)?.el;\n        return this.hasSelectionColumn()\n            ? el.querySelector('wcs-checkbox,input[type=\"radio\"]') ?? el\n            : el;\n    }\n    \n    moveCursorPosition(directionX: number | 'first' | 'last', directionY: number | 'first' | 'last') {\n        this.cursorPosition = {\n            col: directionX === 'first' ? 0 :\n                directionX === 'last' ? this.totalDisplayedColumnCount() - 1 :\n                    Math.min(Math.max(this.cursorPosition.col + directionX, 0), this.totalDisplayedColumnCount() - 1),\n            row: directionY === 'first' ? 0 :\n                directionY === 'last' ? this.getRowsForCurrentPage().length :\n                    Math.min(Math.max(this.cursorPosition.row + directionY, 0), this.getRowsForCurrentPage().length)\n        };\n        \n        this.handleCursorPositionOnEmptyTh();\n        \n        this.getElementToFocusAtCursorPosition()?.focus();\n    }\n\n    /**\n     * When the grid has selectionConfig single, an empty th appears at col=0, row=0.\n     * It should not be focusable so the cursor navigates to col=1, row=0 instead.\n     */\n    handleCursorPositionOnEmptyTh() {\n        if (this.selectionConfig === 'single' && this.cursorPosition.col === 0 && this.cursorPosition.row === 0) {\n            this.cursorPosition = {\n                col: 1,\n                row: 0\n            }\n        }\n    }\n\n    @Listen('wcsHiddenChange')\n    onHiddenColumnChange(): void {\n        // We use forceUpdate because the fact of hiding a column or not does not modify the internal structure of the grid (WcsGridRow).\n        // Hide a column only impacts the way it is rendered but the grid-column remains in the dom and in our internal model.\n        forceUpdate(this);\n        this.cursorPosition = { col: 0 , row: 1 }\n    }\n\n    @Listen('keydown')\n    onKeyDown(_event: KeyboardEvent) {\n        if (document.activeElement?.tagName === 'WCS-GRID-PAGINATION') {\n            return;\n        }\n        \n        let type: 'grid_no_selection' | 'grid_selection_single' | 'grid_selection_multiple';\n        \n        switch (this.selectionConfig) {\n            case \"multiple\":\n                type = 'grid_selection_multiple';\n                break;\n            case \"single\":\n                type = 'grid_selection_single';\n                break;\n            case \"none\":\n                type = 'grid_no_selection';\n                break;\n        }\n\n        const actionsFromKeyboardEvents: KeyboardEventAssociatedAction[] = getActionForKeyboardEvent(_event, type);\n\n        // If we have at least one associated actions, we prevent the default behavior of the event. \n        // Except if the action is a focus move (we have to handle the preventDefault behavior ourselves in the action implementation)\n        if (actionsFromKeyboardEvents.length != 0) {\n            _event.preventDefault();\n        }\n\n        for (const actionFromKeyboardEvent of actionsFromKeyboardEvents) {\n            this.doActionFromKeyboardEventAssociatedAction(actionFromKeyboardEvent, _event);\n        }\n    }\n\n    doActionFromKeyboardEventAssociatedAction(actionFromKeyboardEvent: KeyboardEventAssociatedAction, event: KeyboardEvent) {\n        switch (actionFromKeyboardEvent.kind) {\n            case \"FocusCell\":\n                switch (actionFromKeyboardEvent.target) {\n                    case \"up\":\n                        this.moveCursorPosition(0, -1);\n                        break;\n                    case \"down\":\n                        this.moveCursorPosition(0, 1);\n                        break;\n                    case \"left\":\n                        this.moveCursorPosition(-1, 0);\n                        break;\n                    case \"right\":\n                        this.moveCursorPosition(1, 0);\n                        break;\n                    case \"first_of_row\":\n                        this.moveCursorPosition('first', 0);\n                        break;\n                    case \"last_of_row\":\n                        this.moveCursorPosition('last', 0);\n                        break;\n                    case \"first_of_grid\":\n                        this.moveCursorPosition('first', 'first');\n                        break;\n                    case \"last_of_grid\":\n                        this.moveCursorPosition('last', 'last');\n                        break;\n                    default:\n                        break;\n                }\n            case \"SelectRow\":\n                switch (actionFromKeyboardEvent.target) {\n                    case \"one\":\n                        event.preventDefault();\n                        if (this.cursorPosition.row > 0) {\n                            this.onRowSelection(this.rows[this.cursorPosition.row - 1]);\n                        }\n                        break;\n                    case \"all\":\n                        this.selectAllRows();\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            default:\n                throw new Error(\"Internal error\");\n        }\n    }\n    \n    \n    @Listen('mousedown')\n    onClick(_event: MouseEvent) {\n        const clickedGridElement: HTMLTableCellElement = _event.composedPath()\n            .filter(x => ['TD', 'TH']\n            .includes((x as HTMLElement).nodeName))[0] as HTMLTableCellElement;\n        \n        if(!clickedGridElement) return; // it can be the grid pagination node, we don't want to handle it\n        \n        const clickedGridElementWithCoordinates = this.gridElementsWithCoordinates.find(e => e.el === clickedGridElement);\n        \n        this.cursorPosition = {\n            col: clickedGridElementWithCoordinates.col,\n            row: clickedGridElementWithCoordinates.row,\n        }\n    }\n\n    private updateSelectionWithValues(values: any | any[]) {\n        if (this.selectionConfig === 'single') {\n            this.rows.map(r => r.selected = false);\n            for (const row of this.rows) {\n                if (isEqual(row.data, values)) {\n                    row.selected = true;\n                    break; // only one line can be selected\n                }\n            }\n        } else if (this.selectionConfig === 'multiple') {\n            this.rows.map(r => r.selected = false);\n            for (const row of this.rows) {\n                if (values.find(x => isEqual(x, row.data))) {\n                    row.selected = true;\n                }\n            }\n        }\n        this.rows = cloneDeep(this.rows);\n    }\n\n    private wcsGridRowToWcsGridRowData(row: WcsGridRow): WcsGridRowData {\n        return {selected: row.selected, page: row.page, data: row.data};\n    }\n\n    private updateGridRows(data: any[]): void {\n        const rows: WcsGridRow[] = [];\n        if (data && this.columns) {\n            // eslint-disable-next-line @typescript-eslint/prefer-for-of\n            for (let i = 0; i < data.length; i++) {\n                const row: WcsGridRow = {\n                    uuid: uuid(),\n                    data: data[i],\n                    selected: false,\n                    cells: []\n                };\n                let index = 0;\n                for (const column of this.columns) {\n                    column.columnPosition = index + (this.hasSelectionColumn() ? 1 : 0);\n                    index++;\n                    row.cells.push({\n                        content: get(data[i], column.path),\n                        column,\n                        formatter: column.formatter\n                    })\n                }\n                rows.push(row);\n            }\n            this.rows = rows;\n            this.updatePageIndex();\n        }\n    }\n\n    componentDidLoad(): void {\n        this.columns = this.getGridColumnsFromTemplate();\n        this.paginationEl = this.wcsGridPaginationId\n            ? document.getElementById(this.wcsGridPaginationId) as HTMLWcsGridPaginationElement\n            : this.getGridPaginationsFromTemplate()[0];\n        this.updateGridRows(this.data);\n        if (this.selectedItems) {\n            this.updateSelectionWithValues(this.selectedItems);\n        }\n        this.refreshSort(true);\n    }\n\n    componentWillLoad(): Promise<void> | void {\n        this.inheritedAttributes = {\n            ...inheritAriaAttributes(this.el),\n            ...inheritAttributes(this.el, GRID_INHERITED_ATTRS),\n        };\n    }\n\n    @Method()\n    async setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined) {\n        setOrRemoveAttribute(this.nativeTable, attr, value);\n    }\n\n    /**\n     * Handle existing column's filters (defined before the grid is instantiated)\n     * @private\n     */\n    private refreshSort(refreshOthersColumnsSortOrderState: boolean) {\n        //fixme: why the column property can be null or undefined?\n        // Explanation: https://stenciljs.com/docs/component-lifecycle\n        // The @watch can be called before the componentDidLoad() which sets the columns\n        if (this.columns) {\n            const [first, ...other] = this.columns.filter(c => c.sortOrder !== 'none');\n            if (first && !this.serverMode) {\n                this.sortBy(first);\n            }\n            refreshOthersColumnsSortOrderState && this.disableSortOrderForColumns(other);\n        }\n    }\n\n    private disableSortOrderForColumns(columns: HTMLWcsGridColumnElement[] | null | undefined): void {\n        columns?.forEach(c => c.sortOrder = 'none');\n    }\n\n    private getGridColumnsFromTemplate(): HTMLWcsGridColumnElement[] {\n        const slotted = this.el.shadowRoot.querySelector('slot[name=\"grid-column\"]') as HTMLSlotElement;\n        return slotted.assignedElements() as any as HTMLWcsGridColumnElement[];\n    }\n\n    private getGridPaginationsFromTemplate(): HTMLWcsGridPaginationElement[] {\n        const slotted = this.el.shadowRoot.querySelector('slot[name=\"grid-pagination\"]') as HTMLSlotElement;\n        return slotted.assignedElements() as any as HTMLWcsGridPaginationElement[];\n    }\n    \n    private get gridElementsWithCoordinates(): GridElementWithCoordinates[] {\n        const gridElements: GridElementWithCoordinates[] = [];\n        // If selection multiple, the first cell should be added to the list\n        if (this.selectionConfig === 'multiple') {\n            gridElements.push({\n                el: this.el.shadowRoot.querySelector('th'),\n                row: 0,\n                col: 0\n            });\n        }\n        this.getGridColumnsFromTemplate()\n          .filter(col => !col.hidden)\n          .forEach((col, index) => {\n              gridElements.push({\n                  el: col.shadowRoot.querySelector('th'),\n                  row: 0,\n                  col: index + (this.hasSelectionColumn() ? 1 : 0),\n              });\n          });\n        this.el.shadowRoot.querySelectorAll('td').forEach((cell, index) => {\n            gridElements.push({\n                el: cell,\n                row: 1 + Math.floor(index / this.totalDisplayedColumnCount()),\n                col: index % this.totalDisplayedColumnCount(),\n            });\n        });\n        \n        return gridElements;\n    }\n\n    @Listen('wcsSortChange')\n    sortChangeEventHandler(event: CustomEvent<WcsGridColumnSortChangeEventDetails>): void {\n        // fixme: why the column property can be null or undefined?\n        // Explanation: https://stenciljs.com/docs/component-lifecycle\n        // The @Listen can be called before the componentDidLoad() which sets the columns\n        if (event.detail.order === 'none' || !this.columns) return;\n        // We keep only one active sort column\n        this.disableSortOrderForColumns(this.columns.filter(c => c !== event.detail.column));\n        if (this.serverMode) return;\n        this.sortBy(event.detail.column);\n        this.updatePageIndex();\n    }\n\n    /**\n     * Sorts the grid rows according to the given column's configuration\n     * @param column Column from which to extract the sorting configuration\n     * @private\n     */\n    private sortBy(column: HTMLWcsGridColumnElement) {\n        if (column.sortFn) {\n            this.rows = cloneDeep(this.rows)\n                .sort((a: any, b: any) => column.sortFn(a.data, b.data, column) * getSortOrderInteger(column.sortOrder));\n        } else {\n            this.rows = cloneDeep(this.rows)\n                .sort((a: any, b: any) => {\n                    const path = column.path;\n                    return ((get(a.data, path) < get(b.data, path)) ? -1 : (get(a.data, path) > get(b.data, path)) ? 1 : 0) * getSortOrderInteger(column.sortOrder);\n                });\n        }\n    }\n\n    /**\n     * Update the page's number of all rows\n     */\n    private updatePageIndex(): void {\n        if (!this.serverMode && this.paginationEl) {\n            this.paginationEl.itemsCount = this.data.length;\n            this.paginationEl.pageCount = Math.ceil(this.data.length / this.paginationEl.pageSize);\n\n            if (this.paginationEl.pageCount <= 1) {\n                this.paginationEl.currentPage = GridPagination.INDEX_FIRST_PAGE;\n            } else if (this.paginationEl.pageCount > 0 && this.paginationEl.currentPage + 1 > this.paginationEl.pageCount) {\n                this.paginationEl.currentPage = this.paginationEl.pageCount - 1;\n            }\n\n            const rows = cloneDeep(this.rows);\n            rows.forEach((row: WcsGridRow, index: number) =>\n                row.page = Math.floor(index / this.paginationEl.pageSize)\n            );\n            this.rows = [...rows];\n        }\n    }\n\n    @Listen('wcsGridPaginationChange')\n    paginationChangeEventHandler(): void {\n        this.onPaginationChange();\n    }\n\n    @Listen('wcsGridPaginationChange', {target: 'window'})\n    paginationChangeEventHandlerOutside(event: CustomEvent<WcsGridPaginationChangeEventDetails>): void {\n        if (this.wcsGridPaginationId && this.wcsGridPaginationId === (event.target as HTMLElement).id) {\n            this.onPaginationChange();\n        }\n    }\n\n    private onPaginationChange(): void {\n        if (this.serverMode) return;\n        this.updatePageIndex();\n    }\n\n    private onRowSelection(row: WcsGridRow): void {\n        if (this.selectionConfig === 'single') {\n            this.rows.filter(r => r.uuid !== row.uuid).map(r => r.selected = false);\n        }\n        row.selected = !row.selected;\n        if (this.selectionConfig !== 'single' || row.selected) {\n            this.wcsGridSelectionChange.emit({\n                selectedRows: this.selectedRows.map(row => this.wcsGridRowToWcsGridRowData(row)),\n                changedRow: this.wcsGridRowToWcsGridRowData(row)\n            });\n        }\n        this.rows = cloneDeep(this.rows);\n    }\n\n    private get selectedRows(): WcsGridRow[] {\n        return this.rows.filter(r => r.selected);\n    }\n\n    private selectAllRows(): void {\n        const rows = this.getRowsForCurrentPage();\n        const selected = !this.allRowsAreSelected();\n        rows.map(r => r.selected = selected);\n        this.wcsGridAllSelectionChange.emit({rows: selected ? rows.map(row => this.wcsGridRowToWcsGridRowData(row)) : []});\n        this.wcsGridSelectionChange.emit({ \n            selectedRows: this.selectedRows.map(row => this.wcsGridRowToWcsGridRowData(row)),\n            changedRow: 'allCheckbox'\n        });\n        this.rows = cloneDeep(this.rows);\n    }\n\n    private allRowsAreSelected(): boolean {\n        const rows = this.getRowsForCurrentPage();\n        return rows.length > 0 && rows.filter(row => row.selected).length === rows.length;\n    }\n\n    private getRowsForCurrentPage(): WcsGridRow[] {\n        // When in server mode, the state exists outside the internal grid model, so we must rely on the DOM state\n        if (!this.serverMode && this.paginationEl) {\n            return this.rows.filter(row => row.page === this.paginationEl.currentPage);\n        }\n        return this.rows;\n    }\n\n    renderSelectionColumn(row: WcsGridRow, rowIndex: number): any {\n        switch (this.selectionConfig) {\n            case 'none':\n                return;\n            case 'single': \n                return <td aria-colindex={this.atLeastOneColumnHidden() ? 1 : null}\n                           tabIndex={this.cursorPosition?.col === 0 && rowIndex + 1 === this.cursorPosition?.row ? 0 : -1}>\n                    <GridRadio checked={row.selected}\n                               row={row}\n                               rowIndex={rowIndex + 1}\n                               totalRows={this.rows.length}\n                               onClick={ (row) => {\n                                   if (!row.selected) {\n                                       this.onRowSelection(row)\n                                   }\n                               }}/>\n                </td>;\n            case 'multiple': \n                return <td aria-colindex={this.atLeastOneColumnHidden() ? 1 : null}\n                           tabIndex={this.cursorPosition?.col === 0 && rowIndex + 1 === this.cursorPosition?.row ? 0 : -1}>\n                    <wcs-checkbox tabIndex={-1}\n                                  part=\"row-checkbox\"\n                                  checked={row.selected} onWcsChange={this.onRowSelection.bind(this, row)}/>\n                </td>;\n        }\n    }\n\n    private getCellContent(row: WcsGridRow, cell: WcsGridCell): HTMLElement | HTMLElement[] | string | void {\n        if (cell.formatter) {\n            return cell.formatter(\n                (h as unknown) as HyperFunc<VNode>,\n                cell.column,\n                this.wcsGridRowToWcsGridRowData(row)\n            );\n        }\n        return cell.content;\n    }\n\n    /**\n     * Returns the total number of columns\n     * @private\n     */\n    private totalColumnCount() {\n        if (!this.columns) {\n            return 0;\n        }\n        return this.columns.length + (this.hasSelectionColumn() ? 1 : 0);\n    }\n\n    /**\n     * Returns the total number of columns that are not hidden\n     * @private\n     */\n    private totalDisplayedColumnCount() {\n        return this.totalColumnCount() - this.columns?.filter(col => col.hidden).length ?? 0;\n    }\n\n    /**\n     * Returns true if at least one column is hidden from the table\n     * @private\n     */\n    private atLeastOneColumnHidden() {\n        return this.totalDisplayedColumnCount() !== this.totalColumnCount();\n    }\n    \n    render(): any {\n        return (\n          <Host>\n              {\n                  <table role=\"grid\"\n                         ref={(el) => (this.nativeTable = el)}\n                         aria-rowcount={!this.loading && this.rows?.length}\n                         aria-colcount={!this.loading && this.totalDisplayedColumnCount()}\n                         {...this.inheritedAttributes}>\n                      <thead>\n                      <tr aria-rowindex=\"1\">\n                          {\n                              this.selectionConfig === 'none' ? ''\n                                : <th class=\"wcs-grid-selection-column\">\n                                    {\n                                        this.selectionConfig === 'single' ? '' :\n                                          <wcs-checkbox tabIndex={this.cursorPosition?.col === 0\n                                                                    && this.cursorPosition?.row === 0  ? 0 : -1}\n                                                        part=\"all-rows-checkbox\"\n                                                        checked={this.allRowsAreSelected()}\n                                                        onWcsChange={this.selectAllRows.bind(this)}/>\n                                    }\n                                </th>\n                          }\n                          <slot name=\"grid-column\"></slot>\n                      </tr>\n                      </thead>\n                      <tbody>\n                      {\n                          this.loading\n                            ? <tr aria-busy=\"true\">\n                                <td colSpan={this.totalColumnCount()} class=\"loading\">\n                                    <wcs-spinner></wcs-spinner>\n                                </td>\n                            </tr>\n                            : this.rows\n                              ?.filter(row => this.serverMode || !this.paginationEl || row.page === this.paginationEl.currentPage)\n                              .map((row, index) =>\n                                this.renderRow(row, index)\n                              )\n                      }\n                      </tbody>\n                  </table>\n              }\n              <slot name=\"grid-pagination\"></slot>\n          </Host>\n        );\n    }\n\n    /**\n     * Returns the row with all mapped cells inside.  \n     * The aria-rowindex here starts at 2 because the header row starts at index 1. \n     * @private\n     */ \n    private renderRow(row: WcsGridRow, rowIndex: number) {\n        let hiddenColumnCount = 0;\n        return <tr class={row.selected ? 'selected' : ''}\n                   part={this.rowCssPartsWithoutEmptyList(row)?.join(' ')}\n                   aria-selected={row.selected ? 'true' : null}\n                   aria-rowindex={rowIndex + 2}>\n            {this.renderSelectionColumn(row, rowIndex)}\n            {row.cells?.map((cell, cellIndex) => {\n                    if (cell.column.hidden) {\n                        hiddenColumnCount++;\n                        return;\n                    }\n                    const nonHiddenColumnIndex =  cellIndex - hiddenColumnCount + 1 + (this.hasSelectionColumn() ? 1 : 0);\n                    const cursorIsOnCell = nonHiddenColumnIndex - 1 === this.cursorPosition?.col \n                      && rowIndex + 1 === this.cursorPosition?.row;\n                    return cell.column.customCells\n                        ? (<td tabIndex={cursorIsOnCell ? 0 : -1}\n                               aria-colindex={this.atLeastOneColumnHidden() ? nonHiddenColumnIndex : null}>\n                            <slot name={cell.column.id + '-' + get(row.data, this.rowIdPath)}/>\n                        </td>)\n                        : (<td tabIndex={cursorIsOnCell ? 0 : -1}\n                               aria-colindex={this.atLeastOneColumnHidden() ? nonHiddenColumnIndex : null}\n                               part={cell.column.path + '-column'}>{this.getCellContent(row, cell)}</td>)\n                }\n            )}\n        </tr>;\n    }\n    \n    private rowCssPartsWithoutEmptyList(row: WcsGridRow): string[] | null | undefined {\n        const parts = this.rowCssPartsFn(row);\n        return parts?.length === 0 ? null : parts;\n    }\n}\n\n/**\n * Pour resize le tableau\n * https://www.brainbell.com/javascript/making-resizable-table-js.htmls\n *\n */\n"]}