{"version":3,"file":"grid.e2e.js","sourceRoot":"","sources":["../../../src/components/grid/grid.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage } from \"@stencil/core/testing\";\nimport { setWcsContent } from \"../../utils/tests\";\n\ndescribe('Grid component', () => {\n    describe('Events', () => {\n        describe('simple', () => {\n            it('should emit a wcsGridSelectionChange event when a row is selected', async () => {\n                // Given\n                const page = await newE2EPage();\n                const data = [{ id: 1, first_name: 'John' }, { id: 2, first_name: 'Doe' }, { id: 3, first_name: 'Jane' }, { id: 4, first_name: 'Smith' }]\n                await setWcsContent(page, `\n                    <wcs-grid id=\"simpleGrid\" selection-config=\"single\" sort=\"\">\n                        <wcs-grid-column path=\"first_name\" name=\"First Name\"></wcs-grid-column>\n                    </wcs-grid>\n                `);\n\n                const simpleGrid = await page.find('#simpleGrid');\n                simpleGrid.setProperty('data', data);\n                await page.waitForChanges();\n\n                const eventSpy = await simpleGrid.spyOnEvent('wcsGridSelectionChange');\n\n                // When\n                const gridRadioFirstRow = await page.find('wcs-grid >>> table tbody tr:first-child td .grid-radio');\n\n                await gridRadioFirstRow.click();\n\n                // Then\n                expect(eventSpy)\n                    .toHaveReceivedEventDetail({\n                        selectedRows: [{ data: data[0], selected: true }], // compare by reference (deep equality)\n                        changedRow: {\n                            selected: true,\n                            data: data[0], // compare by reference (deep equality)\n                            // page is not present because we don't have any pagination with <wcs-grid-pagination>\n                        }\n                    });\n            });\n        });\n\n        describe('multiple', () => {\n            it('should emit a wcsGridSelectionChange event when a row is selected', async () => {\n                // Given\n                const page = await newE2EPage();\n                const data = [{ id: 1, first_name: 'John' }, { id: 2, first_name: 'Doe' }, { id: 3, first_name: 'Jane' }, { id: 4, first_name: 'Smith' }]\n                await setWcsContent(page, `\n                    <wcs-grid id=\"simpleGrid\" selection-config=\"multiple\" sort=\"\">\n                        <wcs-grid-column path=\"first_name\" name=\"First Name\"></wcs-grid-column>\n                    </wcs-grid>\n                `);\n\n                const simpleGrid = await page.find('#simpleGrid');\n                simpleGrid.setProperty('data', data);\n                await page.waitForChanges();\n\n                const eventSpy = await simpleGrid.spyOnEvent('wcsGridSelectionChange');\n\n                // When\n                const wcsCheckboxFirstRow = await page.find('wcs-grid >>> table tbody tr:first-child td wcs-checkbox');\n                await wcsCheckboxFirstRow.click();\n\n                // Then\n                expect(eventSpy)\n                    .toHaveReceivedEventDetail({\n                        selectedRows: [{ data: data[0], selected: true }], // compare by reference (deep equality)\n                        changedRow: {\n                            selected: true,\n                            data: data[0], // compare by reference (deep equality)\n                            // page is not present because we don't have any pagination with <wcs-grid-pagination>\n                        }\n                    });\n            });\n            it('should emit a wcsGridSelectionChange event when a row is unselected', async () => {\n                // Given\n                const page = await newE2EPage();\n                const data = [{ id: 1, first_name: 'John' }, { id: 2, first_name: 'Doe' }, { id: 3, first_name: 'Jane' }, { id: 4, first_name: 'Smith' }]\n                await setWcsContent(page, `\n                    <wcs-grid id=\"simpleGrid\" selection-config=\"multiple\" sort=\"\">\n                        <wcs-grid-column path=\"first_name\" name=\"First Name\"></wcs-grid-column>\n                    </wcs-grid>\n                `);\n\n                const simpleGrid = await page.find('#simpleGrid');\n                simpleGrid.setProperty('data', data);\n                await page.waitForChanges();\n\n                const wcsCheckboxFirstRow = await page.find('wcs-grid >>> table tbody tr:first-child td wcs-checkbox');\n                await wcsCheckboxFirstRow.click(); // Row is selected\n\n                const eventSpy = await simpleGrid.spyOnEvent('wcsGridSelectionChange');\n\n                // When\n                await wcsCheckboxFirstRow.click(); // Row is unselected\n\n                // Then\n                expect(eventSpy)\n                    .toHaveReceivedEventDetail({\n                        selectedRows: [],\n                        changedRow: {\n                            selected: false,\n                            data: data[0], // compare by reference (deep equality)\n                            // page is not present because we don't have any pagination with <wcs-grid-pagination>\n                        }\n                    });\n            });\n            it('should emit a wcsGridSelectionChange event when a new row is selected while another are already selected', async () => {\n                // Given\n                const page = await newE2EPage();\n                const data = [{ id: 1, first_name: 'John' }, { id: 2, first_name: 'Doe' }, { id: 3, first_name: 'Jane' }, { id: 4, first_name: 'Smith' }]\n                await setWcsContent(page, `\n                    <wcs-grid id=\"simpleGrid\" selection-config=\"multiple\" sort=\"\">\n                        <wcs-grid-column path=\"first_name\" name=\"First Name\"></wcs-grid-column>\n                    </wcs-grid>\n                `);\n\n                const simpleGrid = await page.find('#simpleGrid');\n                simpleGrid.setProperty('data', data);\n                await page.waitForChanges();\n\n                const wcsCheckboxFirstRow = await page.find('wcs-grid >>> table tbody tr:first-child td wcs-checkbox');\n                await wcsCheckboxFirstRow.click();\n\n                const eventSpy = await simpleGrid.spyOnEvent('wcsGridSelectionChange');\n\n                // When\n                const wcsCheckboxLastChild = await page.find('wcs-grid >>> table tbody tr:last-child td wcs-checkbox');\n                await wcsCheckboxLastChild.click();\n\n                // Then\n                expect(eventSpy)\n                    .toHaveReceivedEventDetail({\n                        selectedRows: [{ data: data[0], selected: true }, { data: data[data.length - 1], selected: true }], // compare by reference (deep equality)\n                        changedRow: {\n                            selected: true,\n                            data: data[data.length - 1], // compare by reference (deep equality)\n                            // page is not present because we don't have any pagination with <wcs-grid-pagination>\n                        }\n                    });\n            });\n            it('should emit a wcsGridSelectionChange event when all rows are selected', async () => {\n                // Given\n                const page = await newE2EPage();\n                const data = [{ id: 1, first_name: 'John' }, { id: 2, first_name: 'Doe' }, { id: 3, first_name: 'Jane' }, { id: 4, first_name: 'Smith' }]\n                await setWcsContent(page, `\n                    <wcs-grid id=\"simpleGrid\" selection-config=\"multiple\" sort=\"\">\n                        <wcs-grid-column path=\"first_name\" name=\"First Name\"></wcs-grid-column>\n                    </wcs-grid>\n                `);\n\n                const simpleGrid = await page.find('#simpleGrid');\n                simpleGrid.setProperty('data', data);\n                await page.waitForChanges();\n\n                const eventSpy = await simpleGrid.spyOnEvent('wcsGridSelectionChange');\n\n                // When\n                const wcsCheckboxAll = await page.find('wcs-grid >>> table thead th:first-child wcs-checkbox');\n                await wcsCheckboxAll.click();\n\n                // Then\n                expect(eventSpy)\n                    .toHaveReceivedEventDetail({\n                        selectedRows: data.map(d => {\n                            return { data: d, selected: true };\n                        }), // compare by reference (deep equality)\n                        changedRow: 'allCheckbox'\n                    });\n            });\n        });\n    });\n});\n"]}