import { h, Host } from "@stencil/core";
import { SelectArrow } from "../select/select-arrow";
import { inheritAriaAttributes, inheritAttributes, setOrRemoveAttribute } from "../../utils/helpers";
const ACCORDION_INHERITED_ATTRS = ['tabindex', 'title'];
/**
 * The accordion-panel is a subcomponent of `wcs-accordion`. It represents every panel of the accordion that can be expanded.
 *
 *
 * @cssprop --wcs-accordion-panel-color-default - Default color of the accordion panel
 * @cssprop --wcs-accordion-panel-color-highlight - Highlight color of the accordion panel
 * @cssprop --wcs-accordion-panel-color-hover - Hover color of the accordion panel
 * @cssprop --wcs-accordion-panel-color-press - Press color of the accordion panel
 * @cssprop --wcs-accordion-panel-action-color-default - Default action color of the accordion panel
 * @cssprop --wcs-accordion-panel-action-color-highlight - Highlight action color of the accordion panel
 * @cssprop --wcs-accordion-panel-action-color-hover - Hovered action color of the accordion panel
 * @cssprop --wcs-accordion-panel-action-color-press - Pressed action color of the accordion panel
 * @cssprop --wcs-accordion-panel-background-color-default - Default background color of the accordion panel
 * @cssprop --wcs-accordion-panel-background-color-highlight - Highlight background color of the accordion panel
 * @cssprop --wcs-accordion-panel-background-color-hover - Hover background color of the accordion panel
 * @cssprop --wcs-accordion-panel-background-color-press - Press background color of the accordion panel
 * @cssprop --wcs-accordion-panel-header-font-size - Font size of the accordion panel header
 * @cssprop --wcs-accordion-panel-header-font-weight - Font weight of the accordion panel header
 * @cssprop --wcs-accordion-panel-border-radius - Border radius of the accordion panel
 * @cssprop --wcs-accordion-panel-border-radius-open - Border radius of the open accordion panel
 * @cssprop --wcs-accordion-panel-padding-vertical - Vertical padding of the accordion panel
 * @cssprop --wcs-accordion-panel-padding-horizontal - Horizontal padding of the accordion panel
 * @cssprop --wcs-accordion-panel-header-border-width - Border width of the accordion panel header
 * @cssprop --wcs-accordion-panel-border-width - Border width of the accordion panel
 * @cssprop --wcs-accordion-panel-border-width-focus - Border width of the accordion panel when focused
 * @cssprop --wcs-accordion-panel-border-color - Border color of the accordion panel
 * @cssprop --wcs-accordion-panel-border-color-focus - Border color of the accordion panel when focused
 * @cssprop --wcs-accordion-panel-border-style-focus - Border style of the accordion panel when focused
 * @cssprop --wcs-accordion-transition-duration - Transition duration of the accordion panel
 */
export class AccordionPanel {
    constructor() {
        this.inheritedAttributes = {};
        this.open = false;
        this.hideActionText = false;
        this.highlight = false;
        this.groupContentWithHeader = false;
    }
    openChange(newValue) {
        this.wcsOpenChange.emit(newValue);
    }
    componentWillLoad() {
        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, ACCORDION_INHERITED_ATTRS));
    }
    async setAriaAttribute(attr, value) {
        setOrRemoveAttribute(this.nativeButton, attr, value);
    }
    async close() {
        this.open = false;
    }
    render() {
        return (h(Host, { key: '72253126a8cf58f763fd07bff54c0cf2c446afdc' }, h("button", Object.assign({ key: '97b70c995180acbd0fcfc97a43ea9208fdc464ff', "aria-expanded": this.open ? "true" : "false", "aria-controls": "content", class: "header", ref: (el) => this.nativeButton = el, onClick: () => this.open = !this.open }, this.inheritedAttributes), h("slot", { key: '1b2d8ad5d8ee9a30f5e3d90aad3888f2061cfab8', name: "header" }), h("span", { key: '27867e5c690c771735f63115661e2e4949aac3f3', class: "header-action" }, !this.hideActionText && (h("span", { key: '3ca56e1a94f8366117bb3cdeabeab8ee6ead8da8' }, this.open ? 'Fermez' : 'Ouvrez')), h(SelectArrow, { key: 'eddb7be148606307d13b785aae423b72410495c3', up: this.open }))), h("div", { key: '2be057b4461c0c969fd4285509dab6514487edb6', class: "content", id: "content" }, h("slot", { key: '5be6f3677c52dde4f2f64058d1a378e455da3d27', name: "content" }))));
    }
    static get is() { return "wcs-accordion-panel"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["accordion-panel.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["accordion-panel.css"]
        };
    }
    static get properties() {
        return {
            "open": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "open",
                "reflect": true,
                "defaultValue": "false"
            },
            "hideActionText": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies whether the component should display the open/close text.\nif false, it won't show the open/close text."
                },
                "attribute": "hide-action-text",
                "reflect": true,
                "defaultValue": "false"
            },
            "highlight": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies whether the component should highlight when open with primary color.\nif true, the background color will be the primary color.\nif false, the background color will be wcs-light."
                },
                "attribute": "highlight",
                "reflect": true,
                "defaultValue": "false"
            },
            "groupContentWithHeader": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies wether the component should group the content with header in one card\nif true, there will be only one card with the header and the content\nNothing change when the panel is close"
                },
                "attribute": "group-content-with-header",
                "reflect": true,
                "defaultValue": "false"
            }
        };
    }
    static get events() {
        return [{
                "method": "wcsOpenChange",
                "name": "wcsOpenChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "setAriaAttribute": {
                "complexType": {
                    "signature": "(attr: AriaAttributeName, value: string | null | undefined) => Promise<void>",
                    "parameters": [{
                            "name": "attr",
                            "type": "\"role\" | `aria-${string}`",
                            "docs": ""
                        }, {
                            "name": "value",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AriaAttributeName": {
                            "location": "import",
                            "path": "../../utils/mutable-aria-attribute",
                            "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            },
            "close": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "open",
                "methodName": "openChange"
            }];
    }
}
//# sourceMappingURL=accordion-panel.js.map
