{"version":3,"file":"select.js","sourceRoot":"","sources":["../../../src/components/select/select.tsx"],"names":[],"mappings":"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":["import {\n    Component,\n    ComponentInterface,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Listen,\n    Method,\n    Prop,\n    State,\n    Watch\n} from '@stencil/core';\n\nimport { interpret, Interpreter, Machine, MachineConfig, MachineOptions } from 'xstate';\nimport {\n    isWcsSelectSize,\n    SelectChangeEventDetail,\n    SelectFilterChangeEventDetail,\n    WcsDefaultSelectFilterFn,\n    WcsSelectFilterFn,\n    WcsSelectSize,\n    WcsSelectSizeValue\n} from './select-interface';\nimport { SelectArrow } from './select-arrow';\nimport { SelectOptionChosedEvent, SelectOptionValue } from '../select-option/select-option-interface';\nimport {\n    isElement,\n    generateUniqueId,\n    findItemLabel,\n    inheritAriaAttributes,\n    inheritAttributes, setOrRemoveAttribute, compareLists\n} from '../../utils/helpers';\nimport { SelectChips } from './select-chips';\nimport { createPopper, Instance } from '@popperjs/core';\nimport { isEqual } from 'lodash-es';\nimport { getActionForKeyboardEvent, KeyboardEventAssociatedAction } from './select-keyboard-event';\nimport { isFocusable } from '../../utils/accessibility';\nimport { AriaAttributeName, MutableAriaAttribute } from \"../../utils/mutable-aria-attribute\";\n\ninterface SelectStateSchema {\n    states: {\n        closed: {};\n        opened: {};\n    };\n}\n\ntype SelectEvent\n    = { type: 'OPEN' }\n    | { type: 'CLOSE', value: { shouldBlur?: boolean, fromKeyboard: boolean } }\n    | { type: 'CLICK' }\n    | { type: 'OPTION_SELECTED', value: { option: SelectOptionChosedEvent, fromKeyboard: boolean } };\n\nconst SELECT_MACHINE_CONFIG: MachineConfig<any, SelectStateSchema, SelectEvent> = {\n    key: 'select',\n    initial: 'closed',\n    states: {\n        closed: {\n            entry: ['close'],\n            on: {\n                CLICK: 'opened',\n                OPEN: 'opened',\n                OPTION_SELECTED: {actions: ['selectOption']}\n            },\n        },\n        opened: {\n            entry: ['open'],\n            on: {\n                CLICK: 'closed',\n                CLOSE: 'closed',\n                OPTION_SELECTED: {actions: ['selectOption']}\n            },\n        },\n    }\n};\n\nconst SELECT_INHERITED_ATTRS = ['tabindex', 'title'];\n\n/**\n * The select component (also named combobox) is a form component that allows users to select one or more options\n * from a list.\n * Use it with several slotted `wcs-select-option` inside.\n *\n * @slot filter-no-result Contains the customizable \"No result found\" div (autocomplete mode only).\n * \n * @cssprop --wcs-select-control-arrow-color - Color of the select arrow\n * @cssprop --wcs-select-control-arrow-color-disabled - Color of the select arrow when disabled\n * \n * @cssprop --wcs-select-control-background-color - Background color of the select control\n * \n * @cssprop --wcs-select-control-line-height - Line height of the select control\n * \n * @cssprop --wcs-select-options-padding - Padding of the select options container\n * \n * @cssprop --wcs-select-control-border-radius - Border radius of the select control\n * @cssprop --wcs-select-control-border-width-default - Border width of the select control when not focused\n * @cssprop --wcs-select-control-border-width-focus - Border width of the select control when focused\n * \n * @cssprop --wcs-select-control-border-color-default - Border color of the select control when not focused\n * @cssprop --wcs-select-control-border-color-disabled - Border color of the select control when disabled\n * @cssprop --wcs-select-control-border-color-error - Border color of the select control when error\n * @cssprop --wcs-select-control-border-color-focus - Border color of the select control when focused (not opened, but the control is focused)\n * \n * @cssprop --wcs-select-value-color - Text color of the select value when not focused \n * @cssprop --wcs-select-value-font-weight - Font weight of the select value\n * \n * @cssprop --wcs-select-placeholder-color - Text color of the select placeholder\n * @cssprop --wcs-select-placeholder-font-weight - Font weight of the select placeholder\n * @cssprop --wcs-select-placeholder-font-style - Font style of the select placeholder\n *\n * @cssprop --wcs-select-text-color-disabled - Text color of the select when disabled\n *\n * @cssprop --wcs-select-control-border-style-default - Border style of the select control when not focused\n * @cssprop --wcs-select-control-border-style-focus - Border style of the select control when focused\n * @cssprop --wcs-select-control-border-style-error - Border style of the select control when error\n * \n * @cssprop --wcs-select-control-chips-gap - Gap between chips (only in multiple mode)\n *\n * @cssprop --wcs-select-control-height-m - Height of the select control in medium size\n * @cssprop --wcs-select-control-height-l - Height of the select control in large size\n * \n * @cssprop --wcs-select-control-autocomplete-padding-vertical-m - Padding vertical (top - bottom) of the select control in size m\n * @cssprop --wcs-select-control-autocomplete-padding-vertical-l - Padding vertical (top - bottom) of the select control in size l\n * @cssprop --wcs-select-control-padding-horizontal-m - Padding horizontal (left - right) in medium size\n * @cssprop --wcs-select-control-padding-horizontal-l - Padding horizontal (left - right) in large size\n * \n * @cssprop --wcs-select-control-font-size-m - Font size of the select in size m\n * @cssprop --wcs-select-control-font-size-l - Font size of the select in size m\n * \n * \n * @cssprop --wcs-select-control-chip-color-default - Color default of the select chip\n * @cssprop --wcs-select-control-chip-color-disabled - Color disabled of the select chip\n * @cssprop --wcs-select-control-chip-background-color-default - Background color default of the select chip\n * @cssprop --wcs-select-control-chip-background-color-disabled - Disabled background color of the select chip\n * @cssprop --wcs-select-control-chip-padding-vertical - Padding vertical (top - bottom) of the select chip\n * @cssprop --wcs-select-control-chip-padding-horizontal - Padding horizontal (left - right) of the select chip\n * @cssprop --wcs-select-control-chip-line-height - Line height of the select chip\n * @cssprop --wcs-select-control-chip-border-radius - Border radius of the select chip\n * \n * @cssprop --wcs-select-overlay-max-height - Max height of the select overlay\n * @cssprop --wcs-select-overlay-background-color - Background color of the select overlay\n * @cssprop --wcs-select-overlay-border-width - Border width of the select overlay\n * @cssprop --wcs-select-overlay-border-color - Border color of the select overlay\n * @cssprop --wcs-select-overlay-border-radius - Border radius of the overlay\n */\n@Component({\n    tag: 'wcs-select',\n    styleUrl: 'select.scss',\n    shadow: true\n})\nexport class Select implements ComponentInterface, MutableAriaAttribute {\n    @Element() private el!: HTMLWcsSelectElement;\n    private inheritedAttributes: { [k: string]: any } = {};\n    \n    private stateService!: Interpreter<any, SelectStateSchema, SelectEvent>;\n\n    private selectId = `wcs-select-${selectIds++}`;\n    private labelElement: HTMLWcsLabelElement;\n    private optionsEl!: HTMLDivElement;\n    private optionsId = generateUniqueId(\"OPTIONS\");\n    private controlEl!: HTMLDivElement;\n\n    // Only used for multiples.\n    private values: SelectOptionValue[];\n\n    /**\n     * This attribute mutate when a new option is selected OR unselected\n     * @private\n     */\n    private lastModifiedOptionElement: HTMLWcsSelectOptionElement | null;\n    /**\n     * It serves for accessibility feature: keyboard navigation. It serves to focus the option if defined when the select\n     * is opened based on which key pressed.\n     *\n     * When the select is <b>opened</b> user can navigate through options with keyboard:\n     *\n     * - Arrow right | down: `lastFocusedOptionElement` equals to the next option of `lastFocusedOptionElement` or\n     * the first if `lastFocusedOptionElement` is not defined\n     * - Arrow left | top: `lastFocusedOptionElement` equals to the previous enabled option of `lastFocusedOptionElement`\n     * or the first if `lastFocusedOptionElement` is not defined\n     * - Page up: `lastFocusedOptionElement` equals to the first enabled option\n     * - Page down: `lastFocusedOptionElement` equals to the last enabled option\n     * @private\n     */\n    private lastFocusedOptionElement: HTMLWcsSelectOptionElement | null;\n\n    // Only used for autocomplete.\n    private lastHighlightedOptionElement: HTMLWcsSelectOptionElement | null;\n    private autocompleteInput: HTMLInputElement;\n\n    /** Whether the select is expanded */\n    @State()\n    private expanded: boolean = false;\n\n    /**\n     * Specify the size (height) of the select.\n     */\n    @Prop({reflect: true}) size: WcsSelectSize = 'm';\n\n    /** Text to display for the selected option, when no option is selected, the value is undefined. */\n    @State()\n    private displayText: string;\n\n    /** When the host is focused. */\n    @State()\n    // @ts-ignore\n    private focused: boolean;\n\n    /** The currently selected value. */\n    @Prop({mutable: true})\n    value?: any | null;\n\n    /** The text to display when the select is empty. */\n    @Prop({mutable: true, reflect: true})\n    placeholder?: string | null;\n\n    /** If `true`, the user cannot interact with the select. */\n    @Prop({ reflect: true, mutable: true })\n    disabled: boolean = false;\n\n    /**\n     * If `true`, the user must fill in a value before submitting a form.\n     */\n    @Prop({ reflect: true })\n    required: boolean = false;\n\n    /** If `true`, the user can select multiple values at once. */\n    @Prop({ reflect: true })\n    multiple: boolean = false;\n\n    /** If `true`, the select acts as an autocomplete field to filter your results. */\n    @Prop({ reflect: true })\n    autocomplete: boolean = false;\n\n    /**\n     * **Only works with `autocomplete` mode.**  \n     * If `true`, the server mode disables the client-side filtering on your select and allows you to handle\n     * which options should be present in your DOM.\n     */\n    @Prop({ reflect: true })\n    serverMode: boolean = false;\n\n    /**\n     * **Only works with `autocomplete` mode.**  \n     * Customizable sort function to change the comparison of values. If not provided, uses the default behavior :\n     * `option.textContent.toLowerCase().startsWith(filter.toLowerCase())`\n     */\n    @Prop({attribute: null}) filterFn: WcsSelectFilterFn;\n\n    /** If `true`, selected items are shown in chips mode. */\n    @Prop({ reflect: true })\n    chips: boolean = false;\n\n    /** The name of the control, which is submitted with the form data. */\n    @Prop()\n    name?: string;\n\n    /** Function used to compare options, default : deep comparison. */\n    @Prop()\n    compareWith?: (optionValue: any, selectedValue: any) => boolean = (optionValue, selectedValue) => isEqual(optionValue, selectedValue);\n\n    private popper: Instance;\n\n    /**\n     * Boolean to toggle the text \"No result found\" (only for autocomplete with filter)\n     * @private\n     */\n    @State() private showNoResultFoundLabel: boolean = false;\n\n    /**\n     * Value of the autocomplete input field\n     * @private\n     */\n    @State() private autocompleteValue = undefined;\n\n    @State() private overlayDirection: 'bottom' | 'top' = 'bottom';\n\n    /** Emitted when the value has changed. */\n    @Event() wcsChange!: EventEmitter<SelectChangeEventDetail>;\n\n    /** Emitted when the select has focus. */\n    @Event() wcsFocus!: EventEmitter<FocusEvent>;\n\n    /** Emitted when the select loses focus. */\n    @Event() wcsBlur!: EventEmitter<FocusEvent>;\n\n    /** Emitted when the autocomplete filter has changed. */\n    @Event() wcsFilterChange!: EventEmitter<SelectFilterChangeEventDetail>;\n\n    /** Open the component. */\n    @Method()\n    async open() {\n        this.stateService.send('OPEN');\n    }\n\n    /** Close the component. */\n    @Method()\n    async close() {\n        this.stateService.send('CLOSE');\n    }\n\n    @Watch('value')\n    onValueChangeHandler(newValue: any) {\n        this.updateSelectedValue(newValue);\n    }\n\n    /**\n     * Updates the selected value(s) of the component and manages the internal state accordingly\n     *\n     * @param value - The value(s) to be selected in the component\n     *                For single selection mode: any value that matches an option's value\n     *                For multiple selection mode: a single value or an array of values\n     * @param resetIfNoValue - When true and no value is provided, the select component will be reset\n     *                        Defaults to true\n     */\n    private updateSelectedValue(value: any, resetIfNoValue = true) {\n        // If no value is passed, the select is reset.\n        if (!value && resetIfNoValue) {\n            this.reset();\n        }\n        if (this.multiple) {\n            // If user don't give an array, we provide one\n            if (!Array.isArray(value)) {\n                value = [value];\n            }\n\n            // We assume that the last modified option in multiple mode is the last one in the array\n            this.lastModifiedOptionElement = value.length > 0 ? Array.from(this.options).find(opt => this.compareWith(opt.value, value[value.length - 1])) ?? null : null;\n\n            if (this.serverMode) {\n                // in server mode, we don't know all the possible select options, so we assume the value is correct,\n                // and we just sync the displayText and current available options\n                const compareResult = compareLists(this.values.map(v => v.value), value, this.compareWith);\n                compareResult.added.forEach(addedOption => {\n                    const option = Array.from(this.options).find(opt => this.compareWith(opt.value, addedOption)); \n                    if (option) {\n                        this.values.push({\n                            value: option.value,\n                            displayText: option.innerText,\n                            chipColor: option.chipColor,\n                            chipBackgroundColor: option.chipBackgroundColor\n                        });\n                        option.selected = true;\n                    }\n                });\n                \n                // We update the selected options when the slot changes to keep the selected options in sync with the current value\n                compareResult.kept.forEach((keptOption: string) => {\n                    const option = Array.from(this.options).find(opt => this.compareWith(opt.value, keptOption));\n                    if (option) {\n                        option.selected = true;\n                    }\n                })\n                \n                compareResult.removed.forEach(removedOption => {\n                    this.values = this.values.filter(v => !this.compareWith(v.value, removedOption));\n                    const removedOptionElement = Array.from(this.options).find(opt => this.compareWith(opt.value, removedOption));\n                    if (removedOptionElement) {\n                        removedOptionElement.selected = false;\n                    }\n                });\n            } else {\n                this.values = [];\n    \n                this.options.forEach((opt: HTMLWcsSelectOptionElement) => {\n                    const isSelected = value ?\n                        value.findIndex(v => this.compareWith(opt.value, v)) !== -1\n                        : false;\n                    if (isSelected) {\n                        this.values.push({\n                            value: opt.value,\n                            displayText: opt.innerText,\n                            chipColor: opt.chipColor,\n                            chipBackgroundColor: opt.chipBackgroundColor\n                        });\n                    }\n                    opt.selected = isSelected;\n                });\n            }\n            // update select placeholder text\n            this.displayText = this.values.length !== 0\n                ? this.values.map(v => v.displayText).join(', ')\n                : undefined;\n        } else {\n            this.options.forEach((opt: HTMLWcsSelectOptionElement) => {\n                const isSelected = this.compareWith(opt.value, value);\n                if (isSelected) {\n                    this.displayText = opt.innerText;\n                    this.lastModifiedOptionElement = opt;\n                    if (this.autocomplete) {\n                        this.setAutocompleteValue(opt.innerText);\n                    }\n                }\n                opt.selected = isSelected;\n            });\n        }\n    }\n\n    /**\n     * Reset the select: unselects all options for multiple mode and displays the placeholder\n     * @private\n     */\n    private reset() {\n        this.values = [];\n        this.displayText = undefined;\n        if (this.autocomplete) {\n            // When need to reset the internal filter state of the component as the mutation of \n            // autocompleteValue from the code doesn't call onAutocompleteInputEvent method.\n            this.setAutocompleteValue('', true);\n        }\n        this.options.forEach((opt: HTMLWcsSelectOptionElement) => {\n            opt.selected = false;\n        });\n    }\n\n    componentDidLoad() {\n        this.optionsEl = this.el.shadowRoot.querySelector('.wcs-select-options');\n        this.controlEl = this.el.shadowRoot.querySelector('.wcs-select-control');\n\n        const stateMachine = Machine(\n            SELECT_MACHINE_CONFIG,\n            this.initMachineOptions()\n        );\n        // FIXME: type checking failed...\n        // @ts-ignore\n        this.stateService = interpret(stateMachine);\n\n        if (this.multiple) {\n            this.values = [];\n        }\n\n        this.stateService.start();\n        if (this.optionsEl.querySelector('slot') === null) {\n            this.replaceOptions_firefoxBefore63();\n            this.listenDomUpdate_firefoxBefore63();\n        }\n\n        if (this.value !== undefined) {\n            this.updateSelectedValue(this.value);\n        }\n\n        this.popper = this.createPopperInstance();\n\n        // if the select is inside a wcs-form-field, we set an id to the wcs-label if present\n        // the wcs-label element reference is kept to compute aria-label value during the rendering\n        this.labelElement = findItemLabel(this.el);\n        if (this.labelElement) {\n            this.labelElement.id = this.selectId + \"-lbl\";\n        }\n    }\n\n    private createPopperInstance() {\n        return createPopper(this.controlEl, this.optionsEl, {\n            placement: \"bottom\",\n            modifiers: [\n                {\n                    name: 'offset',\n                    options: {\n                        offset: [0, 4] // we want 4px between select control and select options\n                    }\n                }\n            ]\n        });\n    }\n\n    private emitChange(newValue: any): void {\n        this.wcsChange.emit({\n            value: newValue\n        });\n    }\n\n    private replaceOptions_firefoxBefore63() {\n        Array.from(this.el.querySelectorAll('wcs-select-option'))\n            .forEach(option => {\n                if (option.parentNode === this.el) {\n                    this.el.removeChild(option);\n                    this.optionsEl.appendChild(option);\n                }\n            });\n    }\n\n    private listenDomUpdate_firefoxBefore63() {\n        const observer = new MutationObserver((mutationsList) => {\n            for (const mutation of mutationsList) {\n                if (mutation.type === 'childList') {\n                    this.replaceOptions_firefoxBefore63();\n                }\n            }\n        });\n        observer.observe(this.el, {childList: true});\n    }\n    \n    componentWillRender(): Promise<void> | void {\n        if (this.multiple) {\n            this.options\n              .forEach((opt: HTMLWcsSelectOptionElement) => opt.multiple = true);\n        }\n    }\n\n    componentWillLoad(): Promise<void> | void {\n        if (!isWcsSelectSize(this.size)) {\n            console.warn(`Invalid size value for wcs-select : \"${this.size}\". Must be one of \"${WcsSelectSizeValue.join(', ')}\"`);\n            this.size = \"m\"; // Default fallback value\n        }\n        \n        // XXX : special case on this component for attribute inheritance\n        // We only move attributes on the native input when autocomplete is true.\n        // Otherwise, all attributes are on the Host, so we do not need to inherit those.\n        if (this.autocomplete) {\n            this.inheritedAttributes = {\n                ...inheritAriaAttributes(this.el),\n                ...inheritAttributes(this.el, SELECT_INHERITED_ATTRS),\n            };\n        }\n    }\n\n    @Method()\n    async setAriaAttribute(attr: AriaAttributeName, value: string | null | undefined) {\n        if(this.autocomplete === false) {\n            setOrRemoveAttribute(this.el, attr, value);\n        } else {\n            setOrRemoveAttribute(this.autocompleteInput, attr, value);\n        }\n    }\n\n    private get options(): HTMLWcsSelectOptionElement[] {\n        const opts = this.el?.querySelectorAll('wcs-select-option');\n        if (opts && opts.length !== 0) {\n            return opts as any as HTMLWcsSelectOptionElement[];\n        }\n        return [];\n    }\n\n    private get notDisabledOptions(): HTMLWcsSelectOptionElement[] {\n        const opts = this.el?.querySelectorAll('wcs-select-option:not([disabled]):not([aria-hidden])');\n        if (opts && opts.length !== 0) {\n            return opts as any as HTMLWcsSelectOptionElement[];\n        }\n        return [];\n    }\n\n    private initMachineOptions(): Partial<MachineOptions<any, SelectEvent>> {\n        return {\n            actions: {\n                open: () => {\n                    if (!this.disabled) {\n                        this.expanded = true;\n                        this.focused = false;\n                        if(this.multiple === false && this.autocomplete && this.hasValue === false) {\n                            // If we open the select in single autocomplete mode, we update the autocomplete value at \n                            // the blur event so that the displayed value reflect the current select value. \n                            // Indeed, we have to tell the component to take the current filter state manually at the \n                            // opening (because the input event of the autocomplete field is not fired at this point).\n                            if (this.autocompleteValue && this.autocompleteValue !== '') {\n                                this.setAutocompleteValue(this.autocompleteValue);\n                            }\n                        }\n                        this.clearHighlightOnLastHighlightedOption();\n                        if (this.notDisabledOptions.length > 0) {\n                            this.lastFocusedOptionElement = this.lastModifiedOptionElement ?? this.notDisabledOptions[0];\n                            requestAnimationFrame(() => {\n                                this.autocomplete\n                                    ? this.autocompleteInput?.focus()\n                                    : this.lastFocusedOptionElement?.focus();\n                            });\n                        }\n                    }\n                },\n                close: (_, event: SelectEvent) => {\n                    if (event.type === 'CLOSE') {\n                        this.clearHighlightOnLastHighlightedOption();\n                        if (event.value?.shouldBlur) {\n                            this.focused = false;\n                        } else {\n                            if (this.autocomplete && event.value?.fromKeyboard) {\n                                // If we're in autocomplete mode, a keyboard event (e.g. escape) doesn't change the \n                                // focus (so this.el.focus() aren't called because the select was already focused)\n                                // but you still have to go back to the autocomplete input.\n                                this.focusAutocompleteInput();\n                            } else {\n                                // Otherwise, we focus the select element\n                                this.el.focus();\n                            }\n                            this.focused = true;\n                        }\n                    }\n                    this.expanded = false;\n                },\n                selectOption: (_, event) => {\n                    if (event.type === 'OPTION_SELECTED') {\n                        if (this.multiple) {\n                            this.handleOptionSelectedOnMultiple(event.value.option);\n                        } else {\n                            this.handleOptionSelectedOnSingle(event.value.option);\n                            this.stateService.send('CLOSE', {value: {fromKeyboard: event.value.fromKeyboard}});\n                        }\n\n                        if (this.autocomplete) {\n                            if (this.multiple) {\n                                requestAnimationFrame(() => {\n                                    this.autocompleteInput.focus();\n                                })\n                            } else {\n                                this.autocompleteValue = event.value.option.displayText;\n                            }\n                        }\n                        this.emitChange(this.value);\n                    }\n                }\n            },\n            guards: {\n                enabled: () => !this.disabled\n            }\n        };\n    }\n\n    private handleOptionSelectedOnMultiple(event: SelectOptionChosedEvent) {\n        const index = this.values.findIndex(v => this.compareWith(v.value, event.value));\n        if (index === -1) {\n            // this will trigger the watch on value and update the values model\n            this.value = [...this.values.map(v => v.value), event.value];\n        } else {\n            // this will trigger the watch on value and update the values model\n            this.value = this.values.filter(v => !this.compareWith(v.value, event.value)).map(v => v.value);\n        }\n    }\n\n    private handleOptionSelectedOnSingle(event: SelectOptionChosedEvent) {\n        this.value = event.value;\n    }\n\n    disconnectedCallback() {\n        this.stateService?.stop();\n    }\n\n    private get hasValue(): boolean {\n        // TODO: change this behavior.\n        return this.displayText !== undefined;\n    }\n\n    @Listen('mouseup')\n    onMouseUp(event: MouseEvent) {\n        const clickOnScroll = isElement(event.target)\n            && (event.offsetX > event.target.clientWidth\n                || event.offsetY > event.target.clientHeight // If the click il located bellow the component height the click happen in the overlay\n                || event.offsetY < 0); // If the click is made above the component\n\n        const clickOnRemoveChip = event.composedPath()\n            .filter(x => {\n                const el = (x as HTMLElement);\n                return el.nodeName === 'svg' && el.classList.contains('chip');\n            })\n            .length > 0;\n\n        if (!clickOnScroll && !clickOnRemoveChip) {\n            this.stateService.send('CLICK');\n        }\n    }\n\n    @Listen('click', {target: 'window'})\n    onWindowClickEvent(event: MouseEvent) {\n        const firstSelectInEventPath = event.composedPath().filter(x => (x as HTMLElement).nodeName === 'WCS-SELECT')[0];\n        const clickOnCurrentSelect = firstSelectInEventPath === this.el;\n        // TODO: Move this logic in the state machine\n        // FIXME: Doesnt work with single + disabled option\n        if (this.expanded && !clickOnCurrentSelect) {\n            this.stateService.send({type: 'CLOSE', value: {shouldBlur: true, fromKeyboard: false}});\n        }\n    }\n\n    @Listen('keydown')\n    onKeyDown(_event: KeyboardEvent) {\n        const currentState = this.stateService.getSnapshot().matches(\"closed\") ? 'closed' : 'opened';\n        let type: 'autocomplete_unique' | 'autocomplete_multiple' | 'unique' | 'multiple';\n        if (this.autocomplete) {\n            type = this.multiple ? 'autocomplete_multiple' : 'autocomplete_unique';\n        } else {\n            type = this.multiple ? 'multiple' : 'unique';\n        }\n        const actionsFromKeyboardEvents: KeyboardEventAssociatedAction[] = getActionForKeyboardEvent(_event, currentState, type);\n        \n        // If we have at least one associated actions, we prevent the default behavior of the event. \n        // Except if the action is a focus move (we have to handle the preventDefault behavior ourselves in the action implementation)\n        if (actionsFromKeyboardEvents.length != 0 && actionsFromKeyboardEvents.filter(a => a.kind === 'MoveFocus').length === 0) {\n            _event.preventDefault();\n        }\n\n        for (const actionFromKeyboardEvent of actionsFromKeyboardEvents) {\n            this.doActionFromKeyboardEventAssociatedAction(actionFromKeyboardEvent, _event);\n        }\n    }\n\n    doActionFromKeyboardEventAssociatedAction(actionFromKeyboardEvent: KeyboardEventAssociatedAction, event: KeyboardEvent) {\n        switch (actionFromKeyboardEvent.kind) {\n            case \"CloseSelect\":\n                this.stateService.send({\n                    type: 'CLOSE',\n                    value: {shouldBlur: actionFromKeyboardEvent.shouldBlur, fromKeyboard: true}\n                });\n                break;\n            case \"OpenSelect\":\n                this.stateService.send('OPEN');\n                break;\n            case \"SelectOption\":\n                switch (actionFromKeyboardEvent.target) {\n                    case \"next\":\n                        this.selectClosestOption('next');\n                        break;\n                    case \"previous\":\n                        this.selectClosestOption('previous');\n                        break;\n                    case \"first\":\n                        this.selectFirstOption();\n                        break;\n                    case \"last\":\n                        this.selectLastOption();\n                        break;\n                    case \"lastHighlighted\": {\n                        // We have to handle enterKey here because with autocomplete mode, a wcs-select-option\n                        // is only highlighted, therefore the event is not fired\n                        const indexToSelect = Array.from(this.notDisabledOptions).indexOf(this.lastHighlightedOptionElement);\n\n                        if (indexToSelect !== -1) {\n                            this.lastModifiedOptionElement = this.lastHighlightedOptionElement;\n                            this.selectOption(indexToSelect, true);\n                        }\n                        break;\n                    }\n                }\n                break;\n            case \"ClearAutocompleteInput\":\n                this.autocompleteValue = '';\n                break;\n            case \"ClearHighlight\":\n                this.clearHighlightOnLastHighlightedOption();\n                break;\n            case \"HighlightOption\":\n                switch (actionFromKeyboardEvent.target) {\n                    case \"next\":\n                        this.highlightClosestOption('next');\n                        break;\n                    case \"previous\":\n                        this.highlightClosestOption('previous');\n                        break;\n                    case \"first\":\n                        this.highlightFirstOption();\n                        break;\n                    case \"last\":\n                        this.highlightLastOption();\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case \"FocusOption\":\n                switch (actionFromKeyboardEvent.target) {\n                    case \"next\":\n                        this.focusClosestOption('next');\n                        break;\n                    case \"previous\":\n                        this.focusClosestOption('previous')\n                        break;\n                    case \"first\":\n                        this.focusFirstOption()\n                        break;\n                    case \"last\":\n                        this.focusLastOption();\n                        break;\n                    case \"lastFocused\":\n                        if (this.lastFocusedOptionElement != null) {\n                            this.focusOption(Array.from(this.notDisabledOptions).indexOf(this.lastFocusedOptionElement));\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case \"MoveFocus\":\n                switch (actionFromKeyboardEvent.target) {\n                    case \"previous\": {\n                        let elementToFocus: Element = this.el.previousElementSibling ?? this.el.parentElement;\n                        while (elementToFocus) {\n                            if (isFocusable(elementToFocus)) break;\n                            elementToFocus = elementToFocus.previousElementSibling ?? elementToFocus.parentElement;\n                        }\n                        if (elementToFocus) {\n                            event.preventDefault();\n                            (elementToFocus as HTMLElement).focus();\n                        }\n                        break;\n                    }\n                    default:\n                        break;\n                }\n                break;\n            default:\n                throw new Error(\"Internal error\");\n        }\n    }\n\n    private getClosestActiveOptionIndexForState(direction: 'next' | 'previous', state: 'highlighted' | 'focused' | 'modified'): number | 'nothing' {\n        let concernedOption: HTMLWcsSelectOptionElement | null;\n        switch (state) {\n            case 'focused':\n                concernedOption = this.lastFocusedOptionElement;\n                break;\n            case 'modified':\n                concernedOption = this.lastModifiedOptionElement;\n                break;\n            case 'highlighted':\n                concernedOption = this.lastHighlightedOptionElement;\n                break;\n            default:\n                concernedOption = null;\n        }\n        let currentIndex = Array.from(this.notDisabledOptions).indexOf(concernedOption);\n\n        const MIN_INDEX = 0;\n        const MAX_INDEX = this.notDisabledOptions.length - 1;\n\n        if (direction === 'next' && currentIndex < MAX_INDEX) {\n            currentIndex++;\n        } else if (direction === 'previous' && currentIndex > MIN_INDEX) {\n            currentIndex--;\n        } else {\n            if (!this.autocomplete)\n                return 'nothing';\n\n            // Used to scroll options infinitely with keyboard (autocomplete mode only)\n            if (direction === 'next' && currentIndex >= MAX_INDEX) {\n                currentIndex = 0;\n            }\n            if (direction === 'previous' && currentIndex === MIN_INDEX) {\n                currentIndex = MAX_INDEX;\n            }\n        }\n        return currentIndex;\n    }\n\n    /**\n     * Selects the non-disabled option with the index passed as a parameter.\n     * The method sends an event to the state machine (the same as when clicking on an option with the mouse)\n     * @param indexToSelect Option index within non-deactivated options list\n     * @param fromKeyboard\n     * @private\n     */\n    private selectOption(indexToSelect: number, fromKeyboard = false) {\n        const optionToSelect = this.notDisabledOptions[indexToSelect];\n\n        if (!optionToSelect) return;\n\n        this.sendOptionSelectedToStateMachine({\n            source: optionToSelect,\n            value: optionToSelect.value,\n            displayText: optionToSelect.innerText\n        }, fromKeyboard);\n    }\n\n    private selectClosestOption(direction: 'next' | 'previous'): void {\n        const indexToSelect = this.getClosestActiveOptionIndexForState(direction, 'modified');\n        if (indexToSelect === 'nothing') return;\n        this.selectOption(indexToSelect, true);\n    }\n\n    private selectFirstOption() {\n        if (this.notDisabledOptions.length < 1) {\n            return;\n        }\n\n        this.selectOption(0, true);\n    }\n\n    private selectLastOption() {\n        if (this.notDisabledOptions.length < 1) {\n            return;\n        }\n\n        this.selectOption(this.notDisabledOptions.length - 1, true);\n    }\n\n    private focusOption(indexToFocus: number) {\n        this.lastFocusedOptionElement = this.notDisabledOptions[indexToFocus];\n        this.lastFocusedOptionElement?.focus();\n        this.el.setAttribute(\"aria-activedescendant\", this.lastFocusedOptionElement.id);\n    }\n\n    private focusClosestOption(direction: 'next' | 'previous'): void {\n        const indexToFocus = this.getClosestActiveOptionIndexForState(direction, 'focused');\n        if (indexToFocus === 'nothing') return;\n\n        this.focusOption(indexToFocus);\n    }\n\n    private focusFirstOption() {\n        this.focusOption(0);\n    }\n\n    private focusLastOption() {\n        this.focusOption(this.notDisabledOptions.length - 1);\n    }\n\n    @Listen('wcsSelectOptionClick')\n    selectedOptionChanged(event: CustomEvent<SelectOptionChosedEvent>) {\n        this.sendOptionSelectedToStateMachine(event.detail);\n    }\n\n    sendOptionSelectedToStateMachine(event: SelectOptionChosedEvent, fromKeyboard = false) {\n        this.stateService.send({type: 'OPTION_SELECTED', value: {option: event, fromKeyboard}});\n    }\n\n    onSlotchange() {\n        // We call updateSelectedValue to update the selected options when the slot changes to keep the selected options in sync with the current value.\n        // This also update the displayText value according to the options data.\n        // Finally, this update the internal models for multiple mode and handle the server mode correctly.\n        this.updateSelectedValue(this.value, false);\n\n        // Server-mode only : \"no result\" slot should be visible dynamically if no option is present in the slot\n        if (this.autocomplete && this.serverMode) {\n            this.showNoResultFoundLabel = this.options.length < 1;\n        }\n\n        if (this.multiple) {\n            this.options\n                .forEach((opt: HTMLWcsSelectOptionElement) => opt.multiple = true);\n        }\n    }\n\n    removeChip(v: SelectOptionValue) {\n        this.options\n            .forEach(opt => {\n                if (opt.value === v.value) {\n                    this.sendOptionSelectedToStateMachine({\n                        ...v,\n                        source: opt\n                    });\n                }\n            });\n    }\n\n    //region Autocomplete mode\n\n    private highlightOption(indexToHighlight: number) {\n        this.clearHighlightOnLastHighlightedOption();\n        this.lastHighlightedOptionElement = this.notDisabledOptions[indexToHighlight];\n        if (this.lastHighlightedOptionElement) {\n            this.lastHighlightedOptionElement.highlighted = true;\n            this.autocompleteInput.setAttribute(\"aria-activedescendant\", this.lastHighlightedOptionElement.id);\n            requestAnimationFrame(() => {\n                this.lastHighlightedOptionElement.scrollIntoView({block: \"nearest\", inline: \"nearest\"});\n            })\n        }\n    }\n\n    private highlightFirstOption() {\n        this.highlightOption(0);\n    }\n\n    private highlightLastOption() {\n        this.highlightOption(this.notDisabledOptions.length - 1);\n    }\n\n    private highlightClosestOption(direction: 'next' | 'previous'): void {\n        const indexToHighlight = this.getClosestActiveOptionIndexForState(direction, 'highlighted');\n        if (indexToHighlight === 'nothing') return;\n\n        this.highlightOption(indexToHighlight);\n    }\n\n    /**\n     * This method removes the highlight that applies to the last highlighted option if any.\n     * This is used only for accessibility of autocomplete mode.\n     * @private\n     */\n    private clearHighlightOnLastHighlightedOption() {\n        if (this.lastHighlightedOptionElement) {\n            this.lastHighlightedOptionElement.highlighted = false;\n            this.lastHighlightedOptionElement = null;\n        }\n    }\n\n    private onAutocompleteInputEvent(e: InputEvent) {\n        const filter = this.autocompleteInput.value ?? '';\n\n        this.setAutocompleteValue(filter, false, true); // fromUserInteraction = true\n        // Avoid the inputEvent event to bubble and be emitted, we rather use wcsFilterChange in this case :\n        e.stopPropagation();\n\n    }\n\n    /**\n     * Set the autocomplete value and open the select if needed.\n     * @param filter - The new filter value\n     * @param isReset - If true, the filter is reset and the select is closed\n     * @param fromUserInteraction - If true, the change comes from user interaction (typing), if false it's programmatic\n     * @private\n     */\n    private setAutocompleteValue(filter: string, isReset = false, fromUserInteraction = false): void {\n        this.clearHighlightOnLastHighlightedOption();\n        const newValueIsDifferentFromLastModifiedOption = this.lastModifiedOptionElement == null || this.lastModifiedOptionElement?.textContent !== this.autocompleteValue;\n        // Only open the select automatically when the change comes from user interaction\n        if (!this.expanded && newValueIsDifferentFromLastModifiedOption && !isReset && fromUserInteraction) {\n            this.open(); \n        }\n\n        // Prevents client-side filtering logic from being applied when serverMode is enabled.\n        if (!this.serverMode) {\n            if (filter.length) {\n                const [matchingOptions, optionsToHide] = [[], []];\n                const filteringFunction: WcsSelectFilterFn = this.filterFn ?? WcsDefaultSelectFilterFn;\n                this.options.forEach((optionEl: HTMLWcsSelectOptionElement) =>\n                    (filteringFunction(optionEl, filter) ? matchingOptions : optionsToHide).push(optionEl)\n                );\n\n                this.showNoResultFoundLabel = matchingOptions.length === 0;\n                matchingOptions.forEach(o => {\n                    o.hidden = false;\n                    o.removeAttribute(\"aria-hidden\");\n                });\n                optionsToHide.forEach(o => {\n                    o.hidden = true;\n                    o.setAttribute(\"aria-hidden\", \"true\");\n                });\n            } else {\n                this.showNoResultFoundLabel = false;\n                this.options.forEach(o => {\n                    o.hidden = false;\n                    o.removeAttribute(\"aria-hidden\");\n                });\n            }\n        }\n        \n        if (this.autocompleteValue !== filter) {\n            this.autocompleteValue = filter ?? '';\n            this.wcsFilterChange.emit({\n                value: filter,\n            });\n        }\n    }\n\n    @Listen('focus')\n    onFocus(event: FocusEvent) {\n        if (this.autocomplete) {\n            this.focusAutocompleteInput();\n        }\n        this.wcsFocus.emit(event);\n    }\n\n    private focusAutocompleteInput(): void {\n        this.autocompleteInput?.focus();\n    }\n\n    //endregion\n\n    @Listen('blur', { capture: true })\n    onBlur(event: FocusEvent) {\n        // Avoid emitting a wcsBlur event when the relatedTarget of the blur event is a child or the select itself\n        const target = event.relatedTarget as HTMLElement;\n        if (this.el.contains(target)) {\n            return;\n        }\n        \n        this.wcsBlur.emit(event);\n    }\n\n    componentDidRender() {\n        this.popper?.update();\n    }\n\n    private focusedAttributes() {\n        return !this.disabled ? {tabIndex: 0} : {};\n    }\n\n    private onAutocompleteFieldBlur(_e: FocusEvent) {\n        if (this.multiple === false && this.autocomplete === true && this.hasValue) {\n            this.autocompleteValue = this.displayText;\n        }\n    }\n\n    render() {\n        const ariaLabelValue = `${this.labelElement ? this.labelElement.innerText : ''} ${this.hasValue ? this.displayText : ''}`.trimEnd();\n        const noResultContainerId = 'no-result-container';\n        \n        return (\n            <Host class={this.expanded ? 'expanded ' : ''}\n                  overlayDirection={this.overlayDirection}\n                  {...this.focusedAttributes()}\n                  role={!this.autocomplete ? \"combobox\" : null}\n                  aria-haspopup={!this.autocomplete ? \"listbox\" : null}\n                  aria-owns={!this.autocomplete ? this.optionsId : null}\n                  aria-controls={!this.autocomplete ? this.optionsId : null}\n                  aria-disabled={!this.autocomplete ? (this.disabled ? 'true' : null) : null}\n                  aria-required={!this.autocomplete ? (this.required ? 'true' : 'false') : null}\n                  aria-expanded={!this.autocomplete ? (this.expanded ? 'true' : 'false') : null}\n                  aria-multiselectable={!this.autocomplete ? (this.multiple ? 'true' : 'false') : null}\n                  aria-label={!this.autocomplete ? ariaLabelValue : null}>\n                <div class=\"wcs-select-control\">\n                    <div class=\"wcs-select-value-container\">\n                        {this.hasValue\n                            ?\n                            (this.chips ?\n                                this.values.map((option: SelectOptionValue) =>\n                                    <SelectChips disabled={this.disabled} option={option}\n                                                 onRemove={this.removeChip.bind(this)}/>\n                                )\n                                : (!this.autocomplete || this.autocomplete && this.multiple) &&\n                                <label class=\"wcs-select-value\">{this.displayText}</label>)\n                            : !this.autocomplete && <label class=\"wcs-select-placeholder\">{this.placeholder}</label>\n                        }\n                        {this.autocomplete && <input class=\"autocomplete-field\"\n                                                         value={this.autocompleteValue}\n                                                         role=\"combobox\"\n                                                         aria-haspopup=\"listbox\"\n                                                         aria-label={ariaLabelValue}\n                                                         aria-describedby={noResultContainerId}\n                                                         aria-disabled={this.disabled ? 'true' : null}\n                                                         aria-expanded={this.expanded ? 'true' : 'false'}\n                                                         aria-controls={this.optionsId}\n                                                         aria-owns={this.optionsId}\n                                                         aria-multiselectable={this.multiple ? 'true' : 'false'}\n                                                         aria-autocomplete=\"list\"\n                                                         autocomplete=\"off\"\n                                                         disabled={this.disabled}\n                                                         required={this.required}\n                                                         onBlur={(e) => this.onAutocompleteFieldBlur(e)}\n                                                         placeholder={this.values?.length ? null : this.placeholder}\n                                                         onInput={(e) => this.onAutocompleteInputEvent(e)}\n                                                         ref={el => this.autocompleteInput = el}\n                                                         {...this.inheritedAttributes}/>\n                        }\n                    </div>\n                    <SelectArrow up={this.expanded}/>\n                </div>\n                <div class=\"wcs-select-options\" id={this.optionsId} role=\"listbox\">\n                    <slot name=\"options\" onSlotchange={this.onSlotchange.bind(this)}/>\n                    {(this.autocomplete && this.showNoResultFoundLabel) &&\n                        <div role=\"alert\" id={noResultContainerId} class=\"noresult-container\">\n                            <slot name=\"filter-no-result\">\n                                <span>Aucun résultat</span>\n                            </slot>\n                        </div>\n                    }\n                </div>\n            </Host>\n        );\n    }\n}\n\nlet selectIds = 0;\n"]}