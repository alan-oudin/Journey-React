import { h } from "@stencil/core";
import { MDCRipple } from "@material/ripple";
import { hasShadowDom, inheritAriaAttributes, inheritAttributes, setOrRemoveAttribute } from "../../utils/helpers";
const BUTTON_INHERITED_ATTRS = ['tabindex', 'title'];
/**
 * The button component is used to trigger an action. It can also be a link when specifying href.
 *
 * ## Accessibility guidelines ðŸ’¡
 * > If your button doesn't contain text but only an image, you must set a relevant aria-label on the icon ðŸ‘‰ [see "Square" story below](#square)
 *
 * ## Click event
 *
 * The WCS button relies on the native click event to pass a user click to your app.
 * For now, it's not possible for us to prevent the click event to be fired when the button's disabled attribute is true.
 * This means you'll receive click events on a disabled wcs button.
 * If you're using the button with a library like Angular or React, they have internal mechanisms to prevent this behavior. Your callbacks will therefore not be called.
 * To fix this problem, we plan to provide a wcsClick event in addition to the native click for applications developed without frameworks.
 *
 * @cssprop --wcs-button-plain-color-default - Text/icon color of a plain button
 * @cssprop --wcs-button-stroked-color-default - text/icon color of a stroked button
 * @cssprop --wcs-button-clear-color-default - text/icon color of a clear button
 *
 * @cssprop --wcs-button-color-disabled - text/icon color disabled for mode plain, stroked, clear
 *
 * @cssprop --wcs-button-plain-background-color-default background color of a plain button
 * @cssprop --wcs-button-plain-background-color-disabled - disabled background color of a plain button
 * @cssprop --wcs-button-stroked-background-color-default background color of a stroked button
 * @cssprop --wcs-button-stroked-background-color-disabled - disabled background color of a stroked button
 * @cssprop --wcs-button-clear-background-color-default background color of a clear button
 * @cssprop --wcs-button-clear-background-color-disabled - disabled background color of a clear button
 *
 * @cssprop --wcs-button-plain-ripple-color-default - ripple background color of a plain button
 * @cssprop --wcs-button-stroked-ripple-color-default - ripple background color of a stroked button
 * @cssprop --wcs-button-clear-ripple-color-default - ripple background color of a clear button
 * @cssprop --wcs-button-border-radius-default - border radius for a default button
 * @cssprop --wcs-button-border-radius-rounded - border radius for a rounded button
 *
 * @cssprop --wcs-button-stroked-border-width - border width of a stroked button
 * @cssprop --wcs-button-stroked-border-color-default - default border color of a stroked button
 * @cssprop --wcs-button-stroked-border-color-disabled - disabled border color of a stroked button
 *
 * @cssprop --wcs-button-height-s - height for a size s button
 * @cssprop --wcs-button-font-size-s - font-size for a size s button
 * @cssprop --wcs-button-padding-size-s - padding for a size s button
 *
 * @cssprop --wcs-button-height-m - height for a size m button
 * @cssprop --wcs-button-font-size-m - font-size for a size m button
 * @cssprop --wcs-button-padding-size-m - padding for a size m button
 *
 * @cssprop --wcs-button-height-l - height for a size l button
 * @cssprop --wcs-button-font-size-l - font-size for a size l button
 * @cssprop --wcs-button-padding-size-l - padding for a size l button
 *
 * @cssprop --wcs-button-font-weight - font weight of a plain,stroked,clear button
 */
export class Button {
    constructor() {
        this.inheritedAttributes = {};
        this.type = 'button';
        this.href = undefined;
        this.target = undefined;
        this.disabled = false;
        this.ripple = true;
        this.size = 'm';
        this.shape = 'normal';
        this.mode = 'plain';
        this.loading = false;
    }
    /**
     * Native event click is emit event if we decide to stop propagation of it
     * @param ev
     */
    onClick(ev) {
        if (this.disabled || this.loading) {
            ev.stopImmediatePropagation();
        }
        if (this.type !== 'button' && hasShadowDom(this.el)) {
            // this button wants to specifically submit a form
            // climb up the dom to see if we're in a <form>
            // and if so, then use JS to submit it
            const form = this.el.closest('form');
            if (form) {
                ev.preventDefault();
                const fakeButton = window.document.createElement('button');
                fakeButton.type = this.type;
                fakeButton.style.display = 'none';
                form.appendChild(fakeButton);
                fakeButton.click();
                fakeButton.remove();
            }
        }
    }
    componentWillLoad() {
        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, BUTTON_INHERITED_ATTRS));
    }
    componentDidLoad() {
        this.mdcRipple = new MDCRipple(this.el.shadowRoot.querySelector('.wcs-inner-button'));
    }
    async setAriaAttribute(attr, value) {
        setOrRemoveAttribute(this.nativeButton, attr, value);
    }
    enabledRippleEffect() {
        this.mdcRipple.disabled = false;
    }
    disabledRippleEffect() {
        this.mdcRipple.disabled = true;
    }
    getTagName() {
        return this.href !== undefined ? 'a' : 'button';
    }
    onRippleChange() {
        if (this.ripple) {
            this.enabledRippleEffect();
        }
        else {
            this.disabledRippleEffect();
        }
    }
    render() {
        const TagType = this.getTagName();
        const attrs = this.href !== undefined
            ? { href: this.href, role: 'button', target: this.target }
            : { type: this.type };
        return (h(TagType, Object.assign({ key: '0405add37ee45734819cae0f9e91507e979d1c9a' }, attrs, { class: "wcs-inner-button", disabled: this.disabled || this.loading, ref: (el) => this.nativeButton = el }, this.inheritedAttributes), this.loading && h("wcs-spinner", { key: '03debd8eb23a9db035b92c1e9f51e9fe44a6996b' }), h("slot", { key: 'c36416630b0987bd6ef750bfc7ef211c084dd942' })));
    }
    static get is() { return "wcs-button"; }
    static get encapsulation() { return "shadow"; }
    static get delegatesFocus() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["button.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["button.css"]
        };
    }
    static get properties() {
        return {
            "type": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "WcsButtonType",
                    "resolved": "\"button\" | \"submit\"",
                    "references": {
                        "WcsButtonType": {
                            "location": "import",
                            "path": "./button-interface",
                            "id": "src/components/button/button-interface.ts::WcsButtonType"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specify the button type."
                },
                "attribute": "type",
                "reflect": false,
                "defaultValue": "'button'"
            },
            "href": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Set a URL to point to.<br/>\nIf specified use a `a` tag instead of `btn`."
                },
                "attribute": "href",
                "reflect": false
            },
            "target": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'_blank' | '_self'",
                    "resolved": "\"_blank\" | \"_self\"",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Specifies where to open the linked document when using href (see prop above)<br/>\nDefault '_self' will open the linked document in the same frame as it was clicked"
                },
                "attribute": "target",
                "reflect": false
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specify whether the button is disabled or not."
                },
                "attribute": "disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "ripple": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specify whether the button should have a ripple effect or not."
                },
                "attribute": "ripple",
                "reflect": false,
                "defaultValue": "true"
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "WcsButtonSize",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "WcsButtonSize": {
                            "location": "import",
                            "path": "./button-interface",
                            "id": "src/components/button/button-interface.ts::WcsButtonSize"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specify the size of the button."
                },
                "attribute": "size",
                "reflect": true,
                "defaultValue": "'m'"
            },
            "shape": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "WcsButtonShape",
                    "resolved": "\"normal\" | \"round\" | \"square\"",
                    "references": {
                        "WcsButtonShape": {
                            "location": "import",
                            "path": "./button-interface",
                            "id": "src/components/button/button-interface.ts::WcsButtonShape"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specify the shape of the button."
                },
                "attribute": "shape",
                "reflect": true,
                "defaultValue": "'normal'"
            },
            "mode": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "WcsButtonMode",
                    "resolved": "\"clear\" | \"plain\" | \"stroked\"",
                    "references": {
                        "WcsButtonMode": {
                            "location": "import",
                            "path": "./button-interface",
                            "id": "src/components/button/button-interface.ts::WcsButtonMode"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "This attribute specify the appearance of the button."
                },
                "attribute": "mode",
                "reflect": true,
                "defaultValue": "'plain'"
            },
            "loading": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Flag to display spinner until the end of action"
                },
                "attribute": "loading",
                "reflect": true,
                "defaultValue": "false"
            }
        };
    }
    static get methods() {
        return {
            "setAriaAttribute": {
                "complexType": {
                    "signature": "(attr: AriaAttributeName, value: string | null | undefined) => Promise<void>",
                    "parameters": [{
                            "name": "attr",
                            "type": "\"role\" | `aria-${string}`",
                            "docs": ""
                        }, {
                            "name": "value",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AriaAttributeName": {
                            "location": "import",
                            "path": "../../utils/mutable-aria-attribute",
                            "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "ripple",
                "methodName": "onRippleChange"
            }];
    }
    static get listeners() {
        return [{
                "name": "click",
                "method": "onClick",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=button.js.map
