import { h, Host } from "@stencil/core";
import { inheritAriaAttributes, inheritAttributes, isEnterKey, isEscapeKey, isSpaceKey, setOrRemoveAttribute } from "../../utils/helpers";
import { comNavDidLoadWithResizeObserver, registerCloseHandlerForFocusOutEventOn } from "../com-nav/com-nav-utils";
const COM_NAV_SUBMENU_INHERITED_ATTRS = ['title'];
const WCS_COM_NAV_CATEGORY = 'WCS-COM-NAV-CATEGORY';
/**
 * The com-nav-submenu is a subcomponent of `wcs-com-nav`. It represents an expandable menu containing more items or categories.
 *
 * @cssprop --wcs-com-nav-submenu-button-color - Color of the menu label
 * @cssprop --wcs-com-nav-submenu-button-font-weight - Font-weight of the menu label
 * @cssprop --wcs-com-nav-submenu-button-focus-outline-color - Focus outline color of the menu label
 * @cssprop --wcs-com-nav-submenu-button-gap - Gap inside menu label between text and arrow indicator
 * @cssprop --wcs-com-nav-submenu-desktop-menu-background-color - Background color of the menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-text-color - Text color inside menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-link-font-weight - Link font-weight color inside menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-heading-font-weight - Heading font-weight of the menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-description-font-weight - Description font-weight of the menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-description-gap - Gap between heading and description in the description section of the menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-padding - Padding of the menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-items-padding-left - Padding left around link items group in menu (desktop)
 * @cssprop --wcs-com-nav-submenu-desktop-menu-items-padding-right - Padding right around link items group in menu (desktop)
 * @cssprop --wcs-com-nav-submenu-mobile-text-color - Text color for each text (mobile)
 * @cssprop --wcs-com-nav-submenu-mobile-link-font-weight - Link font-weight for each link (mobile)
 * @cssprop --wcs-com-nav-submenu-mobile-spacing-top - Spacing around top of the submenu (mobile)
 * @cssprop --wcs-com-nav-submenu-mobile-spacing-bottom - Spacing around bottom of the submenu (mobile)
 * @cssprop --wcs-com-nav-submenu-mobile-spacing-left - Spacing around left of the submenu (mobile)
 * @cssprop --wcs-com-nav-submenu-mobile-gap - Gap between each item in submenu (mobile)
 */
export class ComNavSubmenu {
    constructor() {
        this.inheritedAttributes = {};
        this.menuItemsId = `wcs-com-nav-submenu-items`;
        this.label = undefined;
        this.panelTitle = undefined;
        this.panelDescription = undefined;
        this.menuOpen = false;
        this.currentActiveSizing = 'desktop';
    }
    componentWillLoad() {
        const slottedCategoryItems = this.el.querySelectorAll(':scope > wcs-com-nav-category:not([slot])');
        registerCloseHandlerForFocusOutEventOn(slottedCategoryItems, WCS_COM_NAV_CATEGORY);
        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, COM_NAV_SUBMENU_INHERITED_ATTRS));
    }
    componentDidLoad() {
        if (!this.resizeObserver) {
            this.resizeObserver = comNavDidLoadWithResizeObserver(this);
            this.resizeObserver.observe(document.body);
        }
    }
    /**
     * If the user clicks outside the menu, we close it
     */
    onWindowClickEvent(_) {
        if (this.menuOpen)
            this.menuOpen = false;
    }
    onSubmenuOpened(event) {
        // If the clicked menu is not this component, we close it
        if (event.detail.menuElement !== this.el) {
            this.menuOpen = false;
        }
    }
    /**
     * Close the menu when escape is pressed
     * @param _event keydown event
     */
    onEscapeKeyDown(_event) {
        if (isEscapeKey(_event) && this.menuOpen) {
            this.menuOpen = false;
        }
    }
    async setAriaAttribute(attr, value) {
        setOrRemoveAttribute(this.nativeButton, attr, value);
    }
    /**
     * Close the menu
     */
    async close() {
        this.menuOpen = false;
    }
    /**
     * Opens the menu
     */
    async open() {
        this.menuOpen = true;
    }
    /**
     * When the user clicks on the menu, we do not propagate the native event and we launch a custom event to manage
     * the closing of the menu correctly
     */
    onClick(evt) {
        evt.stopPropagation();
        this.wcsSubmenuOpened.emit({ menuElement: this.el });
    }
    /**
     * Handle key down on menu items
     * @param _event the keyboard event
     * @private
     */
    handleMenuItemsKeyDown(_event) {
        if ((isSpaceKey(_event)) || isEnterKey(_event)) {
            this.handleMenuItemsClick(_event);
        }
    }
    handleMenuItemsClick(evt) {
        if (evt.target.tagName === 'A') {
            this.close();
        }
    }
    /**
     * handle category item click to close the submenu
     * @param _
     * @private
     */
    wcsCategoryItemClickedHandler(_) {
        // If a category item is clicked, we close the submenu drawer;
        this.close();
    }
    disconnectedCallback() {
        var _a;
        (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
    render() {
        return (h(Host, { key: '935e78a3daf751160c21e7375e86be186bcfdec9', onClick: evt => this.onClick(evt), role: "listitem", "data-open": this.menuOpen }, this.currentActiveSizing === 'mobile' ?
            h("h2", { role: "presentation", class: "menu-button" }, h("span", { class: "label" }, this.label), h("span", { class: "arrow-container" }, h("span", { class: "arrow-icon", "data-open": this.menuOpen }, "\uF107")))
            : h("button", Object.assign({ onClick: _ => this.menuOpen = !this.menuOpen, "aria-expanded": this.menuOpen ? 'true' : 'false', "aria-controls": this.menuItemsId, class: "menu-button", ref: (el) => (this.nativeButton = el) }, this.inheritedAttributes), h("span", { class: "label" }, this.label), h("span", { class: "arrow-container" }, h("span", { "aria-hidden": "true", class: "arrow-icon", "data-open": this.menuOpen }, "\uF107"))), h("div", { key: '1e654c7f9a74f3e6bb92e9cd3589ea3b7ee9ed99', class: "drawer", "data-open": this.menuOpen, tabIndex: -1 }, h("div", { key: '1c2d8a56d7e91071fcb43f537173850ecf62fb28', class: "drawer-container" }, h("div", { key: '4880e09bcf8e06464db2984ac43dbd01ee9a0af3', class: "drawer-content" }, h("div", { key: 'd2e6e97442a73ff8d24ba4165587fd544b2ff853', class: "drawer-description" }, h("h3", { key: '04b20b11befc1dc63e719fda8dda51fe248e93cd' }, this.panelTitle), h("p", { key: '69810728510063a77b97845d91f684fe2abfa347' }, this.panelDescription)), h("div", { key: 'ed35406cc3a5ced0155181239dc96b4afcaa2871', role: "list", "aria-label": this.label, id: this.menuItemsId, class: "menu-items", onClick: (evt) => this.handleMenuItemsClick(evt), onKeyDown: evt => this.handleMenuItemsKeyDown(evt) }, h("slot", { key: '3059b3ccbef8b9483e05e4d400b1643d9ab23273' })))))));
    }
    static get is() { return "wcs-com-nav-submenu"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["com-nav-submenu.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["com-nav-submenu.css"]
        };
    }
    static get properties() {
        return {
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "label",
                "reflect": false
            },
            "panelTitle": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "panel-title",
                "reflect": false
            },
            "panelDescription": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "panel-description",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "menuOpen": {},
            "currentActiveSizing": {}
        };
    }
    static get events() {
        return [{
                "method": "wcsSubmenuOpened",
                "name": "wcsSubmenuOpened",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "MenuOpenedEventDetail",
                    "resolved": "MenuOpenedEventDetail",
                    "references": {
                        "MenuOpenedEventDetail": {
                            "location": "import",
                            "path": "../com-nav/com-nav-interface",
                            "id": "src/components/com-nav/com-nav-interface.ts::MenuOpenedEventDetail"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "setAriaAttribute": {
                "complexType": {
                    "signature": "(attr: AriaAttributeName, value: string | null | undefined) => Promise<void>",
                    "parameters": [{
                            "name": "attr",
                            "type": "\"role\" | `aria-${string}`",
                            "docs": ""
                        }, {
                            "name": "value",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AriaAttributeName": {
                            "location": "import",
                            "path": "../../utils/mutable-aria-attribute",
                            "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            },
            "close": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Close the menu",
                    "tags": []
                }
            },
            "open": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Opens the menu",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "click",
                "method": "onWindowClickEvent",
                "target": "window",
                "capture": false,
                "passive": false
            }, {
                "name": "wcsSubmenuOpened",
                "method": "onSubmenuOpened",
                "target": "window",
                "capture": false,
                "passive": false
            }, {
                "name": "keydown",
                "method": "onEscapeKeyDown",
                "target": "window",
                "capture": false,
                "passive": false
            }, {
                "name": "wcsClickOnFinalAction",
                "method": "wcsCategoryItemClickedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=com-nav-submenu.js.map
