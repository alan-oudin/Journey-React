{"version":3,"file":"editable-field.e2e.js","sourceRoot":"","sources":["../../../src/components/editable-field/editable-field.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage } from '@stencil/core/testing';\n\ndescribe('wcs-editable-field', () => {\n    it('renders with input element and default props', async () => {\n        const page = await newE2EPage();\n        await page.setContent(`\n            <wcs-editable-field label=\"Test Input\" value=\"Initial value\" type=\"input\" id=\"test\">\n                <wcs-input></wcs-input>\n            </wcs-editable-field>\n        `);\n        \n        const displayContainer = await page.find('wcs-editable-field >>> .display-container');\n        expect(displayContainer).not.toBeNull();\n        expect(displayContainer.textContent).toContain('Initial value');\n\n        const label = await page.find('wcs-editable-field >>> .label');\n        expect(label.textContent).toBe('Test Input');\n    });\n\n    it('transitions from DISPLAY to EDIT state when clicked', async () => {\n        const page = await newE2EPage();\n        await page.setContent(`\n            <wcs-editable-field label=\"Test Input\" value=\"Initial value\" type=\"input\" id=\"test\">\n                <wcs-input></wcs-input>\n            </wcs-editable-field>\n        `);\n        \n        const displayContainer = await page.find('wcs-editable-field >>> .display-container');\n        await displayContainer.click();\n        \n        // Wait for state transition\n        await page.waitForChanges();\n        \n        const editContainer = await page.find('wcs-editable-field >>> .edit-container:not(.display-none)');\n        expect(editContainer).not.toBeNull();\n    });\n\n    it('properly handles validation', async () => {\n        const page = await newE2EPage();\n        await page.setContent(`\n            <wcs-editable-field id=\"validate-test\" label=\"Test Validation\" value=\"Valid\" error-msg=\"Value is invalid\" type=\"input\">\n                <wcs-input></wcs-input>\n            </wcs-editable-field>\n        `);\n        \n        // Set up validation function\n        await page.$eval('wcs-editable-field', (el) => {\n            el.validateFn = (val) => val === 'Valid';\n        });\n        \n        // Go to edit mode\n        const displayContainer = await page.find('wcs-editable-field >>> .display-container');\n        await displayContainer.click();\n        await page.waitForChanges();\n        \n        // Input invalid value\n        const input = await page.find('wcs-input');\n        await input.type('Invalid');\n        await page.waitForChanges();\n        \n        // Trigger validation (simulate Enter key)\n        await input.press('Enter');\n        await page.waitForChanges();\n        \n        // Check error message is displayed\n        const errorElement = await page.find('wcs-editable-field >>> wcs-error');\n        expect(errorElement).not.toBeNull();\n        expect(errorElement.textContent).toBe('Value is invalid');\n    });\n\n    it('emits wcsChange event with correct data', async () => {\n        const page = await newE2EPage();\n        await page.setContent(`\n            <wcs-editable-field label=\"Test Events\" value=\"Old value\" type=\"input\" id=\"event-test\">\n                <wcs-input id=\"test-input\"></wcs-input>\n            </wcs-editable-field>\n        `);\n        \n        const changeEvent = await page.spyOnEvent('wcsChange');\n        \n        // Go to edit mode\n        const displayContainer = await page.find('wcs-editable-field >>> .display-container');\n        await displayContainer.click();\n        await page.waitForChanges();\n        \n        // Input new value\n        const input = await page.find('wcs-input');\n        await input.press('Backspace'); // Clear value (backspace is easier than selecting all)\n        await input.press('Backspace');\n        await input.press('Backspace');\n        await input.press('Backspace');\n        await input.press('Backspace');\n        await input.press('Backspace');\n        await input.press('Backspace');\n        await input.press('Backspace');\n        await input.press('Backspace');\n        await input.type('New value');\n        await page.waitForChanges();\n        \n        // Submit the form\n        await input.press('Enter');\n        await page.waitForChanges();\n        \n        // Note: Functions defined in the event's detail object (successHandler and errorHandler)\n        // are not cloned by the DOM's structured clone algorithm.\n        // This means that when the event is emitted, these functions will not be present in the\n        // event.detail object when accessed in E2E tests, even though they exist in the browser.\n        expect(changeEvent).toHaveNthReceivedEventDetail(0, {\n            newValue: 'New value'\n        });\n    });\n\n    it('respects readonly property', async () => {\n        const page = await newE2EPage();\n        await page.setContent(`\n            <wcs-editable-field label=\"Read Only Field\" value=\"Readonly value\" readonly=\"true\" type=\"input\" id=\"test\">\n                <wcs-input></wcs-input>\n            </wcs-editable-field>\n        `);\n        \n        // Check readonly icon is displayed\n        const readonlyIcon = await page.find('wcs-editable-field >>> .readonly-icon');\n        expect(readonlyIcon).not.toBeNull();\n        \n        // Try clicking\n        const displayContainer = await page.find('wcs-editable-field >>> .display-container');\n        await displayContainer.click();\n        await page.waitForChanges();\n        \n        // Should still be in display mode\n        const editContainer = await page.find('wcs-editable-field >>> .edit-container:not(.display-none)');\n        expect(editContainer).toBeNull();\n    });\n\n    it('works correctly with textarea', async () => {\n        const page = await newE2EPage();\n        await page.setContent(`\n            <wcs-editable-field label=\"Textarea Test\" type=\"textarea\" value=\"Multiline\\nText\" id=\"test\">\n                <wcs-textarea></wcs-textarea>\n            </wcs-editable-field>\n        `);\n        \n        // Check it renders correctly\n        const displayContainer = await page.find('wcs-editable-field >>> .display-container');\n        expect(displayContainer.textContent).toContain('Multiline\\nText');\n        \n        // Go to edit mode\n        await displayContainer.click();\n        await page.waitForChanges();\n        \n        // Should need Ctrl+Enter to submit with textarea\n        const textarea = await page.find('wcs-textarea');\n        await textarea.press('Enter'); // This should NOT submit\n        await page.waitForChanges();\n        \n        // Should still be in edit mode\n        const editContainerVisible = await page.find('wcs-editable-field >>> .edit-container:not(.display-none)');\n        expect(editContainerVisible).not.toBeNull();\n    });\n\n    it('works correctly with select', async () => {\n        const page = await newE2EPage();\n        await page.setContent(`\n            <wcs-editable-field label=\"Select Test\" type=\"select\" value=\"option1\" id=\"test\">\n                <wcs-select>\n                    <wcs-select-option value=\"option1\">Option 1</wcs-select-option>\n                    <wcs-select-option value=\"option2\">Option 2</wcs-select-option>\n                </wcs-select>\n            </wcs-editable-field>\n        `);\n        \n        // Go to edit mode\n        const displayContainer = await page.find('wcs-editable-field >>> .display-container');\n        await displayContainer.click();\n        await page.waitForChanges();\n        \n        // We get the select element\n        const select = await page.find('wcs-select');\n        await select.focus();\n        await select.press('ArrowDown');\n        \n        // press CTRL + ENTER (combined) to validate\n        await page.keyboard.down('Control');\n        await page.keyboard.press('Enter');\n        await page.keyboard.up('Control');\n\n        await page.waitForChanges();\n        \n        // Should be in load state after change\n        const loadContainer = await page.find('wcs-editable-field >>> .load-container:not(.display-none)');\n        expect(loadContainer).not.toBeNull();\n    });\n\n    it('properly handles custom formatting function', async () => {\n        const page = await newE2EPage();\n        await page.setContent(`\n            <wcs-editable-field id=\"format-test\" label=\"Formatting Test\" value=\"test value\" type=\"input\">\n                <wcs-input></wcs-input>\n            </wcs-editable-field>\n        `);\n        \n        // Set custom formatter\n        await page.$eval('wcs-editable-field', (el) => {\n            el.formatFn = (val) => val ? val.toUpperCase() : '';\n        });\n        await page.waitForChanges();\n        \n        // Check formatted output\n        const displayContainer = await page.find('wcs-editable-field >>> .display-container');\n        expect(displayContainer.textContent).toContain('TEST VALUE');\n    });\n});"]}