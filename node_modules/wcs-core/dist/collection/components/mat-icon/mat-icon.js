import { h, Host } from "@stencil/core";
import { inheritAriaAttributes, inheritAttributes, setOrRemoveAttribute } from "../../utils/helpers";
const ICON_FAMILY_CLASS_NAME = {
    filled: 'material-icons',
    outlined: 'material-icons-outlined',
    twotone: 'material-icons-two-tone',
    rounded: 'material-icons-round',
    sharp: 'material-icons-sharp'
};
const MAT_ICON_INHERITED_ATTRS = ['title'];
/**
 * A component used to display a [Material Icon](https://fonts.google.com/icons?icon.set=Material+Icons). Can be useful when used in wcs-grid or in a wcs-button.
 */
export class MatIcon {
    constructor() {
        this.inheritedAttributes = {};
        this.icon = undefined;
        this.size = 'm';
        this.family = 'filled';
    }
    componentWillLoad() {
        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, MAT_ICON_INHERITED_ATTRS));
    }
    async setAriaAttribute(attr, value) {
        setOrRemoveAttribute(this.nativeIcon, attr, value);
    }
    render() {
        return (h(Host, { key: '57b0feb64492a614f69e255808dd5ae511e6b1f2' }, h("i", Object.assign({ key: '57475c2aaf39a6f719fc65a5c58f14df97c49db0', "aria-hidden": "true", class: ICON_FAMILY_CLASS_NAME[this.family] + ' size-' + this.size, ref: (el) => (this.nativeIcon = el) }, this.inheritedAttributes), this.icon)));
    }
    static get is() { return "wcs-mat-icon"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["mat-icon.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["mat-icon.css"]
        };
    }
    static get properties() {
        return {
            "icon": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Use the icon name from Material Icons"
                },
                "attribute": "icon",
                "reflect": false
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "MaterialIconSize",
                    "resolved": "\"l\" | \"m\" | \"s\" | \"xl\"",
                    "references": {
                        "MaterialIconSize": {
                            "location": "import",
                            "path": "./mat-icon-interface",
                            "id": "src/components/mat-icon/mat-icon-interface.tsx::MaterialIconSize"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Size of the icon"
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'m'"
            },
            "family": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "MaterialIconFamily",
                    "resolved": "\"filled\" | \"outlined\" | \"rounded\" | \"sharp\" | \"twotone\"",
                    "references": {
                        "MaterialIconFamily": {
                            "location": "import",
                            "path": "./mat-icon-interface",
                            "id": "src/components/mat-icon/mat-icon-interface.tsx::MaterialIconFamily"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Family of the icon"
                },
                "attribute": "family",
                "reflect": false,
                "defaultValue": "'filled'"
            }
        };
    }
    static get methods() {
        return {
            "setAriaAttribute": {
                "complexType": {
                    "signature": "(attr: AriaAttributeName, value: string | null | undefined) => Promise<void>",
                    "parameters": [{
                            "name": "attr",
                            "type": "\"role\" | `aria-${string}`",
                            "docs": ""
                        }, {
                            "name": "value",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AriaAttributeName": {
                            "location": "import",
                            "path": "../../utils/mutable-aria-attribute",
                            "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=mat-icon.js.map
