import { h, Host } from "@stencil/core";
import { isEnterKey, generateUniqueId, isSpaceKey } from "../../utils/helpers";
/**
 * The select option is a subcomponent of `wcs-select` that represents a single option in a select list.
 *
 * @cssprop --wcs-select-option-background-color-default - Default background color of the option
 * @cssprop --wcs-select-option-background-color-hover - Background color of the option when hovered
 * @cssprop --wcs-select-option-background-color-press - Background color of the option when pressed
 * @cssprop --wcs-select-option-background-color-selected - Background color of the option when selected
 * @cssprop --wcs-select-option-background-color-selected-hover - Background color of the option when selected and hovered
 * @cssprop --wcs-select-option-background-color-selected-press - Background color of the option when selected and pressed
 * @cssprop --wcs-select-option-background-color-selected-disabled - Background color of the option when selected and disabled
 * @cssprop --wcs-select-option-background-color-focus - Background color of the option when focused
 *
 * @cssprop --wcs-select-option-border-color-focus - Border color for autocomplete mode
 * @cssprop --wcs-select-option-border-width-focus - Border width for autocomplete mode
 * @cssprop --wcs-select-option-border-style-focus - Border style of the option when focused
 *
 * @cssprop --wcs-select-option-height - Height of the option
 * @cssprop --wcs-select-option-padding-horizontal - Horizontal padding of the option
 * @cssprop --wcs-select-option-padding-vertical - Vertical padding of the option
 *
 * @cssprop --wcs-select-option-text-font-size - Font size of the option text
 * @cssprop --wcs-select-option-text-font-weight - Font weight of the option text
 * @cssprop --wcs-select-option-text-color-default - Default color of the option text
 * @cssprop --wcs-select-option-text-color-focus - Color of the option text when focused
 * @cssprop --wcs-select-option-text-color-hover - Color of the option text when hovered
 * @cssprop --wcs-select-option-text-color-selected - Color of the option text when selected
 * @cssprop --wcs-select-option-text-color-disabled - Color of the option text when disabled
 *
 * @cssprop --wcs-select-option-checkbox-color - Color of the checkbox
 *
 * @cssprop --wcs-select-option-gap - Gap between the checkbox and the text
 * @cssprop --wcs-select-option-transition-duration - Duration of the transition
 */
export class SelectOption {
    constructor() {
        this.selectOptionId = generateUniqueId(this.el.tagName);
        this.disabled = false;
        this.selected = false;
        this.highlighted = false;
        this.value = undefined;
        this.chipColor = undefined;
        this.chipBackgroundColor = undefined;
        this.multiple = false;
    }
    componentWillLoad() {
        if (this.value === undefined) {
            // If no value was given we use the text content instead.
            this.value = this.el.innerText || '';
        }
    }
    chooseOption(event) {
        if (!this.disabled) {
            event.stopPropagation();
            // We select inner HTML as it's what's passed into the slot.
            const displayText = this.el.innerText;
            this.wcsSelectOptionClick.emit({
                source: this.el,
                value: this.value,
                displayText
            });
        }
    }
    onMouseUp(event) {
        this.chooseOption(event);
    }
    /**
     * Handles the keydown event to update the selection.
     * @param event keyboard event
     */
    handleKeydown(event) {
        if (isEnterKey(event) || isSpaceKey(event)) {
            this.chooseOption(event);
            event.preventDefault();
            event.stopPropagation();
        }
    }
    render() {
        return (h(Host, { key: '8e2f93d1db10d33df62a34b1f9e62a948a78424e', id: this.selectOptionId, "aria-selected": this.selected || this.highlighted ? 'true' : 'false', slot: "options", role: "option", tabindex: "-1" }, this.multiple &&
            h("wcs-checkbox", { key: '3af49da773954213d7f2b64c4a2f8fd7114b6a24', tabindex: "-1", checked: this.selected, disabled: this.disabled }), h("slot", { key: '3e5267f2626863b13bbcab46f98b4eacfa90c83f' })));
    }
    static get is() { return "wcs-select-option"; }
    static get originalStyleUrls() {
        return {
            "$": ["select-option.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["select-option.css"]
        };
    }
    static get properties() {
        return {
            "disabled": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether this option can be selected."
                },
                "attribute": "disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "selected": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether this option is selected."
                },
                "attribute": "selected",
                "reflect": true,
                "defaultValue": "false"
            },
            "highlighted": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }, {
                            "name": "ignore",
                            "text": undefined
                        }],
                    "text": "This property mustn't be set by hand, it is used by the `wcs-select` component.\nApplies a highlight design on the option for autocomplete mode."
                },
                "attribute": "highlighted",
                "reflect": true,
                "defaultValue": "false"
            },
            "value": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "The option value, not what's displayed, use inner text instead."
                },
                "attribute": "value",
                "reflect": false
            },
            "chipColor": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Chip's displayed text color."
                },
                "attribute": "chip-color",
                "reflect": false
            },
            "chipBackgroundColor": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Chip's background color."
                },
                "attribute": "chip-background-color",
                "reflect": false
            },
            "multiple": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }, {
                            "name": "ignore",
                            "text": undefined
                        }],
                    "text": "This property mustn't be set by hand, it is used by the `wcs-select` component.\nIf you want a multiple select, set `multiple` attribute on the parent select instead."
                },
                "attribute": "multiple",
                "reflect": true,
                "defaultValue": "false"
            }
        };
    }
    static get events() {
        return [{
                "method": "wcsSelectOptionClick",
                "name": "wcsSelectOptionClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "SelectOptionChosedEvent",
                    "resolved": "SelectOptionChosedEvent",
                    "references": {
                        "SelectOptionChosedEvent": {
                            "location": "import",
                            "path": "./select-option-interface",
                            "id": "src/components/select-option/select-option-interface.ts::SelectOptionChosedEvent"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "mouseup",
                "method": "onMouseUp",
                "target": undefined,
                "capture": false,
                "passive": true
            }, {
                "name": "keydown",
                "method": "handleKeydown",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=select-option.js.map
