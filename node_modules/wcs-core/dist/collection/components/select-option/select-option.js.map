{"version":3,"file":"select-option.js","sourceRoot":"","sources":["../../../src/components/select-option/select-option.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAoC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEnH,OAAO,EAAC,UAAU,EAAE,gBAAgB,EAAE,UAAU,EAAC,MAAM,qBAAqB,CAAC;AAE7E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AAKH,MAAM,OAAO,YAAY;;QAEb,mBAAc,GAAW,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;wBAGP,KAAK;wBAGL,KAAK;2BAOF,KAAK;;;;wBAiBR,KAAK;;IAQjE,iBAAiB;QACb,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC3B,yDAAyD;YACzD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS,IAAI,EAAE,CAAC;QACzC,CAAC;IACL,CAAC;IAEO,YAAY,CAAC,KAAc;QAC/B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACjB,KAAK,CAAC,eAAe,EAAE,CAAC;YACxB,4DAA4D;YAC5D,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC;YACtC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC;gBAC3B,MAAM,EAAE,IAAI,CAAC,EAAE;gBACf,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,WAAW;aACd,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IAGD,SAAS,CAAC,KAAiB;QACvB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED;;;OAGG;IAEH,aAAa,CAAC,KAAoB;QAC9B,IAAG,UAAU,CAAC,KAAK,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC;YACxC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACzB,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QAC5B,CAAC;IACL,CAAC;IAED,MAAM;QACF,OAAO,CACH,EAAC,IAAI,qDAAC,EAAE,EAAE,IAAI,CAAC,cAAc,mBAAiB,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,EAAC,SAAS,EAAC,IAAI,EAAC,QAAQ,EAAC,QAAQ,EAAC,IAAI;YACzI,IAAI,CAAC,QAAQ;gBACV,qEAAc,QAAQ,EAAC,IAAI,EAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,GAAiB;YAEhG,8DAAQ,CACL,CACV,CAAC;IACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ","sourcesContent":["import { Component, Element, Event, Prop, EventEmitter, ComponentInterface, h, Host, Listen } from '@stencil/core';\nimport { SelectOptionChosedEvent } from './select-option-interface';\nimport {isEnterKey, generateUniqueId, isSpaceKey} from \"../../utils/helpers\";\n\n/**\n * The select option is a subcomponent of `wcs-select` that represents a single option in a select list.\n * \n * @cssprop --wcs-select-option-background-color-default - Default background color of the option\n * @cssprop --wcs-select-option-background-color-hover - Background color of the option when hovered\n * @cssprop --wcs-select-option-background-color-press - Background color of the option when pressed\n * @cssprop --wcs-select-option-background-color-selected - Background color of the option when selected\n * @cssprop --wcs-select-option-background-color-selected-hover - Background color of the option when selected and hovered\n * @cssprop --wcs-select-option-background-color-selected-press - Background color of the option when selected and pressed\n * @cssprop --wcs-select-option-background-color-selected-disabled - Background color of the option when selected and disabled\n * @cssprop --wcs-select-option-background-color-focus - Background color of the option when focused\n * \n * @cssprop --wcs-select-option-border-color-focus - Border color for autocomplete mode\n * @cssprop --wcs-select-option-border-width-focus - Border width for autocomplete mode\n * @cssprop --wcs-select-option-border-style-focus - Border style of the option when focused\n * \n * @cssprop --wcs-select-option-height - Height of the option\n * @cssprop --wcs-select-option-padding-horizontal - Horizontal padding of the option\n * @cssprop --wcs-select-option-padding-vertical - Vertical padding of the option\n * \n * @cssprop --wcs-select-option-text-font-size - Font size of the option text\n * @cssprop --wcs-select-option-text-font-weight - Font weight of the option text\n * @cssprop --wcs-select-option-text-color-default - Default color of the option text\n * @cssprop --wcs-select-option-text-color-focus - Color of the option text when focused\n * @cssprop --wcs-select-option-text-color-hover - Color of the option text when hovered\n * @cssprop --wcs-select-option-text-color-selected - Color of the option text when selected\n * @cssprop --wcs-select-option-text-color-disabled - Color of the option text when disabled\n * \n * @cssprop --wcs-select-option-checkbox-color - Color of the checkbox\n * \n * @cssprop --wcs-select-option-gap - Gap between the checkbox and the text\n * @cssprop --wcs-select-option-transition-duration - Duration of the transition\n */\n@Component({\n    tag: 'wcs-select-option',\n    styleUrl: 'select-option.scss'\n})\nexport class SelectOption implements ComponentInterface {\n    @Element() private el!: HTMLWcsSelectOptionElement;\n    private selectOptionId: string = generateUniqueId(this.el.tagName);\n\n    /** Whether this option can be selected. */\n    @Prop({ mutable: true, reflect: true }) disabled: boolean = false;\n\n    /** Whether this option is selected. */\n    @Prop({ mutable: true, reflect: true }) selected: boolean = false;\n    \n    /** This property mustn't be set by hand, it is used by the `wcs-select` component.\n     * Applies a highlight design on the option for autocomplete mode.\n     * @internal\n     * @ignore\n    */\n    @Prop({ mutable: true, reflect: true }) highlighted: boolean = false;\n\n    /** The option value, not what's displayed, use inner text instead. */\n    @Prop() value?: any;\n\n    /** Chip's displayed text color. */\n    @Prop() chipColor?: string;\n\n    /** Chip's background color. */\n    @Prop() chipBackgroundColor?: string;\n\n    /**\n     * This property mustn't be set by hand, it is used by the `wcs-select` component.\n     * If you want a multiple select, set `multiple` attribute on the parent select instead.\n     * @internal\n     * @ignore\n     */\n    @Prop({ reflect: true, mutable: true }) multiple: boolean = false;\n\n    @Event({\n        eventName: 'wcsSelectOptionClick',\n    })\n    // TODO: find a better name ?\n    wcsSelectOptionClick: EventEmitter<SelectOptionChosedEvent>;\n\n    componentWillLoad() {\n        if (this.value === undefined) {\n            // If no value was given we use the text content instead.\n            this.value = this.el.innerText || '';\n        }\n    }\n\n    private chooseOption(event: UIEvent) {\n        if (!this.disabled) {\n            event.stopPropagation();\n            // We select inner HTML as it's what's passed into the slot.\n            const displayText = this.el.innerText;\n            this.wcsSelectOptionClick.emit({\n                source: this.el,\n                value: this.value,\n                displayText\n            });\n        }\n    }\n\n    @Listen('mouseup')\n    onMouseUp(event: MouseEvent) {\n        this.chooseOption(event);\n    }\n\n    /**\n     * Handles the keydown event to update the selection.\n     * @param event keyboard event\n     */\n    @Listen('keydown')\n    handleKeydown(event: KeyboardEvent) {\n        if(isEnterKey(event) || isSpaceKey(event)) {\n            this.chooseOption(event);\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    render() {\n        return (\n            <Host id={this.selectOptionId} aria-selected={this.selected || this.highlighted ? 'true' : 'false'} slot=\"options\" role=\"option\" tabindex=\"-1\">\n                {this.multiple &&\n                    <wcs-checkbox tabindex=\"-1\" checked={this.selected} disabled={this.disabled}></wcs-checkbox>\n                }\n                <slot />\n            </Host>\n        );\n    }\n}\n"]}