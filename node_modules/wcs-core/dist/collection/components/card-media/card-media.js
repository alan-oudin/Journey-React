import { Host, h } from "@stencil/core";
/**
 * The card media component is a container that display an image/icon inside a card.
 * On horizontal orientation, the image/icon has an aspect ratio of 1/1
 * On vertical orientation, the image/icon has an aspect ratio of 16/9.
 *
 * @slot - The default slot where the image/icon is displayed
 * @slot vertical - The slot where the image/icon is displayed when the card is vertical
 * @slot horizontal - The slot where the image/icon is displayed when the card is horizontal
 *
 * @cssprop --wcs-card-media-max-width-horizontal - Max width of the image when the card is horizontal
 */
export class CardMedia {
    constructor() {
        this.orientation = 'vertical';
    }
    /**
     * @internal this method is not intended to be used by the user
     */
    async setOrientation(orientation) {
        this.orientation = orientation;
    }
    render() {
        return (h(Host, { key: '8b54a791a4d1c8bfdc772cb5cd16f3a3dfec0682', class: this.orientation }, h("slot", { key: 'a7f5751e8e1f3ef3b1b18af34384cb598a80b690' }), this.orientation === 'vertical' ? h("slot", { name: "vertical" }) : h("slot", { name: "horizontal" })));
    }
    static get is() { return "wcs-card-media"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["card-media.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["card-media.css"]
        };
    }
    static get states() {
        return {
            "orientation": {}
        };
    }
    static get methods() {
        return {
            "setOrientation": {
                "complexType": {
                    "signature": "(orientation: CardOrientation) => Promise<void>",
                    "parameters": [{
                            "name": "orientation",
                            "type": "\"horizontal\" | \"vertical\"",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "CardOrientation": {
                            "location": "import",
                            "path": "../card/card-interface",
                            "id": "src/components/card/card-interface.ts::CardOrientation"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": [{
                            "name": "internal",
                            "text": "this method is not intended to be used by the user"
                        }]
                }
            }
        };
    }
}
//# sourceMappingURL=card-media.js.map
