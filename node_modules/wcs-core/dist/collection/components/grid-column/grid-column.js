import { h, Host } from "@stencil/core";
import { GridSortArrow } from "./grid-sort-arrow";
import { inheritAriaAttributes, inheritAttributes, isEnterKey, isSpaceKey, setOrRemoveAttribute } from "../../utils/helpers";
const GRID_COLUMN_INHERITED_ATTRS = ['tabindex', 'title'];
/**
 * The grid column is a subcomponent of `wcs-grid` that represents a column of the table.
 *
 * @csspart [path]-column - CSS part for each column for styling. e.g: first_name-column, email-column
 */
export class GridColumn {
    constructor() {
        this.inheritedAttributes = {};
        this.path = undefined;
        this.name = undefined;
        this.sort = false;
        this.sortFn = undefined;
        this.formatter = undefined;
        this.sortOrder = 'none';
        this.width = undefined;
        this.customCells = false;
        this.hidden = false;
        this.cursorPosition = undefined;
        this.columnPosition = undefined;
    }
    componentWillLoad() {
        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, GRID_COLUMN_INHERITED_ATTRS));
    }
    async setAriaAttribute(attr, value) {
        setOrRemoveAttribute(this.nativeTh, attr, value);
    }
    parseMyObjectProp(newValue) {
        this.wcsHiddenChange.emit(newValue);
    }
    sortOrderChange(_) {
        this.emitSortConfig();
    }
    emitSortConfig() {
        if (!this.sort)
            return;
        this.wcsSortChange.emit({
            column: this.el,
            order: this.sortOrder,
            sortFn: this.sortFn
        });
    }
    getSortOrderForAriaSort(sortOrder) {
        switch (sortOrder) {
            case 'asc':
                return 'ascending';
            case 'desc':
                return 'descending';
            case 'none':
            default:
                return 'none';
        }
    }
    getTabIndex() {
        var _a, _b;
        return ((_a = this.cursorPosition) === null || _a === void 0 ? void 0 : _a.col) === this.columnPosition
            && ((_b = this.cursorPosition) === null || _b === void 0 ? void 0 : _b.row) === 0 ? 0 : -1;
    }
    getTagName() {
        return this.sort ? 'button' : 'div';
    }
    delegateFocusToButton() {
        if (this.sort) {
            this.buttonOrDiv.focus();
        }
    }
    render() {
        const ButtonOrDiv = this.getTagName();
        return (h(Host, { key: 'e2c93e817abc5a61d6285f32779d915ff7368710', slot: "grid-column" }, h("th", Object.assign({ key: 'c23695b8680146e66e75ea958dc9dd9cac6056ac', style: { width: this.width }, class: this.sort ? 'pointer' : '', tabIndex: this.sort ? -1 : this.getTabIndex(), scope: "col", onClick: this.onSortClick.bind(this), onKeyDown: this.handleSortKeyDown.bind(this), onFocus: this.delegateFocusToButton.bind(this), "aria-sort": this.sort ? this.getSortOrderForAriaSort(this.sortOrder) : null, ref: (el) => (this.nativeTh = el) }, this.inheritedAttributes), h(ButtonOrDiv, { key: 'e936f0bd861b2d243071d45ccb4fa6bf8448f7a6', class: "grid-column-th-content", ref: (el) => this.buttonOrDiv = el, tabIndex: this.sort ? this.getTabIndex() : -1 }, h("span", { key: '33e9e0238aa5cea93bff5f0522e30b7cfa787283' }, this.name), this.sort ? h("div", { class: "sort-arrow-container" }, h(GridSortArrow, { state: this.sortOrder })) : ''))));
    }
    onSortClick() {
        if (!this.sort)
            return;
        // @Watch on sortOrder property will trigger wcsSortChange event
        this.sortOrder = this.sortOrder === 'none' || this.sortOrder === 'desc' ? 'asc' : 'desc';
    }
    handleSortKeyDown(_event) {
        if (isSpaceKey(_event) || isEnterKey(_event)) {
            _event.preventDefault();
            this.onSortClick();
        }
    }
    static get is() { return "wcs-grid-column"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["grid-column.scss", "grid-sort-arrow.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["grid-column.css", "grid-sort-arrow.css"]
        };
    }
    static get properties() {
        return {
            "path": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Represents the name of the field from the `data` object (e.g: first_name, last_name, email, ...)"
                },
                "attribute": "path",
                "reflect": false
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The name of the column displayed on the table (e.g: First Name, Last Name, Email, ...)"
                },
                "attribute": "name",
                "reflect": false
            },
            "sort": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Make the column sortable."
                },
                "attribute": "sort",
                "reflect": true,
                "defaultValue": "false"
            },
            "sortFn": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "WcsSortFn",
                    "resolved": "(a: any, b: any, column: HTMLWcsGridColumnElement) => 0 | 1 | -1",
                    "references": {
                        "WcsSortFn": {
                            "location": "import",
                            "path": "../grid/grid-interface",
                            "id": "src/components/grid/grid-interface.ts::WcsSortFn"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Customizable sort function to change the comparison of values."
                }
            },
            "formatter": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "WcsCellFormatter",
                    "resolved": "(_h: HyperFunc<VNode>, column: HTMLWcsGridColumnElement, rowData: WcsGridRowData) => HTMLElement | HTMLElement[]",
                    "references": {
                        "WcsCellFormatter": {
                            "location": "import",
                            "path": "../grid/grid-interface",
                            "id": "src/components/grid/grid-interface.ts::WcsCellFormatter"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Customizable formatter function to render the cell differently."
                }
            },
            "sortOrder": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "WcsSortOrder",
                    "resolved": "\"asc\" | \"desc\" | \"none\"",
                    "references": {
                        "WcsSortOrder": {
                            "location": "import",
                            "path": "../grid/grid-interface",
                            "id": "src/components/grid/grid-interface.ts::WcsSortOrder"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Defines if the column sort is ascending or descending.  \n`none` = the column is not sorted."
                },
                "attribute": "sort-order",
                "reflect": false,
                "defaultValue": "'none'"
            },
            "width": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Set the column `<th>` element width."
                },
                "attribute": "width",
                "reflect": false
            },
            "customCells": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Set to true if using a `wcs-custom-cell` linked to it."
                },
                "attribute": "custom-cells",
                "reflect": true,
                "defaultValue": "false"
            },
            "hidden": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Flag to hide the column."
                },
                "attribute": "hidden",
                "reflect": true,
                "defaultValue": "false"
            },
            "cursorPosition": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "{col: number, row: number}",
                    "resolved": "{ col: number; row: number; }",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "This property mustn't be set by hand, it is set by the wcs-grid component to move the focus between grid columns\nusing keyboard."
                }
            },
            "columnPosition": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "This property mustn't be set by hand, it is set by the wcs-grid component to register the column index in a\ngrid in order to move the focus between the grid columns."
                },
                "attribute": "column-position",
                "reflect": false
            }
        };
    }
    static get events() {
        return [{
                "method": "wcsSortChange",
                "name": "wcsSortChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the sort of the column is changed."
                },
                "complexType": {
                    "original": "WcsGridColumnSortChangeEventDetails",
                    "resolved": "WcsGridColumnSortChangeEventDetails",
                    "references": {
                        "WcsGridColumnSortChangeEventDetails": {
                            "location": "import",
                            "path": "../grid/grid-interface",
                            "id": "src/components/grid/grid-interface.ts::WcsGridColumnSortChangeEventDetails"
                        }
                    }
                }
            }, {
                "method": "wcsHiddenChange",
                "name": "wcsHiddenChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted if the column is dynamically switching visibility."
                },
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "setAriaAttribute": {
                "complexType": {
                    "signature": "(attr: AriaAttributeName, value: string | null | undefined) => Promise<void>",
                    "parameters": [{
                            "name": "attr",
                            "type": "\"role\" | `aria-${string}`",
                            "docs": ""
                        }, {
                            "name": "value",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AriaAttributeName": {
                            "location": "import",
                            "path": "../../utils/mutable-aria-attribute",
                            "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "hidden",
                "methodName": "parseMyObjectProp"
            }, {
                "propName": "sortOrder",
                "methodName": "sortOrderChange"
            }];
    }
}
//# sourceMappingURL=grid-column.js.map
