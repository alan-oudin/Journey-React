import { h } from "@stencil/core";
import { inheritAriaAttributes, inheritAttributes, setOrRemoveAttribute } from "../../utils/helpers";
const PROGRESS_BAR_ARIA_INHERITED_ATTRS = ['title'];
/**
 * The progress-bar component is a horizontal bar that indicates the current completion of a task.
 *
 * ## Accessibility guidelines ðŸ’¡
 * > Aria attributes and how to display the progress-bar depend on the use case in your application :
 * >
 * > - **Case 1 : decorative**
 * > If the progress-bar is used as a decoration _(if removed, the user doesn't lose any relevant information)_ or in the
 * > context of another component _(such as progress-bar in a card, stepper, ...)_ => **you don't need to show the label nor add an aria-label**.
 * >
 * > - **Case 2 : informative**
 * > If the progress-bar is used to convey important information _(e.g., form completion status, dashboard KPI)_, you need to :
 * >   - **Provide a visible label** that describes the purpose of the progress-bar.
 * >   - **Set the `showLabel` property to `true`** to show the percentage above the progress-bar.
 * >   - Optionally, use aria-label to provide an accessible name if a visible label is not present.
 *
 * @cssprop --wcs-progress-bar-border-radius - Border radius
 * @cssprop --wcs-progress-bar-border-radius-small - Border radius for size small
 * @cssprop --wcs-progress-bar-animation-duration - Animation duration
 *
 * @cssprop --wcs-progress-bar-height-m - Height for size medium
 * @cssprop --wcs-progress-bar-height-s - Height for size small
 * @cssprop --wcs-progress-bar-background-color - Background color of the progress bar
 * @cssprop --wcs-progress-bar-rail-color - Rail color (dashed line)
 * @cssprop --wcs-progress-bar-rail-spacing - Space between the rail dashes
 * @cssprop --wcs-progress-bar-gap-s - Gap between the progress bar and the label for size small
 * @cssprop --wcs-progress-bar-gap-m - Gap between the progress bar and the label for size medium
 * @cssprop --wcs-progress-bar-indicator-color - Color of the progress bar indicator (bar on top of the rail)
 * @cssprop --wcs-progress-bar-label-color - Color of the label
 * @cssprop --wcs-progress-bar-label-font-size-s - Font size of the label for size small
 * @cssprop --wcs-progress-bar-label-font-size-m - Font size of the label for size medium
 * @cssprop --wcs-progress-bar-label-font-weight - Font weight of the label
 * @cssprop --wcs-progress-bar-label-percentage-font-size-s - Font size of the percentage for size small
 * @cssprop --wcs-progress-bar-label-percentage-font-size-m - Font size of the percentage for size medium
 * @cssprop --wcs-progress-bar-label-top-space - Space on top of the progress bar when label is displayed
 */
export class ProgressBar {
    constructor() {
        this.inheritedAttributes = {};
        this.size = 'm';
        this.showLabel = false;
        this.value = 0;
    }
    componentWillLoad() {
        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, PROGRESS_BAR_ARIA_INHERITED_ATTRS));
    }
    async setAriaAttribute(attr, value) {
        setOrRemoveAttribute(this.nativeProgress, attr, value);
    }
    render() {
        const style = {
            width: this.value + '%'
        };
        return (h("div", Object.assign({ key: '5fe4671aeaaf799d336e38c4bd49f021b4fbb27b', class: this.rootClasses(), role: "progressbar", "aria-valuemin": "0", "aria-valuemax": "100", "aria-valuenow": this.value, "aria-valuetext": this.value + '%', ref: (el) => (this.nativeProgress = el) }, this.inheritedAttributes), h("div", { key: '9278d7110c3fed850ddcf1a06ff29a60fb4ebbd8', class: "progress-bar", style: style }, this.showLabel &&
            h("span", { key: 'ac5758b7b685fc08ecf4592b7194666d751c4b87', class: "progress-label" }, this.value, h("sup", { key: '313cec9fb8df686b3affb9a9002e1c6055249f0b' }, "%")))));
    }
    rootClasses() {
        let classes = 'progress';
        if (this.showLabel)
            classes += ' has-label';
        // FIXME: Temporary fix so the label doesn't appear before the bar.
        if (this.value === 0)
            classes += ' value-zero';
        return classes;
    }
    static get is() { return "wcs-progress-bar"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["progress-bar.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["progress-bar.css"]
        };
    }
    static get properties() {
        return {
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Extract<WcsSize, 'm' | 's'>",
                    "resolved": "\"m\" | \"s\"",
                    "references": {
                        "Extract": {
                            "location": "global",
                            "id": "global::Extract"
                        },
                        "WcsSize": {
                            "location": "import",
                            "path": "../../shared-types",
                            "id": "src/shared-types.ts::WcsSize"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specify the size of the progress bar.\nm = default, s = smaller"
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'m'"
            },
            "showLabel": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether it displays a label indicating the percentage of progress above the bar."
                },
                "attribute": "show-label",
                "reflect": true,
                "defaultValue": "false"
            },
            "value": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The actual value of the progress.\nRanging from 0 to 100."
                },
                "attribute": "value",
                "reflect": false,
                "defaultValue": "0"
            }
        };
    }
    static get methods() {
        return {
            "setAriaAttribute": {
                "complexType": {
                    "signature": "(attr: AriaAttributeName, value: string | null | undefined) => Promise<void>",
                    "parameters": [{
                            "name": "attr",
                            "type": "\"role\" | `aria-${string}`",
                            "docs": ""
                        }, {
                            "name": "value",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AriaAttributeName": {
                            "location": "import",
                            "path": "../../utils/mutable-aria-attribute",
                            "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=progress-bar.js.map
