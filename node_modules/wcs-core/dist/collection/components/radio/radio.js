import { h, Host } from "@stencil/core";
import { inheritAriaAttributes, inheritAttributes, setOrRemoveAttribute } from "../../utils/helpers";
const RADIO_INHERITED_ATTRS = ['title'];
/**
 * The radio component should always be wrapped in a `wcs-radio-group`.
 *
 * @cssprop --wcs-radio-transition-duration - Duration of the transition
 *
 * @cssprop --wcs-radio-text-color-default - Color of the text when the radio is not selected
 * @cssprop --wcs-radio-text-font-weight-default - Default font weight of the text
 * @cssprop --wcs-radio-text-color-selected - Color of the text when the radio is selected
 * @cssprop --wcs-radio-text-font-weight-selected - Font weight of the text when the radio is selected
 * @cssprop --wcs-radio-text-color-disabled - Color of the text when the radio is disabled
 * @cssprop --wcs-radio-text-color-hover - Color of the text when the radio is hovered
 *
 * @cssprop --wcs-radio-outline-color-focus - Color of the outline when the radio is focused
 *
 * @cssprop --wcs-radio-checkmark-size - Size of the checkmark circle
 * @cssprop --wcs-radio-checkmark-border-width - Width of the border of the checkmark circle
 * @cssprop --wcs-radio-checkmark-border-color-default - Color of the border of the checkmark circle when the radio's is not selected
 * @cssprop --wcs-radio-checkmark-border-color-selected - Color of the border of the checkmark circle when the radio is selected
 * @cssprop --wcs-radio-checkmark-border-color-hover - Color of the border of the checkmark circle when the radio is hovered
 * @cssprop --wcs-radio-checkmark-border-color-disabled - Color of the border of the checkmark circle when the radio is disabled
 * @cssprop --wcs-radio-checkmark-background-color-default - Background color of the checkmark circle when the radio's is not selected
 * @cssprop --wcs-radio-checkmark-background-color-selected - Background color of the checkmark circle when the radio's is selected
 * @cssprop --wcs-radio-checkmark-background-color-selected-disabled - Background color of the checkmark circle when the radio is selected and disabled
 * @cssprop --wcs-radio-checkmark-background-color-selected-hover - Background color of the checkmark circle when the radio is selected and hovered
 *
 * @cssprop --wcs-radio-checkmark-outline-distance-with-checkmark-circle - Distance between the checkmark circle and the outline (inside the background)
 * @cssprop --wcs-radio-checkmark-outline-width - Width of the outline of the checkmark circle (inside the background)
 * @cssprop --wcs-radio-checkmark-outline-color - Color of the outline of the checkmark circle (inside the background)
 * @cssprop --wcs-radio-checkmark-border-radius - Border radius of the checkmark circle
 *
 * @cssprop --wcs-radio-gap - Gap between the radio checkmark circle and the label
 *
 * @cssprop --wcs-radio-border-radius - Border radius of the radio (default mode)
 *
 * @cssprop --wcs-radio-option-background-color-default - Background color of the radio option when not selected
 * @cssprop --wcs-radio-option-background-color-hover - Background color of the radio option not selected when hovered
 * @cssprop --wcs-radio-option-background-color-press - Background color of the radio option when pressed
 * @cssprop --wcs-radio-option-background-color-disabled - Background color of the radio option when disabled
 *
 * @cssprop --wcs-radio-option-background-color-selected-default - Background color of the radio option when selected
 * @cssprop --wcs-radio-option-background-color-selected-hover - Background color of the radio option when selected and hovered
 * @cssprop --wcs-radio-option-background-color-selected-press - Background color of the radio option when selected and pressed
 * @cssprop --wcs-radio-option-background-color-selected-disabled - Background color of the radio option when selected and disabled
 *
 * @cssprop --wcs-radio-option-text-color-default - Color of the text when the radio option is not selected
 * @cssprop --wcs-radio-option-text-color-hover - Color of the text when the radio option not selected is hovered
 * @cssprop --wcs-radio-option-text-color-press - Color of the text when the radio option is pressed
 *
 * @cssprop --wcs-radio-option-text-color-selected-default - Color of the text when the radio option is selected
 * @cssprop --wcs-radio-option-text-color-selected-hover - Color of the text when the radio option is selected and hovered
 * @cssprop --wcs-radio-option-text-color-selected-press - Color of the text when the radio option is selected and pressed
 * @cssprop --wcs-radio-option-text-color-disabled - Color of the text when the radio option's is disabled
 *
 * @cssprop --wcs-radio-option-text-font-weight-default - Default font weight of the text
 * @cssprop --wcs-radio-option-text-font-weight-selected - Font weight of the text when the radio option is selected
 *
 * @cssprop --wcs-radio-option-border-radius - Border radius of the radio option
 * @cssprop --wcs-radio-option-border-width - Width of the border of the radio option
 * @cssprop --wcs-radio-option-border-color-hover - Color of the border of the radio option when not selected and hovered
 * @cssprop --wcs-radio-option-border-color-press - Color of the border of the radio option when not selected and pressed
 *
 * @cssprop --wcs-radio-option-padding-top - Padding top of the radio option
 * @cssprop --wcs-radio-option-padding-right - Padding right of the radio option
 * @cssprop --wcs-radio-option-padding-bottom - Padding bottom of the radio option
 * @cssprop --wcs-radio-option-padding-left - Padding left of the radio option
 */
export class Radio {
    constructor() {
        this.inputId = `wcs-rb-${radioButtonIds++}`;
        this.inheritedAttributes = {};
        this.checked = false;
        this.radioTabIndex = -1;
        this.value = undefined;
        this.label = undefined;
        this.disabled = false;
        this.name = undefined;
        this.mode = 'radio';
    }
    /**
     * @internal
     * Checks of unchecks the radio according to it's radio-group value
     */
    async updateState() {
        const radioGroup = this.getClosestRadioGroup();
        if (radioGroup) {
            this.checked = radioGroup.name === this.name && radioGroup.value === this.value;
        }
    }
    /** @internal */
    async setTabIndex(value) {
        this.radioTabIndex = value;
    }
    async setAriaAttribute(attr, value) {
        setOrRemoveAttribute(this.nativeRadio, attr, value);
    }
    onFocus(ev) {
        this.wcsFocus.emit(ev);
    }
    onBlur(ev) {
        this.wcsBlur.emit(ev);
    }
    getClosestRadioGroup() {
        return this.el.closest('wcs-radio-group');
    }
    componentWillLoad() {
        if (this.value === undefined) {
            // If no value was given we use the text content instead.
            this.value = this.el.innerText || '';
        }
        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, RADIO_INHERITED_ATTRS));
    }
    onChange(_) {
        if (this.disabled)
            return;
        // If the radio is unchecked, then the change represents its transition to the check state.
        // Only emit the change event when going from unchecked to checked, like the native behavior.
        // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event
        if (!this.checked) {
            this.checked = true;
            this.emitRadioChangeEvent();
        }
    }
    emitRadioChangeEvent() {
        this.wcsRadioClick.emit({
            label: this.label,
            source: this.el,
            value: this.value
        });
    }
    render() {
        return (h(Host, { key: 'b753f4673fccbd2f0d7e1636be135da90e1850ef', slot: "option", tabIndex: this.disabled ? -1 : this.radioTabIndex, class: this.checked ? 'checked' : '' }, h("input", Object.assign({ key: '25ac2afe93bdde452db9226feb11587f76a4fd69', id: this.inputId, type: "radio", name: this.name, value: this.value, checked: this.checked, disabled: this.disabled, onChange: this.onChange.bind(this), onFocus: this.onFocus.bind(this), onBlur: this.onBlur.bind(this), "aria-disabled": this.disabled ? 'true' : null, "aria-checked": `${this.checked}`, ref: (el) => (this.nativeRadio = el) }, this.inheritedAttributes)), h("label", { key: '13b771ac257bcf81734cee12a85ffdf143e3c329', htmlFor: `${this.inputId}` }, this.label)));
    }
    static get is() { return "wcs-radio"; }
    static get encapsulation() { return "shadow"; }
    static get delegatesFocus() { return true; }
    static get originalStyleUrls() {
        return {
            "$": ["radio.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["radio.css"]
        };
    }
    static get properties() {
        return {
            "value": {
                "type": "any",
                "mutable": true,
                "complexType": {
                    "original": "any | any[] | undefined | null",
                    "resolved": "any",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Sets a unique value for each radio, used to identify which radio button in a group is selected"
                },
                "attribute": "value",
                "reflect": true
            },
            "label": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The label text displayed for the user"
                },
                "attribute": "label",
                "reflect": true
            },
            "disabled": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "If `true`, the user cannot interact with the radio."
                },
                "attribute": "disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "name": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "The name of the control, automatically set by the radio group.  \n(You shouldn't set this prop by yourself)"
                },
                "attribute": "name",
                "reflect": false
            },
            "mode": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "RadioGroupMode",
                    "resolved": "\"horizontal\" | \"option\" | \"radio\"",
                    "references": {
                        "RadioGroupMode": {
                            "location": "import",
                            "path": "../radio-group/radio-group-interface",
                            "id": "src/components/radio-group/radio-group-interface.ts::RadioGroupMode"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "The display mode of the control, automatically set by the radio group.  \n(You shouldn't set this prop by yourself)"
                },
                "attribute": "mode",
                "reflect": true,
                "defaultValue": "'radio'"
            }
        };
    }
    static get states() {
        return {
            "checked": {},
            "radioTabIndex": {}
        };
    }
    static get events() {
        return [{
                "method": "wcsRadioClick",
                "name": "wcsRadioClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when the radio is clicked or Space/Enter is pressed above an unchecked radio"
                },
                "complexType": {
                    "original": "RadioChosedEvent",
                    "resolved": "RadioChosedEvent",
                    "references": {
                        "RadioChosedEvent": {
                            "location": "import",
                            "path": "./radio-interface",
                            "id": "src/components/radio/radio-interface.ts::RadioChosedEvent"
                        }
                    }
                }
            }, {
                "method": "wcsBlur",
                "name": "wcsBlur",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when the radio loses focus."
                },
                "complexType": {
                    "original": "FocusEvent",
                    "resolved": "FocusEvent",
                    "references": {
                        "FocusEvent": {
                            "location": "global",
                            "id": "global::FocusEvent"
                        }
                    }
                }
            }, {
                "method": "wcsFocus",
                "name": "wcsFocus",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when the radio has focus."
                },
                "complexType": {
                    "original": "FocusEvent",
                    "resolved": "FocusEvent",
                    "references": {
                        "FocusEvent": {
                            "location": "global",
                            "id": "global::FocusEvent"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "updateState": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": [{
                            "name": "internal",
                            "text": "Checks of unchecks the radio according to it's radio-group value"
                        }]
                }
            },
            "setTabIndex": {
                "complexType": {
                    "signature": "(value: number) => Promise<void>",
                    "parameters": [{
                            "name": "value",
                            "type": "number",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }]
                }
            },
            "setAriaAttribute": {
                "complexType": {
                    "signature": "(attr: AriaAttributeName, value: string | null | undefined) => Promise<void>",
                    "parameters": [{
                            "name": "attr",
                            "type": "\"role\" | `aria-${string}`",
                            "docs": ""
                        }, {
                            "name": "value",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AriaAttributeName": {
                            "location": "import",
                            "path": "../../utils/mutable-aria-attribute",
                            "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
}
let radioButtonIds = 0;
//# sourceMappingURL=radio.js.map
