import { h, Host } from "@stencil/core";
import { isEnterKey, isSpaceKey } from "../../utils/helpers";
/**
 * You must add `wcs-dropdown-item` to `wcs-dropdown`
 * @slot <no-name> the slot that contains the item's name
 *
 * @cssprop --wcs-dropdown-item-height - Height of the dropdown item
 * @cssprop --wcs-dropdown-item-padding-horizontal - Padding horizontal
 * @cssprop --wcs-dropdown-item-padding-vertical - Padding vertical
 * @cssprop --wcs-dropdown-item-text-font-weight - Font weight of the dropdown item
 * @cssprop --wcs-dropdown-item-text-color-default - Default text color of the dropdown item
 * @cssprop --wcs-dropdown-item-text-color-hover - Text color of the dropdown item when hovered
 * @cssprop --wcs-dropdown-item-text-color-press - Text color of the dropdown item when pressed
 * @cssprop --wcs-dropdown-item-background-color-default - Default background color of the dropdown item
 * @cssprop --wcs-dropdown-item-background-color-hover - Background color of the dropdown item when hovered
 * @cssprop --wcs-dropdown-item-background-color-press - Background color of the dropdown item when pressed
 * @cssprop --wcs-dropdown-item-border-width-focus - Border width of the dropdown item when focused
 * @cssprop --wcs-dropdown-item-border-color-focus - Border color of the dropdown item when focused
 * @cssprop --wcs-dropdown-item-border-radius - Border radius of the dropdown item
 * @cssprop --wcs-dropdown-item-transition-duration - Transition duration of the dropdown item
 */
export class DropdownItem {
    onMouseUp(_) {
        this.wcsDropdownItemClick.emit();
    }
    onKeyDown(evt) {
        if (isSpaceKey(evt) || isEnterKey(evt)) {
            evt.preventDefault();
            evt.stopImmediatePropagation();
            this.wcsDropdownItemClick.emit();
        }
    }
    render() {
        return (h(Host, { key: '70e0767afe5fe295df4292e356db89d555fa71a3', slot: "item", role: "menuitem", tabindex: "-1" }, h("slot", { key: '11cd674f89784aec6bfa1ba4d15f0fb0f25d976e' })));
    }
    static get is() { return "wcs-dropdown-item"; }
    static get originalStyleUrls() {
        return {
            "$": ["dropdown-item.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["dropdown-item.css"]
        };
    }
    static get events() {
        return [{
                "method": "wcsDropdownItemClick",
                "name": "wcsDropdownItemClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the dropdown item is clicked"
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get listeners() {
        return [{
                "name": "mouseup",
                "method": "onMouseUp",
                "target": undefined,
                "capture": false,
                "passive": true
            }, {
                "name": "keydown",
                "method": "onKeyDown",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=dropdown-item.js.map
