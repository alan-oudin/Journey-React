import { h, Host } from "@stencil/core";
import { ICONS_FONT_CHEVRON_UNICODE } from "../breadcrumb/breadcrumb-constants";
/**
 * The breadcrumb item represents a link inside a breadcrumb.
 *
 * @slot <no-name> Main container slot
 *
 * @cssprop --wcs-breadcrumb-item-max-height - Maximum height of the breadcrumb item
 * @cssprop --wcs-breadcrumb-item-line-height - Line height of the breadcrumb item
 * @cssprop --wcs-breadcrumb-item-font-size - Font size of the breadcrumb item
 *
 * @cssprop --wcs-breadcrumb-item-icon-color - Color of the breadcrumb item icon
 * @cssprop --wcs-breadcrumb-item-icon-font-size - Font size of the breadcrumb item icon
 *
 * @cssprop --wcs-breadcrumb-item-gap - Gap between text and chevron icon
 * @cssprop --wcs-breadcrumb-item-link-color - Color of the breadcrumb item link
 * @cssprop --wcs-breadcrumb-item-link-color-hover - Color of the breadcrumb item link when hovered
 * @cssprop --wcs-breadcrumb-item-link-font-weight - Font weight of the breadcrumb item link
 *
 * @cssprop --wcs-breadcrumb-item-border-width-focus - Border width of the breadcrumb item when focused
 * @cssprop --wcs-breadcrumb-item-border-color-focus - Border color of the breadcrumb item when focused
 *
 * @cssprop --wcs-breadcrumb-item-active-color - Color of the breadcrumb item when the link is active
 */
export class BreadcrumbItem {
    constructor() {
        this.last = false;
    }
    render() {
        return (h(Host, { key: '56e9780cd4ef4603b3a7364384222ffbc69bd4a5', role: "listitem" }, h("slot", { key: 'd3b484440c71efc646b2de9cb5f6ff8154887207' }), !this.last && (h("span", { key: '47eb0cbd394d31e46b0d919ab77d2f61d1d0aeef', class: "item-icon", "aria-hidden": "true" }, ICONS_FONT_CHEVRON_UNICODE))));
    }
    static get is() { return "wcs-breadcrumb-item"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["breadcrumb-item.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["breadcrumb-item.css"]
        };
    }
    static get properties() {
        return {
            "last": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }, {
                            "name": "ignore",
                            "text": undefined
                        }],
                    "text": "Automatically set by the parent breadcrumb.\nTrue if it is the last breadcrumb item.\n(You shouldn't set this prop by yourself)"
                },
                "attribute": "last",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
}
//# sourceMappingURL=breadcrumb-item.js.map
