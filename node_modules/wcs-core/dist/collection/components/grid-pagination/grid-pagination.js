import { h, Host } from "@stencil/core";
import { GridPaginationArrow } from "./grid-pagination-arrow";
import { inheritAriaAttributes, inheritAttributes, setOrRemoveAttribute } from "../../utils/helpers";
const GRID_PAGINATION_INHERITED_ATTRS = ['tabindex', 'title'];
/**
 * The grid pagination is a subcomponent of `wcs-grid`, slotted in `grid-pagination` under the `<table>` element.
 *
 * @cssprop --wcs-grid-pagination-color - Text color of the grid pagination
 * @cssprop --wcs-grid-pagination-font-size - Font-size of the grid pagination
 * @cssprop --wcs-grid-pagination-font-weight - Font-weight of the grid pagination
 * @cssprop --wcs-grid-pagination-gap - Gap between the page size, number of elements and page management
 * @cssprop --wcs-grid-pagination-page-size-gap - Gap between the select and the text within the page size container
 * @cssprop --wcs-grid-pagination-counter-gap - Gap within the page management counter
 * @cssprop --wcs-grid-pagination-margin-top - Margin between the grid and the pagination
 * @cssprop --wcs-grid-pagination-arrow-color-inactive - Color of the inactive arrow
 * @cssprop --wcs-grid-pagination-arrow-color-active - Color of the active arrow
 */
export class GridPagination {
    constructor() {
        this.inheritedAttributes = {};
        this.availablePageSizes = [10, 20, 50];
        this.currentPage = GridPagination.INDEX_FIRST_PAGE;
        this.pageSize = this.availablePageSizes[0];
        this.itemsCount = 0;
        this.pageCount = 1;
    }
    componentWillLoad() {
        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, GRID_PAGINATION_INHERITED_ATTRS));
    }
    async setAriaAttribute(attr, value) {
        setOrRemoveAttribute(this.nativeNav, attr, value);
    }
    getWcsGrid() {
        return this.el.parentElement.tagName === 'WCS-GRID' ? this.el.parentElement : undefined;
    }
    lastPage() {
        this.currentPage = this.pageCount - 1;
        this.emitPaginationChange();
        this.focusFirstGridCell();
    }
    nextPage() {
        if (this.canGoToNextPage()) {
            this.currentPage++;
            this.emitPaginationChange();
            this.focusFirstGridCell();
        }
    }
    canGoToNextPage() {
        return this.currentPage + 1 < this.pageCount;
    }
    previousPage() {
        if (this.canGoToPreviousPage()) {
            this.currentPage--;
            this.emitPaginationChange();
            this.focusFirstGridCell();
        }
    }
    canGoToPreviousPage() {
        return this.currentPage > 0;
    }
    firstPage() {
        this.currentPage = 0;
        this.emitPaginationChange();
        this.focusFirstGridCell();
    }
    onChangePageSize(event) {
        this.pageSize = event.detail.value;
        if (this.currentPage + 1 > this.pageSize) {
            this.currentPage = 0;
        }
        this.emitPaginationChange();
        this.focusFirstGridCell();
    }
    /**
     * Move focus to the first grid cell after a pagination change
     */
    focusFirstGridCell() {
        const grid = this.getWcsGrid();
        if (grid) {
            requestAnimationFrame(() => {
                this.el.blur();
                grid.focusFirstCell();
            });
        }
    }
    emitPaginationChange() {
        this.wcsGridPaginationChange.emit({
            pagination: {
                currentPage: this.currentPage,
                pageSize: this.pageSize,
                itemsCount: this.itemsCount,
                pageCount: this.pageCount
            }
        });
    }
    render() {
        return (h(Host, { key: 'a51e533835607f4e0b712fe26680704a71f76cd6', slot: "grid-pagination" }, h("div", { key: '8ff4ebf10c9e134a8e2fe5d577860a8d6dc9c863', class: "container" }, h("div", { key: 'a4c6ce48c71fb017dfecdb3f1e8bdc59894e1cbd', class: "page-size" }, h("wcs-select", { key: 'ae08e610f92bc8084806b25b0b5d7fa95db079ee', placeholder: "El\u00E9ments par page", class: "available-page-sizes", "aria-labelledby": "elements-per-page-number elements-per-page-text", value: this.pageSize, onWcsChange: this.onChangePageSize.bind(this) }, this.availablePageSizes.map((pageSize) => h("wcs-select-option", { value: pageSize }, pageSize))), h("span", { key: '282fd594fa817e9f2535c7403b5e1d66e4a7d030', id: "elements-per-page-number", hidden: true }, this.pageSize), h("span", { key: '00ee37d7e5156aa17b234fdf6eec956228064094', id: "elements-per-page-text" }, "\u00E9l\u00E9ments par page")), h("div", { key: '2ae95e32fc77cafebf0a38eb2746c62d0bd3a537', class: "items-count" }, h("span", { key: '5861d6bbf937867579181842dc93ba33290cdfe9' }, this.itemsCount, " \u00E9l\u00E9ments")), h("nav", Object.assign({ key: '7d847f316fb18ec7bdc08f7c055115a7391bb25e', "aria-label": "pagination", ref: (el) => (this.nativeNav = el) }, this.inheritedAttributes), h("ul", { key: 'd58fdfcd0a663071a6c94b72acf339a2efd57b5d', class: "page-management" }, h("li", { key: 'd18366653d52b0e481bfc8bb0d001d72aa5b3b36', class: "pagination-arrow", onClick: this.firstPage.bind(this) }, h(GridPaginationArrow, { key: 'ce33b84750ac08bfc50e91378f79ce62c11c9750', active: this.canGoToPreviousPage(), order: "previous", double: true })), h("li", { key: 'fb8adcbe91d40dd5d5dd741ec2c69299d971a1ee', class: "pagination-arrow", onClick: this.previousPage.bind(this) }, h(GridPaginationArrow, { key: 'b5f8b2804909a64e73e4d26a1faea483a10d2137', active: this.canGoToPreviousPage(), order: "previous" })), h("li", { key: '22742254c3c37ecf900eba29d1605a0420ff11e2', class: "pagination-counter" }, h("span", { key: '1f9385fffd93e2eb97d8199b0d7e459e58e01285', "aria-label": `Page ${this.currentPage + 1} sur ${this.pageCount}`, "aria-current": "page" }, this.currentPage + 1, " / ", this.pageCount)), h("li", { key: '3a408b5b27a1ff8ba7dc52b6027506100e371d49', class: "pagination-arrow", onClick: this.nextPage.bind(this) }, h(GridPaginationArrow, { key: '54e0d638e0645fd46b8a96a99509c8a3dafc842b', active: this.canGoToNextPage(), order: "next" })), h("li", { key: 'e91b2f2eeadfeea3ef68fa83c3c3e9fa30c3c17f', class: "pagination-arrow", onClick: this.lastPage.bind(this) }, h(GridPaginationArrow, { key: '14834c2f39a7f1076dfe2660aa2c651d1c52f40e', active: this.canGoToNextPage(), order: "next", double: true })))))));
    }
    static get is() { return "wcs-grid-pagination"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["grid-pagination.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["grid-pagination.css"]
        };
    }
    static get properties() {
        return {
            "availablePageSizes": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "number[]",
                    "resolved": "number[]",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Set the available page sizes in the pagination dropdown on the left."
                },
                "defaultValue": "[10, 20, 50]"
            },
            "currentPage": {
                "type": "number",
                "mutable": true,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The current page of the pagination. First page starts at index 0."
                },
                "attribute": "current-page",
                "reflect": false,
                "defaultValue": "GridPagination.INDEX_FIRST_PAGE"
            },
            "pageSize": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Maximum number of elements shown per page.  \nDefault is the first value of `availablePageSizes`."
                },
                "attribute": "page-size",
                "reflect": false,
                "defaultValue": "this.availablePageSizes[0]"
            },
            "itemsCount": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Total elements in the grid.  \n- **Grid in `Server mode`** : You have to set `itemsCount` = your total data length.  \n- **Grid not in Server mode** : Do not set it manually : itemsCount is set and updated every pagination refresh."
                },
                "attribute": "items-count",
                "reflect": false,
                "defaultValue": "0"
            },
            "pageCount": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Max number of pages.  \n- **Grid in `Server mode`** : You have to set `pageCount` = `itemsCount` divided by `pageSize`.  \n- **Grid not in Server mode** : Do not set it manually : pageCount is set and updated every pagination refresh."
                },
                "attribute": "page-count",
                "reflect": false,
                "defaultValue": "1"
            }
        };
    }
    static get events() {
        return [{
                "method": "wcsGridPaginationChange",
                "name": "wcsGridPaginationChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the pagination changes."
                },
                "complexType": {
                    "original": "WcsGridPaginationChangeEventDetails",
                    "resolved": "WcsGridPaginationChangeEventDetails",
                    "references": {
                        "WcsGridPaginationChangeEventDetails": {
                            "location": "import",
                            "path": "../grid/grid-interface",
                            "id": "src/components/grid/grid-interface.ts::WcsGridPaginationChangeEventDetails"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "setAriaAttribute": {
                "complexType": {
                    "signature": "(attr: AriaAttributeName, value: string | null | undefined) => Promise<void>",
                    "parameters": [{
                            "name": "attr",
                            "type": "\"role\" | `aria-${string}`",
                            "docs": ""
                        }, {
                            "name": "value",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AriaAttributeName": {
                            "location": "import",
                            "path": "../../utils/mutable-aria-attribute",
                            "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
}
GridPagination.INDEX_FIRST_PAGE = 0;
//# sourceMappingURL=grid-pagination.js.map
