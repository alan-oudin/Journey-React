import { forceUpdate, h, Host, } from "@stencil/core";
import { comNavDidLoadWithResizeObserver, registerCloseHandlerForFocusOutEventOn } from "./com-nav-utils";
import { inheritAriaAttributes, inheritAttributes, isEscapeKey } from "../../utils/helpers";
const COM_NAV_INHERITED_ATTRS = ['title'];
const WCS_COM_NAV_SUBMENU_TAG_NAME = 'WCS-COM-NAV-SUBMENU';
/**
 * *Part of communication design system*
 *
 * The com-nav component is a container for navigation links to external or internal pages of the website.
 *
 * @slot <no-name> - Default slot containing all the menu declarations
 * @slot app-name - (Optional) Extra slot for the application name
 * @slot actions - Slot for actions placed on the right part of the container
 *
 * @cssprop --wcs-com-nav-menu-bar-height - Height of the menu bar
 * @cssprop --wcs-com-nav-border-color - Border color of the bottom border of the com-nav
 * @cssprop --wcs-com-nav-border-width - Border width of the border below com-nav
 * @cssprop --wcs-com-nav-background-color - Background color of the com-nav;
 * @cssprop --wcs-com-nav-app-name-color - App name color
 * @cssprop --wcs-com-nav-app-name-font-weight - App name font-weight
 * @cssprop --wcs-com-nav-app-name-font-size - Font size of the App name text
 * @cssprop --wcs-com-nav-app-name-line-height - Line height of the App name text
 * @cssprop --wcs-com-nav-item-color - Color of the wcs-nav-item inside menu-bar
 * @cssprop --wcs-com-nav-item-font-weight - Font weight of the wcs-nav-item inside menu-bar
 * @cssprop --wcs-com-nav-focus-outline-color - Focus outline color of the wcs-nav-item inside menu-bar
 * @cssprop --wcs-com-nav-horizontal-padding - Horizontal padding of wcs-com-nav
 * @cssprop --wcs-com-nav-vertical-padding - Vertical padding of wcs-com-nav
 * @cssprop --wcs-com-nav-mobile-overlay-gap - Gap between each items section in mobile overlay
 * @cssprop --wcs-com-nav-mobile-overlay-padding - Padding inside mobile overlay
 * @cssprop --wcs-com-nav-mobile-menu-icon-border-color - Bar border color on the left of icon mobile menu
 * @cssprop --wcs-com-nav-mobile-menu-icon-gap- Gap between icon mobile menu and separator on the left
 * @cssprop --wcs-com-nav-mobile-menu-icon-margin-left - Margin left of icon mobile menu
 * @cssprop --wcs-com-nav-menu-bar-gap - Gap between each item inside menu-bar
 * @cssprop --wcs-com-nav-menu-bar-margin-left - Margin left between menu bar and the app-name section
 */
export class ComNav {
    constructor() {
        this.inheritedAttributes = {};
        this.appName = undefined;
        this.mobileMenuOpen = false;
        this.currentActiveSizing = undefined;
    }
    mobileMenuIconClick() {
        this.mobileMenuOpen = !this.mobileMenuOpen;
    }
    disconnectedCallback() {
        var _a;
        (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
    componentWillLoad() {
        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, COM_NAV_INHERITED_ATTRS));
        const slottedNavigableItems = this.el.querySelectorAll(':scope > wcs-com-nav-submenu:not([slot]), :scope > a:not([slot])');
        registerCloseHandlerForFocusOutEventOn(slottedNavigableItems, WCS_COM_NAV_SUBMENU_TAG_NAME);
    }
    componentDidLoad() {
        if (!this.resizeObserver) {
            this.resizeObserver = comNavDidLoadWithResizeObserver(this);
            this.resizeObserver.observe(document.body);
        }
    }
    async setAriaAttribute(attr, value) {
        // XXX: Special case on this component because of the desktop / mobile mode that re-renders the <nav> element,
        // making it lose all its attribute
        this.inheritedAttributes[attr] = value;
        forceUpdate(this);
    }
    closeMobileMenu() {
        this.mobileMenuOpen = false;
    }
    // In mobile mode, we have only one global drawer to display the menu, that why we have to listen the clicks events
    // in the root component (this component). In desktop mode, all submenus and categories manage their drawer its
    // opening state.
    //
    // We listen to the click events fired by the submenu component and we close the mobile menu.
    // In desktop mode, the submenu itself manages the closing of the menu.
    onClickOnFinalAction() {
        this.closeMobileMenu();
    }
    render() {
        const menuAriaLabel = this.inheritedAttributes['aria-label'] || undefined;
        return (h(Host, { key: 'b39ff3dbd6d304ad0252e0fcfd2e0c5716b666db' }, h("div", { key: 'f84b73c9cee6295a7776576afeb61b65b71ea34e', class: "container" }, h("div", { key: 'a39b867e9d102abb4e4c13503a544681cd9b7fd8', class: "container-left" }, h("div", { key: '49db5dd80f097a9b2ccaf39fc64be9f6100108be', class: "app-name" }, this.appName, h("slot", { key: '2936888d5a805c67a3be4079a7eea62d460d42fe', name: "app-name" })), this.currentActiveSizing === 'desktop' ?
            h("nav", Object.assign({ role: "navigation" }, this.inheritedAttributes), h("div", { class: "menu-bar", role: "list" }, this.currentActiveSizing === 'desktop'
                ? h("slot", null)
                : null))
            : null), h("div", { key: 'c2c97d21d21d542a18fb141f90ce7ce91d0b12c0', class: "container-right" }, h("slot", { key: '51912b232ac4d51baf1d2c164e90ab59a787924e', name: "actions" }), this.currentActiveSizing === 'mobile' ?
            h("nav", Object.assign({ id: "wcs-com-nav-mobile-menu", role: "navigation" }, this.inheritedAttributes), h("button", { id: "mobile-menu-icon", "aria-label": menuAriaLabel, "aria-expanded": this.mobileMenuOpen ? "true" : "false", "aria-controls": "wcs-com-nav-mobile-menu", onClick: () => this.mobileMenuIconClick() }), this.currentActiveSizing === 'mobile'
                ? h("div", { class: "mobile-overlay", "data-mobile-open": this.mobileMenuOpen, role: "list" }, h("slot", null))
                : null)
            : null))));
    }
    /**
     * Close the mobile menu if the user press escape.
     * @param evt keydown event on window target.
     */
    exitMobileMenuOnKeyDown(evt) {
        if (isEscapeKey(evt)) {
            this.closeMobileMenu();
        }
    }
    static get is() { return "wcs-com-nav"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["com-nav.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["com-nav.css"]
        };
    }
    static get properties() {
        return {
            "appName": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Name of the application to be displayed in the menu bar"
                },
                "attribute": "app-name",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "mobileMenuOpen": {},
            "currentActiveSizing": {}
        };
    }
    static get methods() {
        return {
            "setAriaAttribute": {
                "complexType": {
                    "signature": "(attr: AriaAttributeName, value: string | null | undefined) => Promise<void>",
                    "parameters": [{
                            "name": "attr",
                            "type": "\"role\" | `aria-${string}`",
                            "docs": ""
                        }, {
                            "name": "value",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AriaAttributeName": {
                            "location": "import",
                            "path": "../../utils/mutable-aria-attribute",
                            "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "wcsClickOnFinalAction",
                "method": "onClickOnFinalAction",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "keydown",
                "method": "exitMobileMenuOnKeyDown",
                "target": "window",
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=com-nav.js.map
