import { h } from "@stencil/core";
/**
 * The card component is a container that display content such as text, images, buttons, and lists.
 * A card can be a single component, but is often made up of a header, title, subtitle, and content.
 *
 * While they're very flexible, it's important to use them consistently. You may use `wcs-card-media` outside `wcs-card-body`
 * and `wcs-card-header` `wcs-card-content` `wcs-card-footer` within `wcs-card-body` to make sure the card is well-designed.
 *
 * @slot - Default slot for the card content
 *
 * @cssprop --wcs-card-border-color - Border color of the card
 * @cssprop --wcs-card-border-radius - Border radius of the card
 * @cssprop --wcs-card-border-width - Border width of the card
 * @cssprop --wcs-card-background-color - Background color of the card
 * @cssprop --wcs-card-text-color - Text color of the card
 * @cssprop --wcs-card-horizontal-min-height - Min height of the card when horizontal
 */
export class Card {
    constructor() {
        this.mode = 'flat';
        this.orientation = null;
    }
    orientationChanged() {
        this.updateWcsCardImageOrientation();
    }
    onSlotChange() {
        if (this.orientation) {
            this.updateWcsCardBodyOrientation();
            this.updateWcsCardImageOrientation();
        }
    }
    updateWcsCardImageOrientation() {
        var _a;
        (_a = this.findWcsCardMedia()) === null || _a === void 0 ? void 0 : _a.setOrientation(this.orientation);
    }
    updateWcsCardBodyOrientation() {
        var _a;
        (_a = this.findWcsCardBody()) === null || _a === void 0 ? void 0 : _a.setOrientation(this.orientation);
    }
    findWcsCardMedia() {
        return this.el.querySelector('wcs-card-media');
    }
    findWcsCardBody() {
        return this.el.querySelector('wcs-card-body');
    }
    render() {
        return (h("slot", { key: '20a57cf8fc64155e65a98bdb69618ec013ea5a7f', onSlotchange: () => this.onSlotChange() }));
    }
    static get is() { return "wcs-card"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["card.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["card.css"]
        };
    }
    static get properties() {
        return {
            "mode": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "CardMode",
                    "resolved": "\"flat\" | \"raised\"",
                    "references": {
                        "CardMode": {
                            "location": "import",
                            "path": "./card-interface",
                            "id": "src/components/card/card-interface.ts::CardMode"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "mode",
                "reflect": true,
                "defaultValue": "'flat'"
            },
            "orientation": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "CardOrientation",
                    "resolved": "\"horizontal\" | \"vertical\"",
                    "references": {
                        "CardOrientation": {
                            "location": "import",
                            "path": "./card-interface",
                            "id": "src/components/card/card-interface.ts::CardOrientation"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The orientation of the card, can be horizontal or vertical"
                },
                "attribute": "orientation",
                "reflect": true,
                "defaultValue": "null"
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "orientation",
                "methodName": "orientationChanged"
            }];
    }
}
//# sourceMappingURL=card.js.map
