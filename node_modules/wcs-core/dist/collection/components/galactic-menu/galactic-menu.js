import { h, Host } from "@stencil/core";
import { createPopper } from "@popperjs/core";
import { clickInsideElement, inheritAriaAttributes, inheritAttributes, isEscapeKey, setOrRemoveAttribute } from "../../utils/helpers";
const GALACTIC_MENU_INHERITED_ATTRS = ['tabindex', 'title'];
/**
 * *Part of communication design system*
 * You can put a wcs-galactic-menu inside a wcs-galactic component to add an extra menu
 *
 * @slot <no-name> - Main container slot
 *
 * @cssprop --wcs-galactic-menu-background-color - Background color of the menu
 * @cssprop --wcs-galactic-menu-padding-horizontal - Horizontal padding of the menu
 * @cssprop --wcs-galactic-menu-gap - Gap between items in the menu
 * @cssprop --wcs-galactic-menu-height - Height of the menu
 * @cssprop --wcs-galactic-menu-icon-focus-outline-color - Color of the focus outline on the icon
 * @cssprop --wcs-galactic-menu-overlay-background-color - Background color of the overlay
 * @cssprop --wcs-galactic-menu-overlay-padding - Padding of the overlay
 * @cssprop --wcs-galactic-menu-overlay-color - Color of the overlay
 */
export class Galactic {
    constructor() {
        this.inheritedAttributes = {};
        this.showPopoverMenu = false;
        this.text = undefined;
    }
    componentDidLoad() {
        this.menu = this.el.shadowRoot.getElementById('toggle-menu-icon');
        this.tooltip = this.el.shadowRoot.getElementById('menu');
        this.popper = createPopper(this.menu, this.tooltip, {
            placement: 'bottom-end',
            modifiers: [
                {
                    name: 'offset',
                    options: {
                        offset: [0, 8]
                    }
                }
            ]
        });
    }
    componentWillLoad() {
        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, GALACTIC_MENU_INHERITED_ATTRS));
    }
    async setAriaAttribute(attr, value) {
        setOrRemoveAttribute(this.menuButton, attr, value);
    }
    onWindowClickEvent(event) {
        if (clickInsideElement(event, this.tooltip) || clickInsideElement(event, this.menu)) {
            return;
        }
        else {
            if (this.showPopoverMenu) {
                this.toggleMenu();
            }
        }
    }
    onKeyDown(_event) {
        var _a;
        if (isEscapeKey(_event)) {
            _event.preventDefault();
            this.showPopoverMenu = false;
            (_a = this.menuButton) === null || _a === void 0 ? void 0 : _a.focus();
        }
    }
    toggleMenu() {
        this.showPopoverMenu = !this.showPopoverMenu;
    }
    componentDidRender() {
        if (this.popper) {
            this.popper.update();
        }
    }
    render() {
        return (h(Host, { key: 'bc460c17b222723b8cc037042cc758f8ca0e50ec' }, h("span", { key: 'd324ff624a9e5c9f6984134d4091986cac11f18b' }, this.text), h("button", Object.assign({ key: '7b0160174a249b30e082b9b2a77aca334ee6256a', "aria-haspopup": "true", "aria-controls": "menu", ref: el => {
                this.menuButton = el;
            }, "aria-expanded": this.showPopoverMenu ? "true" : "false" }, this.inheritedAttributes, { onClick: _ => this.toggleMenu() }), h("wcs-mat-icon", { key: '96b20053845f5490791ea278c2444392ba630600', id: "toggle-menu-icon", icon: "more_horiz", size: "m" })), h("span", { key: '6f959f220edbf293fe6922f7aaeaab0f213bf736', id: "menu", role: "menu", "data-show": this.showPopoverMenu }, h("div", { key: '6a05e468d65252ecbb57b421a53be0a0a1974f98', id: "arrow", "data-popper-arrow": true }), h("slot", { key: 'c9398cbb856d836820ac1cddf3113710eeaff5fb' }))));
    }
    static get is() { return "wcs-galactic-menu"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["galactic-menu.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["galactic-menu.css"]
        };
    }
    static get properties() {
        return {
            "text": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Text to be displayed in the galactic bar"
                },
                "attribute": "text",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "showPopoverMenu": {}
        };
    }
    static get methods() {
        return {
            "setAriaAttribute": {
                "complexType": {
                    "signature": "(attr: AriaAttributeName, value: string | null | undefined) => Promise<void>",
                    "parameters": [{
                            "name": "attr",
                            "type": "\"role\" | `aria-${string}`",
                            "docs": ""
                        }, {
                            "name": "value",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AriaAttributeName": {
                            "location": "import",
                            "path": "../../utils/mutable-aria-attribute",
                            "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "click",
                "method": "onWindowClickEvent",
                "target": "window",
                "capture": false,
                "passive": false
            }, {
                "name": "keydown",
                "method": "onKeyDown",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=galactic-menu.js.map
