import { h, Host } from "@stencil/core";
import { isElementFocused, isFocusable } from "../../utils/accessibility";
import { inheritAriaAttributes, inheritAttributes, isTabKey, setOrRemoveAttribute } from "../../utils/helpers";
const MODAL_INHERITED_ATTRS = [];
/**
 * The modal component (also named dialog or popup) is an interface element that appears on top of the page content.
 * Use it to show a message, a confirmation dialog, or any other content like forms.
 *
 * ## Accessibility guidelines ðŸ’¡
 * > - Modal element has `role="dialog"` and `aria-modal="true"`
 * > - Keyboard navigation is trapped inside the modal
 * > - It is mandatory to set the `modal-trigger-controls-id` to the id of the element that opens the dialog, in order
 * > to focus it upon dialog dismissal.
 * > - On modal opening, the default behaviour is to focus the first focusable element. If you want to change the initial
 * > behaviour, you have to use `modal-element-id-to-focus-on-opening` attribute to set the id of the inner modal element you
 * > want to focus. You will see a story as example below
 * > - The modal can be closed at any time by pressing the Escape key.
 * >
 * > - More info : https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/
 *
 * @cssprop --wcs-modal-max-height - Max height of the main container
 * @cssprop --wcs-modal-overflow-y - Overflow-y of the content
 *
 * @cssprop --wcs-modal-backdrop-color - Backdrop color of the modal
 * @cssprop --wcs-modal-max-height - Max height of the main container
 * @cssprop --wcs-modal-background-color - Background color of the modal
 * @cssprop --wcs-modal-border-radius - Border radius of the modal
 * @cssprop --wcs-modal-padding - Padding inside the modal
 * @cssprop --wcs-modal-border-width - Border width of the modal
 * @cssprop --wcs-modal-border-color - Border color of the modal
 * @cssprop --wcs-modal-title-margin-bottom - Margin bottom of the modal title
 * @cssprop --wcs-modal-title-font-size - Font size of the modal title
 * @cssprop --wcs-modal-title-font-weight - Font weight of the modal title
 * @cssprop --wcs-modal-title-line-height - Line height of the modal title
 * @cssprop --wcs-modal-actions-margin-top - Margin top of the modal actions
 * @cssprop --wcs-modal-width-s - Width of the modal for size small
 * @cssprop --wcs-modal-width-m - Width of the modal for size medium
 * @cssprop --wcs-modal-width-l - Width of the modal for size large
 * @cssprop --wcs-modal-width-xl - Width of the modal for size extra large
 *
 * @slot <no-name> Main container slot
 * @slot header Header container slot (for title)
 * @slot actions Actions container slot (for buttons)
 */
export class Modal {
    constructor() {
        this.inheritedAttributes = {};
        /**
         * Give an unique id
         * @private
         */
        this.modalId = modalIds++;
        /**
         * This attribute is used to determine whether the show attribute has changed since the last rendering.
         * This allows us to call the focus method on the first element of the modal when the show attribute changes to true.
         * This call is made in the componentDidRender method
         * @private
         */
        this.showAttributeChangedMarker = false;
        /**
         * This attribute is used to determine if the modal has been closed for the first time since its last activation.
         * It is set to 'true' when the modal is first closed, and will be reset to 'false' when the modal is shown again.
         * This state is important for accessibility reasons in order to focus the modal trigger element (like the button
         * which controls the modal)
         *
         * @private
         */
        this.hasBeenClosedBefore = false;
        this.withoutBackdrop = false;
        this.show = false;
        this.showCloseButton = false;
        this.closeButtonAriaLabel = 'Fermer';
        this.size = 'm';
        this.hideActions = false;
        this.modalTriggerControlsId = undefined;
        this.initialFocusElementId = undefined;
        this.disableAutoFocus = false;
    }
    componentWillLoad() {
        if (!this.modalTriggerControlsId) {
            console.warn('wcs-modal: You must provide the modal-trigger-controls-id attribute to the modal to make it to work properly');
        }
        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, MODAL_INHERITED_ATTRS));
    }
    componentDidLoad() {
        this.updateFocusableElements();
    }
    componentDidRender() {
        var _a;
        this.updateFocusableElements();
        if (this.showAttributeChangedMarker) {
            this.showAttributeChangedMarker = false;
            if (this.disableAutoFocus) {
                return;
            }
            if (!this.initialFocusElementId) {
                (_a = this.firstFocusableElement) === null || _a === void 0 ? void 0 : _a.focus();
            }
            else {
                const modalElementToFocusOnOpening = document.getElementById(this.initialFocusElementId);
                if (!modalElementToFocusOnOpening) {
                    console.warn(`wcs-modal: Unable to focus element - ID '${this.initialFocusElementId}' not found in DOM`);
                }
                modalElementToFocusOnOpening === null || modalElementToFocusOnOpening === void 0 ? void 0 : modalElementToFocusOnOpening.focus();
            }
        }
    }
    async setAriaAttribute(attr, value) {
        setOrRemoveAttribute(this.nativeDivDialog, attr, value);
    }
    onShowChange() {
        if (this.show) {
            this.hasBeenClosedBefore = false;
            this.showAttributeChangedMarker = true;
        }
        else {
            // if we already made actions when the modal was firstly closed, we do nothing
            if (this.hasBeenClosedBefore) {
                return;
            }
            this.hasBeenClosedBefore = true;
            if (this.modalTriggerControlsId) {
                const modalTriggerControlsHtmlElement = document.getElementById(this.modalTriggerControlsId);
                if (!modalTriggerControlsHtmlElement) {
                    console.warn(`wcs-modal: Element with id '${this.modalTriggerControlsId}' could not be found`);
                }
                modalTriggerControlsHtmlElement === null || modalTriggerControlsHtmlElement === void 0 ? void 0 : modalTriggerControlsHtmlElement.focus();
            }
        }
    }
    updateFocusableElements() {
        const focusableElements = Array.from(this.el.querySelectorAll('*'))
            .filter(element => isFocusable(element));
        this.firstFocusableElement = focusableElements.length > 0 && focusableElements[0];
        this.lastFocusableElement = focusableElements.length > 0 && focusableElements[focusableElements.length - 1];
    }
    close() {
        // If the modal isn't shown, we don't do anything
        if (this.show) {
            this.show = false;
            this.wcsDialogClosed.emit();
        }
    }
    onKeyDown(event) {
        if (this.show && this.showCloseButton && event.key === 'Escape') {
            this.close();
        }
        if (this.show) {
            if (isTabKey(event)) {
                this.updateFocusableElements(); // XXX: maybe a performance issue
                const firstElement = this.firstFocusableElement;
                const lastElement = this.lastFocusableElement;
                if (event.shiftKey && isElementFocused(firstElement)) {
                    event.preventDefault();
                    lastElement.focus();
                }
                else if (!event.shiftKey && isElementFocused(lastElement)) {
                    event.preventDefault();
                    firstElement.focus();
                }
            }
        }
    }
    onCloseButtonClick(_) {
        this.close();
    }
    handleSlotContentChange() {
        this.updateFocusableElements();
    }
    render() {
        const modalTitleId = `wcs-modal-title-${this.modalId}`;
        return (h(Host, { key: 'e609fe2024b73cab0bed97c0d3b7012d8deba893' }, h("div", Object.assign({ key: '23007c4ad4971263f7fd99d0e594216cd112f6ea', class: "wcs-modal-container", "data-size": this.size, "aria-modal": "true", role: "dialog", "aria-labelledby": modalTitleId, ref: (el) => (this.nativeDivDialog = el) }, this.inheritedAttributes), h("div", { key: 'bc3e2ead8e3e73da31882c5e87cde2780d9ef2f9', class: "wcs-modal-header" }, h("h1", { key: '87561fc92b0990d00e06463afc111e9bdeab6f20', id: modalTitleId }, h("slot", { key: 'dbf6d932257e7a264206ddf7caea8a80e4b2b069', name: "header" })), this.showCloseButton && (h("wcs-button", { key: '97036ea40d111c5ac737b1e3f789571cd524cb2d', shape: "round", mode: "clear", id: "wcs-modal-close-button", "aria-label": this.closeButtonAriaLabel, onClick: ($event) => this.onCloseButtonClick($event) }, h("wcs-mat-icon", { key: '24d6b531e788c2760c66804df96037714c9f854b', icon: "close" })))), h("div", { key: '34d9ddf3c4527395864a238f329d7b499eb9791b', class: "wcs-modal-content" }, h("slot", { key: '5bbd76fc7de9bc6f5aaec7257e7c73995d3e1447', onSlotchange: () => this.handleSlotContentChange() })), !this.hideActions && (h("div", { key: '0c082f533dd77e73721b3bcf29a6f3d3baac65b3', class: "wcs-modal-actions" }, h("slot", { key: '56bfb65b4784492747eda2f5eb87b29dc7704db3', name: "actions" }))))));
    }
    static get is() { return "wcs-modal"; }
    static get originalStyleUrls() {
        return {
            "$": ["modal.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modal.css"]
        };
    }
    static get properties() {
        return {
            "withoutBackdrop": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies whether the component should display a backdrop on the entire page"
                },
                "attribute": "without-backdrop",
                "reflect": true,
                "defaultValue": "false"
            },
            "show": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Displays the modal"
                },
                "attribute": "show",
                "reflect": true,
                "defaultValue": "false"
            },
            "showCloseButton": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies whether the component should display a close button.\nif false, it won't close the modal when the escape key is pressed."
                },
                "attribute": "show-close-button",
                "reflect": true,
                "defaultValue": "false"
            },
            "closeButtonAriaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the aria-label present on the close button when the modal is opened.  \nOnly use when `showCloseButton` is `true`."
                },
                "attribute": "close-button-aria-label",
                "reflect": false,
                "defaultValue": "'Fermer'"
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "ModalSize",
                    "resolved": "\"l\" | \"m\" | \"s\" | \"xl\"",
                    "references": {
                        "ModalSize": {
                            "location": "import",
                            "path": "./modal-interface",
                            "id": "src/components/modal/modal-interface.ts::ModalSize"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "There are multiple sizes for modals. The default size is medium (m), however other sizes are available. Select the\nsize best suited for the content and screen size displaying the modal. Remember to test responsiveness."
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'m'"
            },
            "hideActions": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies whether the component should hide the actions slot or not"
                },
                "attribute": "hide-actions",
                "reflect": true,
                "defaultValue": "false"
            },
            "modalTriggerControlsId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "private",
                            "text": undefined
                        }],
                    "text": "Specifies which element id controls the modal"
                },
                "attribute": "modal-trigger-controls-id",
                "reflect": false
            },
            "initialFocusElementId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "example",
                            "text": "<wcs-modal initial-focus-element=\"cancel-button\"></wcs-modal>"
                        }],
                    "text": "The ID of the element to automatically focus when the modal opens.\n\nIf this property is not set and `disableAutoFocus` is false, the modal will\nautomatically focus the first focusable element within its content.\nThis follows accessibility best practices by ensuring keyboard navigation\nstarts from a logical point when the modal opens."
                },
                "attribute": "initial-focus-element-id",
                "reflect": false,
                "defaultValue": "undefined"
            },
            "disableAutoFocus": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Disables automatic focus behavior when the modal opens.\n\nWhen set to true, the modal will not automatically focus any element upon opening.\nUse this property with caution, as managing focus is important for accessibility.\nConsider providing an alternative focus management strategy if disabling the default behavior."
                },
                "attribute": "disable-auto-focus",
                "reflect": true,
                "defaultValue": "false"
            }
        };
    }
    static get events() {
        return [{
                "method": "wcsDialogClosed",
                "name": "wcsDialogClosed",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Triggered when the user leaves the dialog with the closing button."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "setAriaAttribute": {
                "complexType": {
                    "signature": "(attr: AriaAttributeName, value: string | null | undefined) => Promise<void>",
                    "parameters": [{
                            "name": "attr",
                            "type": "\"role\" | `aria-${string}`",
                            "docs": ""
                        }, {
                            "name": "value",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AriaAttributeName": {
                            "location": "import",
                            "path": "../../utils/mutable-aria-attribute",
                            "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "show",
                "methodName": "onShowChange"
            }];
    }
    static get listeners() {
        return [{
                "name": "keydown",
                "method": "onKeyDown",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
}
let modalIds = 0;
//# sourceMappingURL=modal.js.map
