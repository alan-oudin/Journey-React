import { h } from "@stencil/core";
import { inheritAriaAttributes, inheritAttributes, setOrRemoveAttribute } from "../../utils/helpers";
const HEADER_INHERITED_ATTRS = [];
/**
 * The header component is an element that appears across the top of all pages on a website or application; it contains the logo, the site name and main actions.
 *
 * @slot logo SNCF Logo
 * @slot title Title of your application
 * @slot center Content to display in the center of the header, useful for a search bar
 * @slot actions Actions such as buttons, dropdown or any useful information to always display on your application
 *
 * @cssprop --wcs-header-background-color - Background color of the header
 *
 * @cssprop --wcs-header-gap - Gap between elements in the header
 * @cssprop --wcs-header-height - Height of the header
 * @cssprop --wcs-header-logo-height - Height of the logo
 * @cssprop --wcs-header-padding-horizontal - Horizontal padding of the header
 *
 * @cssprop --wcs-header-title-color - Color of the title
 * @cssprop --wcs-header-title-font-weight - Font weight of the title
 * @cssprop --wcs-header-title-font-size - Font size of the title
 *
 */
export class Header {
    constructor() {
        this.inheritedAttributes = {};
    }
    componentWillLoad() {
        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, HEADER_INHERITED_ATTRS));
    }
    async setAriaAttribute(attr, value) {
        setOrRemoveAttribute(this.nativeHeader, attr, value);
    }
    hostData() {
        return {
            'slot': 'header'
        };
    }
    render() {
        return (h("header", Object.assign({ key: '110c72f1b40917efdaa2c864c61a8ee99e35ce38', role: "banner", ref: (el) => (this.nativeHeader = el) }, this.inheritedAttributes), h("slot", { key: '8a593fc8e96ea73573fae78d9107897dee680c87', name: "logo" }), h("slot", { key: '1fefec6eee8652ac531c450f15d70cf7ab8ba1c9', name: "title" }), h("slot", { key: 'ef151920a52804693a99501ee62688036e7bcda8', name: "center" }), h("slot", { key: '9d817dd99f3edb3dbe4b5a4bced020c42b64a903', name: "actions" })));
    }
    static get is() { return "wcs-header"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["header.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["header.css"]
        };
    }
    static get methods() {
        return {
            "setAriaAttribute": {
                "complexType": {
                    "signature": "(attr: AriaAttributeName, value: string | null | undefined) => Promise<void>",
                    "parameters": [{
                            "name": "attr",
                            "type": "\"role\" | `aria-${string}`",
                            "docs": ""
                        }, {
                            "name": "value",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AriaAttributeName": {
                            "location": "import",
                            "path": "../../utils/mutable-aria-attribute",
                            "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=header.js.map
