import { h, Host } from "@stencil/core";
import { inheritAriaAttributes, inheritAttributes, setOrRemoveAttribute, isEnterKey, isSpaceKey } from "../../utils/helpers";
import { comNavDidLoadWithResizeObserver } from "../com-nav/com-nav-utils";
const COM_NAV_CATEGORY_INHERITED_ATTRS = ['title'];
/**
 * The com-nav-category is a subcomponent of `wcs-com-nav`. It represents a category nested inside a `wcs-com-nav-submenu`.
 *
 * @cssprop --wcs-com-nav-category-label-font-size - Label font-size
 * @cssprop --wcs-com-nav-category-label-mobile-font-weight - Label font-weight on mobile
 * @cssprop --wcs-com-nav-category-label-mobile-color - Label color on mobile
 * @cssprop --wcs-com-nav-category-label-desktop-font-weight - Label font-weight on desktop
 * @cssprop --wcs-com-nav-category-label-desktop-color - Label color on mobile
 * @cssprop --wcs-com-nav-category-item-mobile-color - Color of category item (mobile)
 * @cssprop --wcs-com-nav-category-item-mobile-font-weight - Font weight of category item (mobile)
 * @cssprop --wcs-com-nav-category-item-mobile-spacing-top - Spacing top around items group (mobile)
 * @cssprop --wcs-com-nav-category-item-mobile-spacing-left - Spacing left around items group (mobile)
 * @cssprop --wcs-com-nav-category-item-mobile-gap - Gap between each category item (mobile)
 * @cssprop --wcs-com-nav-category-label-desktop-gap - Gap inside category label, between text and arrow
 * @cssprop --wcs-com-nav-category-label-desktop-focus-outline-color - Focus outline of the label (desktop)
 * @cssprop --wcs-com-nav-category-desktop-menu-background-color - Background color of the category menu (desktop)
 * @cssprop --wcs-com-nav-category-desktop-menu--border-left-width - Border left width of the category menu
 * @cssprop --wcs-com-nav-category-desktop-menu--border-left-color - Border left color of the category menu
 * @cssprop --wcs-com-nav-category-desktop-menu-background-indicator-color - Indicator color on top of menu
 * @cssprop --wcs-com-nav-category-desktop-menu-padding-top - Padding top of menu
 * @cssprop --wcs-com-nav-category-desktop-menu-padding-bottom - Padding bottom of menu
 * @cssprop --wcs-com-nav-category-desktop-menu-padding-left - Padding left of menu
 * @cssprop --wcs-com-nav-category-desktop-menu-padding-right - Padding right of menu
 * @cssprop --wcs-com-nav-category-desktop-menu-gap - Gap between each item (desktop)
 * @cssprop --wcs-com-nav-category-item-desktop-color - Color of category item (desktop)
 * @cssprop --wcs-com-nav-category-item-desktop-font-weight - Font weight of category item (desktop)
 */
export class ComNavCategory {
    constructor() {
        this.inheritedAttributes = {};
        this.categoryItemsId = `wcs-com-nav-category-items`;
        this.label = undefined;
        this.categoryOpen = false;
        this.currentActiveSizing = 'desktop';
    }
    onWindowClickEvent(_) {
        if (this.categoryOpen)
            this.categoryOpen = false;
    }
    onSubmenuOpened(event) {
        if (event.detail.categoryElement !== this.el) {
            this.categoryOpen = false;
        }
    }
    componentDidLoad() {
        if (!this.resizeObserver) {
            this.resizeObserver = comNavDidLoadWithResizeObserver(this);
            this.resizeObserver.observe(document.body);
        }
    }
    /**
     * Handle key down on category items
     * @param _event the keyboard event
     * @private
     */
    handleCategoryItemsKeyDown(_event) {
        if ((isSpaceKey(_event)) || isEnterKey(_event)) {
            this.handleItemClick(_event);
        }
    }
    componentWillLoad() {
        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, COM_NAV_CATEGORY_INHERITED_ATTRS));
    }
    async setAriaAttribute(attr, value) {
        setOrRemoveAttribute(this.nativeButton, attr, value);
    }
    /**
     * Close the category
     */
    async close() {
        this.categoryOpen = false;
    }
    /**
     * Opens the category
     */
    async open() {
        this.categoryOpen = true;
    }
    /**
     * When the user clicks on the menu, we do not propagate the native event and we launch a custom event to manage
     * the closing of the menu correctly
     */
    onClick(evt) {
        evt.stopPropagation();
        this.wcsCategoryOpened.emit({ categoryElement: this.el });
    }
    /**
     * Close the category and fire item click if we detect a mouse click on a slotted `a` element.
     * @param evt
     * @private
     */
    handleItemClick(evt) {
        if (evt.target.tagName === 'A') {
            this.close();
        }
    }
    disconnectedCallback() {
        var _a;
        (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
    render() {
        return (h(Host, { key: '0b5d69d30228c1585c17d74bf8183f6fe91c1696', role: "listitem", onClick: evt => this.onClick(evt) }, this.currentActiveSizing === 'mobile' ?
            h("h3", { role: "presentation", class: "label-container" }, h("span", { class: "label" }, this.label))
            : h("button", Object.assign({ class: "label-container", "aria-controls": this.categoryItemsId, "aria-expanded": this.categoryOpen ? 'true' : 'false', ref: (el) => (this.nativeButton = el), onClick: _ => this.categoryOpen = !this.categoryOpen }, this.inheritedAttributes), h("span", { class: "label" }, this.label), h("span", { class: "arrow-container" }, h("span", { "aria-hidden": "true", class: "arrow-icon" }, "\uF107"))), h("div", { key: '8269a3a8eb304343e6beef3cfde1e20976e02bbb', class: "item-container", role: "list", "aria-label": this.label, id: this.categoryItemsId, tabIndex: -1, "data-open": this.categoryOpen, onKeyDown: evt => this.handleCategoryItemsKeyDown(evt), onClick: (evt) => this.handleItemClick(evt) }, h("slot", { key: '0cd3f5916499f4e14d554e7fe963a2a384c4b39d' }))));
    }
    static get is() { return "wcs-com-nav-category"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["com-nav-category.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["com-nav-category.css"]
        };
    }
    static get properties() {
        return {
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "label",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "categoryOpen": {},
            "currentActiveSizing": {}
        };
    }
    static get events() {
        return [{
                "method": "wcsCategoryOpened",
                "name": "wcsCategoryOpened",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "CategoryOpenedEventDetail",
                    "resolved": "CategoryOpenedEventDetail",
                    "references": {
                        "CategoryOpenedEventDetail": {
                            "location": "import",
                            "path": "../com-nav/com-nav-interface",
                            "id": "src/components/com-nav/com-nav-interface.ts::CategoryOpenedEventDetail"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "setAriaAttribute": {
                "complexType": {
                    "signature": "(attr: AriaAttributeName, value: string | null | undefined) => Promise<void>",
                    "parameters": [{
                            "name": "attr",
                            "type": "\"role\" | `aria-${string}`",
                            "docs": ""
                        }, {
                            "name": "value",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AriaAttributeName": {
                            "location": "import",
                            "path": "../../utils/mutable-aria-attribute",
                            "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            },
            "close": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Close the category",
                    "tags": []
                }
            },
            "open": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Opens the category",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "click",
                "method": "onWindowClickEvent",
                "target": "window",
                "capture": false,
                "passive": false
            }, {
                "name": "wcsCategoryOpened",
                "method": "onSubmenuOpened",
                "target": "window",
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=com-nav-category.js.map
