import { h, Host } from "@stencil/core";
/**
 * Lists are used for grouping a collection of related items.
 *
 * Standard lists can be used either with or without icons. Depending on the context, the list can have one or more
 * actions (favourite, download, delete, etc.). Use standard lists with a unique action when each line has an action.
 *
 * ## Accessibility guidelines ðŸ’¡
 * > - You should wrap your list-items inside a container with a `role` attribute set to `list`. On each `wcs-list-item`,
 *   you should set a `role` attribute to `listitem`. See the code below.
 * actions (favourite, download, delete, etc.). Use standard lists with a unique action when each line has an action.
 *
 * @slot title - Slot containing the title of the list item
 * @slot properties - Slot containing the `<wcs-list-item-properties>` element
 * @slot actions - Slot containing the actions of the list item, prefer using some `<wcs-button>` inside
 * @slot description - Slot containing the description of the list item
 *
 * @cssprop --wcs-list-item-padding - Padding of the list item
 * @cssprop --wcs-list-item-border-width - Border width of the list item
 * @cssprop --wcs-list-item-border-color - Border color of the list item
 * @cssprop --wcs-list-item-background-color-default - Background color of the list item
 * @cssprop --wcs-list-item-background-color-hover - Background color of the list item when hovered
 * @cssprop --wcs-list-item-background-color-active - Background color of the list item when active
 * @cssprop --wcs-list-item-transition-duration - Transition duration of the list item
 * @cssprop --wcs-list-item-title-color - Color of the title of the list item
 * @cssprop --wcs-list-item-title-font-weight - Font weight of the title of the list item
 * @cssprop --wcs-list-item-title-line-height - Line height of the title of the list item
 * @cssprop --wcs-list-item-title-margin-bottom - Margin bottom of the title of the list item
 * @cssprop --wcs-list-item-icon-color - Color of the icon of the list item
 * @cssprop --wcs-list-item-icon-margin-right - Margin right of the icon of the list item
 * @cssprop --wcs-list-item-actions-margin-left - Margin left of the actions of the list item
 */
export class ListItem {
    constructor() {
        this.activated = false;
    }
    render() {
        return (h(Host, { key: '12f53246cdb5922136d782f186573f3558bebbed' }, h("slot", { key: 'e03247aafa44501292b6c86d58455dc91240151c', name: "icon" }), h("div", { key: '24b4b6b485457e2c37001360f55ce1f4e843366e', class: "content" }, h("div", { key: '736464f3f43ccbdd2a204c3a7b54b78f8ef79c4e', class: "header" }, h("div", { key: '13da0ca922bf545f5610326f5abfc135b66389c5' }, h("slot", { key: '1eb08b7d5aa3bef934f39527204f2633f51325df', name: "title" }), h("slot", { key: '3d506707345797e7e40246b18dc0aac557726d3c', name: "properties" })), h("slot", { key: '1a2afea410fe835bc8570e10e5f72a044d7a0218', name: "actions" })), h("slot", { key: 'b0e4e3ed4cb20abb4d80ac7ff8893cd7b6311aec', name: "description" }))));
    }
    static get is() { return "wcs-list-item"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["list-item.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["list-item.css"]
        };
    }
    static get properties() {
        return {
            "activated": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "True if the item is active. Adds a background color that highlights it."
                },
                "attribute": "activated",
                "reflect": true,
                "defaultValue": "false"
            }
        };
    }
}
//# sourceMappingURL=list-item.js.map
