import { h, Host } from "@stencil/core";
import { parseCssTimeValueToMilliseconds } from "../../utils/helpers";
/**
 * Serve as a container for displaying `wcs-alert` components. Directly use this component to display alerts in your applications.
 *
 * ## Usage
 *
 * You can place the `wcs-alert-drawer` component anywhere in your application. It will be used to display alerts.
 * You need to set `position` property to define where the alert drawer will be displayed on the screen.
 *
 * About alerts order:
 * - alerts are ordered up-bottom if the position is `top` and bottom-up if the position is `bottom`
 *
 * ## Accessibility guidelines ðŸ’¡
 *
 * - The component has `aria-live="polite"` and `aria-atomic="true"` attributes to announce the new alerts to screen readers
 *
 * ## Configuration (on the web component)
 *
 * Per default, the `wcs-alert-drawer` is configured with:
 * - `position: 'top-right'`
 * - `showProgressBar: false`
 * - `timeout: 5000`
 *
 * When using the `WcsAlertDrawer::show(alert: WcsAlertConfig)` method, you can override the default configuration by
 * overriding it through the argument.
 * You can also set them in the `wcs-alert-drawer` component directly as attributes
 *
 * ```html
 * <wcs-alert-drawer position="top-right" show-progress-bar timeout="10000">
 * ```
 * With this configuration, all alerts will be displayed with a progress bar and a timeout of 10 seconds.
 *
 * @slot - the alert drawer content, where alerts you put as children will be displayed
 *
 * @cssprop --wcs-alert-drawer-gap - Gap between alerts
 * @cssprop --wcs-alert-drawer-margin-horizontal - Margin horizontal of the alert drawer
 * @cssprop --wcs-alert-drawer-margin-vertical - Margin vertical of the alert drawer
 * @cssprop --wcs-alert-drawer-hide-alert-animation-duration - Duration of the hide alert animation
 * @cssprop --wcs-alert-drawer-min-width - Minimum width of the alert drawer => define the width of the alerts
 */
export class AlertDrawer {
    constructor() {
        /*
         https://www.reddit.com/r/Frontend/comments/1ato11w/comment/kqz4gt8/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
         https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef
         */
        this.alertEventListeners = new WeakMap();
        this.timeoutId = undefined;
        this.userPrefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        /**
         * Handles the dismissal of an alert
         * @param alert The alert element
         */
        this.close = (alert) => {
            if (!this.userPrefersReducedMotion) {
                this.timeoutId = setTimeout(() => {
                    alert.remove();
                    // Cleanup the event listener reference
                    this.alertEventListeners.delete(alert);
                }, parseCssTimeValueToMilliseconds(window.getComputedStyle(this.el).getPropertyValue("--wcs-alert-drawer-hide-alert-animation-duration")) || 300);
            }
            else {
                // If the user has reduced motion preference, remove the alert immediately
                alert.remove();
                // Cleanup the event listener reference
                this.alertEventListeners.delete(alert);
            }
        };
        this.position = 'bottom-right';
        this.timeout = 5000;
        this.showProgressBar = false;
    }
    /**
     * Method exposed on `wcs-alert-drawer` to show an alert programmatically via the JS API
     * @example
     * Plain javascript (example inside a script tag):
     * ```javascript
     *  document.querySelector('wcs-alert-drawer').show({
     *      title: 'Alert title',
     *      subtitle: 'Alert subtitle',
     *      intent: 'info',
     *      showProgressBar: true,
     *      timeout: 5000
     *  });
     * @param alert The alert to show
     */
    async show(alert) {
        this.alertsContainer.appendChild(this.renderToast(alert));
    }
    renderToast(alert) {
        var _a, _b;
        const alertElement = document.createElement('wcs-alert');
        alertElement.setAttribute('intent', alert.intent);
        // Uses the alert config if defined, otherwise falls back to the drawer default
        // as the showProgressBar is a boolean attribute, we need to set it to an empty string only if true
        if (((_a = alert.showProgressBar) !== null && _a !== void 0 ? _a : this.showProgressBar)) {
            alertElement.setAttribute('show-progress-bar', '');
        }
        // Uses the alert config if defined, otherwise falls back to the drawer default
        alertElement.setAttribute('timeout', String((_b = alert.timeout) !== null && _b !== void 0 ? _b : this.timeout));
        const listener = () => this.close(alertElement);
        this.alertEventListeners.set(alertElement, listener);
        alertElement.addEventListener("wcsAlertDismiss", listener);
        const title = document.createElement('span');
        title.setAttribute('slot', 'title');
        title.textContent = alert.title;
        alertElement.appendChild(title);
        const subtitle = document.createElement('span');
        subtitle.setAttribute('slot', 'subtitle');
        subtitle.textContent = alert.subtitle;
        alertElement.appendChild(subtitle);
        return alertElement;
    }
    render() {
        // https://www.clever-cloud.com/doc/clever-components/?path=/docs/%F0%9F%9B%A0-toast-cc-toaster--docs#about-accessibility
        return (h(Host, { key: '18a68f9f7727b29da85e0852dc87de30d79581ed', role: "region", "aria-label": "Informations", "aria-live": "polite", "aria-atomic": "true" }, h("div", { key: 'ee0d30077439b991e5ff6eb02b24873f015dce5e', ref: (el) => this.alertsContainer = el, id: "alerts-container" })));
    }
    disconnectedCallback() {
        this.alertEventListeners = new WeakMap(); // Clear the event listeners, weakmap is not iterable
        clearTimeout(this.timeoutId);
    }
    static get is() { return "wcs-alert-drawer"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["alert-drawer.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alert-drawer.css"]
        };
    }
    static get properties() {
        return {
            "position": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "WcsAlertDrawerPosition",
                    "resolved": "\"bottom\" | \"bottom-left\" | \"bottom-right\" | \"top\" | \"top-left\" | \"top-right\"",
                    "references": {
                        "WcsAlertDrawerPosition": {
                            "location": "import",
                            "path": "./alert-drawer-interface",
                            "id": "src/components/alert-drawer/alert-drawer-interface.ts::WcsAlertDrawerPosition"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Position of the alert drawer on the screen"
                },
                "attribute": "position",
                "reflect": true,
                "defaultValue": "'bottom-right'"
            },
            "timeout": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Timeout for the alert to be dismissed automatically"
                },
                "attribute": "timeout",
                "reflect": false,
                "defaultValue": "5000"
            },
            "showProgressBar": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether to show the progress bar or not"
                },
                "attribute": "show-progress-bar",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get methods() {
        return {
            "show": {
                "complexType": {
                    "signature": "(alert: WcsAlertConfig) => Promise<void>",
                    "parameters": [{
                            "name": "alert",
                            "type": "{ title: string; subtitle: string; intent: WcsAlertIntent; showProgressBar?: boolean; timeout?: number; }",
                            "docs": "The alert to show"
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "WcsAlertConfig": {
                            "location": "import",
                            "path": "../alert/alert-interface",
                            "id": "src/components/alert/alert-interface.ts::WcsAlertConfig"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Method exposed on `wcs-alert-drawer` to show an alert programmatically via the JS API",
                    "tags": [{
                            "name": "example",
                            "text": "Plain javascript (example inside a script tag):\n```javascript\n document.querySelector('wcs-alert-drawer').show({\n     title: 'Alert title',\n     subtitle: 'Alert subtitle',\n     intent: 'info',\n     showProgressBar: true,\n     timeout: 5000\n });"
                        }, {
                            "name": "param",
                            "text": "alert The alert to show"
                        }]
                }
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=alert-drawer.js.map
