#!/bin/bash

echo "======================================================="
echo "               JOURNEY - SUITE DE TESTS"
echo "======================================================="
echo

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

FRONTEND_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/frontend"
BACKEND_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/backend"

echo -e "${BLUE}üîß V√©rification des pr√©requis...${NC}"
echo

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Node.js n'est pas install√© ou pas dans le PATH${NC}"
    exit 1
fi

# V√©rifier PHP
if ! command -v php &> /dev/null; then
    echo -e "${RED}‚ùå PHP n'est pas install√© ou pas dans le PATH${NC}"
    exit 1
fi

# V√©rifier Composer
if ! command -v composer &> /dev/null; then
    echo -e "${RED}‚ùå Composer n'est pas install√© ou pas dans le PATH${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Tous les pr√©requis sont install√©s${NC}"
echo

# Installer les d√©pendances si n√©cessaire
echo -e "${BLUE}üì¶ Installation des d√©pendances...${NC}"
echo

echo "Installing frontend dependencies..."
cd "$FRONTEND_DIR"
if [ ! -d "node_modules" ]; then
    npm install
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Erreur lors de l'installation des d√©pendances frontend${NC}"
        exit 1
    fi
fi

echo "Installing backend dependencies..."
cd "$BACKEND_DIR"
if [ ! -d "vendor" ]; then
    composer install
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Erreur lors de l'installation des d√©pendances backend${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ D√©pendances install√©es${NC}"
echo

# Fonction pour afficher le menu
show_menu() {
    echo "======================================================="
    echo "                     MENU DE TESTS"
    echo "======================================================="
    echo "1. Tests unitaires frontend (Jest)"
    echo "2. Tests backend (PHPUnit)"  
    echo "3. Tests d'int√©gration API"
    echo "4. Tests E2E (Selenium)"
    echo "5. Tous les tests"
    echo "6. Tests avec couverture"
    echo "7. Quitter"
    echo
}

# Fonction pour les tests frontend
run_frontend_tests() {
    echo
    echo -e "${BLUE}üß™ Ex√©cution des tests unitaires frontend...${NC}"
    echo
    cd "$FRONTEND_DIR"
    npm test -- --watchAll=false --testPathPattern="src/"
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Tests frontend √©chou√©s${NC}"
        read -p "Appuyez sur Entr√©e pour continuer..."
    fi
}

# Fonction pour les tests backend
run_backend_tests() {
    echo
    echo -e "${BLUE}üß™ Ex√©cution des tests backend...${NC}"
    echo
    cd "$BACKEND_DIR"
    vendor/bin/phpunit tests/Unit
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Tests backend √©chou√©s${NC}"
        read -p "Appuyez sur Entr√©e pour continuer..."
    fi
}

# Fonction pour les tests d'int√©gration
run_integration_tests() {
    echo
    echo -e "${BLUE}üîó Ex√©cution des tests d'int√©gration API...${NC}"
    echo
    cd "$BACKEND_DIR"
    vendor/bin/phpunit tests/Integration
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Tests d'int√©gration √©chou√©s${NC}"
        read -p "Appuyez sur Entr√©e pour continuer..."
    fi
}

# Fonction pour les tests E2E
run_e2e_tests() {
    echo
    echo -e "${BLUE}üé≠ Ex√©cution des tests E2E (Selenium)...${NC}"
    echo
    echo -e "${YELLOW}‚ö†Ô∏è  Assurez-vous que votre serveur de d√©veloppement est lanc√© (npm start)${NC}"
    echo -e "${YELLOW}    et que WAMP est d√©marr√© pour l'API${NC}"
    read -p "Appuyez sur Entr√©e pour continuer..."
    cd "$FRONTEND_DIR"
    npm run test:selenium
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Tests E2E √©chou√©s${NC}"
        read -p "Appuyez sur Entr√©e pour continuer..."
    fi
}

# Fonction pour tous les tests
run_all_tests() {
    echo
    echo -e "${BLUE}üöÄ Ex√©cution de tous les tests...${NC}"
    echo
    
    TESTS_FAILED=0
    
    echo "1/4 - Tests unitaires frontend..."
    cd "$FRONTEND_DIR"
    npm test -- --watchAll=false --testPathPattern="src/"
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Tests frontend √©chou√©s${NC}"
        TESTS_FAILED=1
    fi
    
    echo "2/4 - Tests backend..."
    cd "$BACKEND_DIR"
    vendor/bin/phpunit tests/Unit
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Tests backend √©chou√©s${NC}"
        TESTS_FAILED=1
    fi
    
    echo "3/4 - Tests d'int√©gration..."
    vendor/bin/phpunit tests/Integration
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Tests d'int√©gration √©chou√©s${NC}"
        TESTS_FAILED=1
    fi
    
    echo "4/4 - Tests E2E..."
    echo -e "${YELLOW}‚ö†Ô∏è  Assurez-vous que votre serveur est lanc√©${NC}"
    cd "$FRONTEND_DIR"
    npm run test:selenium
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Tests E2E √©chou√©s${NC}"
        TESTS_FAILED=1
    fi
    
    echo
    if [ $TESTS_FAILED -eq 1 ]; then
        echo -e "${RED}‚ùå Certains tests ont √©chou√©${NC}"
    else
        echo -e "${GREEN}‚úÖ Tous les tests sont pass√©s !${NC}"
    fi
    read -p "Appuyez sur Entr√©e pour continuer..."
}

# Fonction pour les tests avec couverture
run_coverage_tests() {
    echo
    echo -e "${BLUE}üìä Ex√©cution des tests avec couverture...${NC}"
    echo
    
    echo "Frontend coverage..."
    cd "$FRONTEND_DIR"
    npm run test:coverage
    
    echo "Backend coverage..."
    cd "$BACKEND_DIR"
    vendor/bin/phpunit --coverage-html coverage
    
    echo
    echo -e "${GREEN}üìà Rapports de couverture g√©n√©r√©s :${NC}"
    echo "  Frontend : $FRONTEND_DIR/coverage/lcov-report/index.html"
    echo "  Backend  : $BACKEND_DIR/coverage/index.html"
    read -p "Appuyez sur Entr√©e pour continuer..."
}

# Boucle principale du menu
while true; do
    show_menu
    read -p "Choisissez une option (1-7): " choice
    
    case $choice in
        1)
            run_frontend_tests
            ;;
        2)
            run_backend_tests
            ;;
        3)
            run_integration_tests
            ;;
        4)
            run_e2e_tests
            ;;
        5)
            run_all_tests
            ;;
        6)
            run_coverage_tests
            ;;
        7)
            echo
            echo -e "${GREEN}üëã Au revoir !${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Option invalide${NC}"
            ;;
    esac
done